@keyframes fade-in {
  from {
    visibility: hidden;
    opacity: 0; }
  to {
    visibility: visible;
    opacity: 1; } }

@keyframes fade-out {
  from {
    visibility: visible;
    opacity: 1; }
  to {
    visibility: hidden;
    opacity: 0; } }

@keyframes slide-down {
  from {
    transform: translateY(-100%); }
  to {
    transform: translateY(0); } }

@keyframes slide-up {
  from {
    transform: translateY(0); }
  to {
    transform: translateY(-100%); } }

/* ==========================================================================
   Normalize.scss settings
   ========================================================================== */
/**
 * Includes legacy browser support IE6/7
 *
 * Set to false if you want to drop support for IE6 and IE7
 */
/* Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 * 3. Corrects text resizing oddly in IE 6/7 when body `font-size` is set using
 *  `em` units.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevents modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Addresses styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * 1. Remove border when inside `a` element in IE 8/9/10.
 * 2. Improves image quality when scaled in IE 7.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *  Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 * 4. Improves appearance and consistency in all browsers.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *  and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *  `input` and others.
 * 4. Removes inner spacing in IE 7 without affecting normal text inputs.
 *  Known issue: inner spacing remains in IE 6.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 *  Known issue: excess padding remains in IE 6.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 * 3. Corrects text not wrapping in Firefox 3.
 * 4. Corrects alignment displayed oddly in IE 6/7.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

@font-face {
  font-family: "icon-font";
  src: url("../fonts/icon-font.eot");
  src: url("../fonts/icon-font.eot?#iefix") format("eot"), url("../fonts/icon-font.woff2") format("woff2"), url("../fonts/icon-font.woff") format("woff"), url("../fonts/icon-font.ttf") format("truetype"), url("../fonts/icon-font.svg#icon-font") format("svg"); }

.ms-icon {
  font-family: "icon-font";
  display: inline-block;
  vertical-align: middle;
  line-height: 1;
  font-weight: normal;
  font-style: normal;
  speak: none;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

.icon-envelope:before {
  content: "\E001"; }

.icon-facebook:before {
  content: "\E002"; }

.icon-instagram:before {
  content: "\E003"; }

.icon-twitter:before {
  content: "\E004"; }

html,
button {
  -webkit-font-smoothing: antialiased; }

h1,
h2,
h3,
h4,
h5,
h6 {
  font: 400 1em "Trade Gothic", Arial, "Helvetica Neue", Helvetica, sans-serif;
  font-weight: 400;
  color: #101010; }

h1 {
  margin: 0;
  font-size: 2.55556em;
  font-weight: 700;
  line-height: 1.2;
  text-transform: uppercase; }

h2 {
  margin: 0;
  font-size: 1.77778em;
  line-height: 1.4; }

h3 {
  font-size: 1.66667em;
  font-weight: 700; }

h4 {
  font-size: 1.44444em; }

h5 {
  font-size: 1.33333em;
  font-weight: 700; }

h6 {
  font-size: 1em;
  font-weight: 700; }

p {
  font-size: 1em; }

strong {
  font-weight: 700; }

*,
*:before,
*:after {
  box-sizing: border-box; }

body,
html {
  overflow-x: hidden;
  font: 400 1em "Trade Gothic", Arial, "Helvetica Neue", Helvetica, sans-serif;
  color: #101010; }

body {
  background-color: #fff; }

img {
  display: inline-block;
  height: auto;
  max-width: 100%;
  outline: 0; }

fieldset {
  border: none;
  padding: 0;
  margin: 0; }

blockquote {
  margin: 0; }

menu ul,
menu li,
nav ul,
nav li {
  margin: 0;
  padding: 0; }

hr {
  width: 100%;
  height: 20px;
  margin: 0 0 20px;
  border: none;
  border-bottom: 1px dashed; }

button:focus {
  outline: none; }

a {
  text-decoration: none;
  transition: all 0.25s ease; }
  a:active, a:focus {
    text-decoration: none; }

@font-face {
  font-family: "icon-font";
  src: url("../fonts/icon-font.eot");
  src: url("../fonts/icon-font.eot?#iefix") format("eot"), url("../fonts/icon-font.woff2") format("woff2"), url("../fonts/icon-font.woff") format("woff"), url("../fonts/icon-font.ttf") format("truetype"), url("../fonts/icon-font.svg#icon-font") format("svg"); }

.ms-icon {
  font-family: "icon-font";
  display: inline-block;
  vertical-align: middle;
  line-height: 1;
  font-weight: normal;
  font-style: normal;
  speak: none;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

.icon-envelope:before {
  content: "\E001"; }

.icon-facebook:before {
  content: "\E002"; }

.icon-instagram:before {
  content: "\E003"; }

.icon-twitter:before {
  content: "\E004"; }

html,
button {
  -webkit-font-smoothing: antialiased; }

h1,
h2,
h3,
h4,
h5,
h6 {
  font: 400 1em "Trade Gothic", Arial, "Helvetica Neue", Helvetica, sans-serif;
  font-weight: 400;
  color: #101010; }

h1 {
  margin: 0;
  font-size: 2.55556em;
  font-weight: 700;
  line-height: 1.2;
  text-transform: uppercase; }

h2 {
  margin: 0;
  font-size: 1.77778em;
  line-height: 1.4; }

h3 {
  font-size: 1.66667em;
  font-weight: 700; }

h4 {
  font-size: 1.44444em; }

h5 {
  font-size: 1.33333em;
  font-weight: 700; }

h6 {
  font-size: 1em;
  font-weight: 700; }

p {
  font-size: 1em; }

strong {
  font-weight: 700; }

#main-nav .menu--mobile {
  display: none;
  position: fixed;
  right: 0;
  top: -1px;
  height: 100vh;
  min-width: 250px;
  padding: 0 1.66667rem;
  transform: translate(100%, 0);
  transition: transform 0.25s ease;
  background-color: #EC1846;
  color: #fff;
  box-shadow: -1px 0 5px 0 #101010; }
  #main-nav .menu--mobile.mobile__active {
    transform: translate(0); }
  #main-nav .menu--mobile .actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.88889rem 0; }
    #main-nav .menu--mobile .actions #mobile-menu-close {
      cursor: pointer;
      font-size: 24px; }
  #main-nav .menu--mobile .list--social {
    display: block;
    padding: 1.88889rem 0; }
    #main-nav .menu--mobile .list--social .list__icon:hover {
      color: #f2f2f2; }
  #main-nav .menu--mobile .navlist {
    font-size: 14px;
    font-weight: 700; }
    #main-nav .menu--mobile .navlist li,
    #main-nav .menu--mobile .navlist details {
      padding: 0.83333rem 0; }
      #main-nav .menu--mobile .navlist li ul,
      #main-nav .menu--mobile .navlist details ul {
        margin-left: 1.11111rem !important; }
        #main-nav .menu--mobile .navlist li ul li a,
        #main-nav .menu--mobile .navlist details ul li a {
          font-weight: 400; }
      #main-nav .menu--mobile .navlist li summary,
      #main-nav .menu--mobile .navlist details summary {
        cursor: pointer; }
        #main-nav .menu--mobile .navlist li summary:hover,
        #main-nav .menu--mobile .navlist details summary:hover {
          color: #f2f2f2; }
        #main-nav .menu--mobile .navlist li summary:focus,
        #main-nav .menu--mobile .navlist details summary:focus {
          outline: none; }
    #main-nav .menu--mobile .navlist li a {
      font-size: 14px !important;
      text-transform: capitalize !important; }
    #main-nav .menu--mobile .navlist li.list__icon {
      display: inline-flex !important;
      align-items: center;
      justify-content: center;
      width: 40px;
      height: 50px; }
      #main-nav .menu--mobile .navlist li.list__icon a {
        font-size: 24px !important; }
        #main-nav .menu--mobile .navlist li.list__icon a:hover {
          color: #fff !important; }
      #main-nav .menu--mobile .navlist li.list__icon:hover {
        box-shadow: inset 2px 2px 0 0 #fff, inset -2px -2px 0 0 #fff; }
    #main-nav .menu--mobile .navlist li:hover a {
      color: #f2f2f2; }
    #main-nav .menu--mobile .navlist li + li {
      margin-left: 0; }
  @media (max-width: 980px) {
    #main-nav .menu--mobile {
      display: block; } }
  #main-nav .menu--mobile li + li > a {
    border-top: 0 !important; }

#header.fixed-header #main-header .menu > ul > li > a {
  padding-bottom: 5px;
  margin-bottom: 18px; }

a,
button {
  background: none;
  border: none;
  text-decoration: none; }
  a.btn,
  button.btn {
    display: inline-block;
    color: #fff;
    text-transform: uppercase;
    padding: 0.55556rem;
    font-weight: 700;
    transition: background-color 0.25s ease; }
    a.btn--primary,
    button.btn--primary {
      background-color: #EC1846; }
      a.btn--primary:hover,
      button.btn--primary:hover {
        background-color: #c11036 !important; }
      a.btn--primary:active,
      button.btn--primary:active {
        background-color: #920c29; }
      a.btn--primary.btn--inverse,
      button.btn--primary.btn--inverse {
        background-color: #fff;
        color: #EC1846; }
        a.btn--primary.btn--inverse:hover,
        button.btn--primary.btn--inverse:hover {
          background-color: #EC1846 !important;
          color: #fff;
          box-shadow: inset 2px 2px 0 0 #fff, inset -2px -2px 0 0 #fff; }
    a.btn--secondary,
    button.btn--secondary {
      background-color: transparent;
      box-shadow: inset 2px 2px 0 0 #EC1846, inset -2px -2px 0 0 #EC1846; }
      a.btn--secondary:hover,
      button.btn--secondary:hover {
        box-shadow: inset 2px 2px 0 0 #fff, inset -2px -2px 0 0 #fff;
        background-color: transparent; }
      a.btn--secondary:active,
      button.btn--secondary:active {
        background-color: #920c29;
        box-shadow: inset 2px 2px 0 0 #920c29, inset -2px -2px 0 0 #920c29; }
      a.btn--secondary.btn--inverse,
      button.btn--secondary.btn--inverse {
        box-shadow: inset 2px 2px 0 0 #fff, inset -2px -2px 0 0 #fff; }
        a.btn--secondary.btn--inverse:hover,
        button.btn--secondary.btn--inverse:hover {
          background-color: #fff !important;
          color: #EC1846; }

ul.list li {
  display: block !important; }

ul.list--social li.list__icon {
  display: inline-block !important;
  font-size: 24px;
  padding: 0.55556rem !important;
  transition: color 0.25s ease; }
  ul.list--social li.list__icon a {
    color: #fff; }
    ul.list--social li.list__icon a:hover {
      color: #EC1846 !important; }
    ul.list--social li.list__icon a:before {
      content: none !important; }
  ul.list--social li.list__icon:not(ul.list--social li.list__icon:first-child) {
    margin-left: 1.11111rem; }
  ul.list--social li.list__icon:hover a {
    color: #EC1846; }

/* Header styles */
@media (max-width: 980px) {
  #header .logo {
    float: left; } }

#header #main-header ul {
  margin-top: 0;
  margin-bottom: 0; }

#header .navigation > .btn {
  display: none;
  margin: 15px 20px; }

#header .navigation #mobile-menu-button {
  border: none;
  background-color: transparent;
  position: relative; }
  #header .navigation #mobile-menu-button span {
    background-color: #fff; }

@media (max-width: 980px) {
  #header .navigation {
    float: right;
    padding: 24px 0; }
    #header .navigation > nav {
      display: inline-block !important; }
    #header .navigation .btn {
      display: inline-block;
      margin-right: 20px; } }

.logo a img {
  height: 80px !important; }

.page-heading.style-image {
  padding-top: 250px;
  padding-bottom: 50px; }
  .page-heading.style-image video {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    object-fit: cover; }

.page-heading.align-center > .container {
  position: relative; }

.navigation #main-nav.color-white + .btn-container a.button:before {
  background-color: #EC1846 !important; }

#header .navigation > div {
  width: auto; }

.color-dark .btn-container {
  text-align: right; }
  .color-dark .btn-container a {
    color: #fff;
    border: none;
    transition: all 0.25s ease; }
    .color-dark .btn-container a:first-of-type {
      margin: 0 10px; }
    .color-dark .btn-container a:hover {
      background-color: transparent; }

.page-heading.style-image .title h1 {
  font-size: 104px;
  font-weight: bold;
  margin-bottom: 1.11111rem; }

.page-heading.style-image .title p {
  font-size: 24px;
  line-height: 1.25;
  text-align: center; }

.title + .btn {
  margin-top: 5.55556rem;
  font-size: 36px;
  padding: 0.83333rem 1.94444rem; }

/* End header styles */

/*# sourceMappingURL=data:application/json;base64, */
