@keyframes fade-in {
  from {
    visibility: hidden;
    opacity: 0; }
  to {
    visibility: visible;
    opacity: 1; } }

@keyframes fade-out {
  from {
    visibility: visible;
    opacity: 1; }
  to {
    visibility: hidden;
    opacity: 0; } }

@keyframes slide-down {
  from {
    transform: translateY(-100%); }
  to {
    transform: translateY(0); } }

@keyframes slide-up {
  from {
    transform: translateY(0); }
  to {
    transform: translateY(-100%); } }

/* ==========================================================================
   Normalize.scss settings
   ========================================================================== */
/**
 * Includes legacy browser support IE6/7
 *
 * Set to false if you want to drop support for IE6 and IE7
 */
/* Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 * 3. Corrects text resizing oddly in IE 6/7 when body `font-size` is set using
 *  `em` units.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevents modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Addresses styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * 1. Remove border when inside `a` element in IE 8/9/10.
 * 2. Improves image quality when scaled in IE 7.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *  Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 * 4. Improves appearance and consistency in all browsers.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *  and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *  `input` and others.
 * 4. Removes inner spacing in IE 7 without affecting normal text inputs.
 *  Known issue: inner spacing remains in IE 6.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 *  Known issue: excess padding remains in IE 6.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 * 3. Corrects text not wrapping in Firefox 3.
 * 4. Corrects alignment displayed oddly in IE 6/7.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

@font-face {
  font-family: "icon-font";
  src: url("../fonts/icon-font.eot");
  src: url("../fonts/icon-font.eot?#iefix") format("eot"), url("../fonts/icon-font.woff2") format("woff2"), url("../fonts/icon-font.woff") format("woff"), url("../fonts/icon-font.ttf") format("truetype"), url("../fonts/icon-font.svg#icon-font") format("svg"); }

.ms-icon {
  font-family: "icon-font";
  display: inline-block;
  vertical-align: middle;
  line-height: 1;
  font-weight: normal;
  font-style: normal;
  speak: none;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

.icon-star-full:before {
  content: "\E001"; }

.icon-star-half:before {
  content: "\E002"; }

.icon-star-quarter:before {
  content: "\E003"; }

.icon-star-three-quarters:before {
  content: "\E004"; }

html,
button {
  -webkit-font-smoothing: antialiased; }

h1,
h2,
h3,
h4,
h5,
h6 {
  font: 400 1em Arial, "Helvetica Neue", Helvetica, sans-serif;
  font-weight: 400;
  color: #101010; }

h1 {
  margin: 0;
  font-size: 2.875em;
  font-weight: 700;
  line-height: 1.2;
  text-transform: uppercase; }

h2 {
  margin: 0;
  font-size: 2em;
  line-height: 1.4; }

h3 {
  font-size: 1.5em; }

h4 {
  font-size: 1.375em; }

h5 {
  font-size: 1.125em; }

h6 {
  font-size: 1em; }

strong {
  font-weight: 700; }

*,
*:before,
*:after {
  box-sizing: border-box; }

body,
html {
  overflow-x: hidden;
  font: 400 1em Arial, "Helvetica Neue", Helvetica, sans-serif;
  color: #101010; }

body {
  background-color: #edede6; }

img {
  display: inline-block;
  height: auto;
  max-width: 100%;
  outline: 0; }

fieldset {
  border: none;
  padding: 0;
  margin: 0; }

blockquote {
  margin: 0; }

menu ul,
menu li,
nav ul,
nav li {
  margin: 0;
  padding: 0; }

hr {
  width: 100%;
  height: 20px;
  margin: 0 0 20px;
  border: none;
  border-bottom: 1px dashed; }

button:focus {
  outline: none; }

a {
  text-decoration: none;
  transition: all 0.25s ease; }

@font-face {
  font-family: "icon-font";
  src: url("../fonts/icon-font.eot");
  src: url("../fonts/icon-font.eot?#iefix") format("eot"), url("../fonts/icon-font.woff2") format("woff2"), url("../fonts/icon-font.woff") format("woff"), url("../fonts/icon-font.ttf") format("truetype"), url("../fonts/icon-font.svg#icon-font") format("svg"); }

.ms-icon {
  font-family: "icon-font";
  display: inline-block;
  vertical-align: middle;
  line-height: 1;
  font-weight: normal;
  font-style: normal;
  speak: none;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

.icon-star-full:before {
  content: "\E001"; }

.icon-star-half:before {
  content: "\E002"; }

.icon-star-quarter:before {
  content: "\E003"; }

.icon-star-three-quarters:before {
  content: "\E004"; }

html,
button {
  -webkit-font-smoothing: antialiased; }

h1,
h2,
h3,
h4,
h5,
h6 {
  font: 400 1em Arial, "Helvetica Neue", Helvetica, sans-serif;
  font-weight: 400;
  color: #101010; }

h1 {
  margin: 0;
  font-size: 2.875em;
  font-weight: 700;
  line-height: 1.2;
  text-transform: uppercase; }

h2 {
  margin: 0;
  font-size: 2em;
  line-height: 1.4; }

h3 {
  font-size: 1.5em; }

h4 {
  font-size: 1.375em; }

h5 {
  font-size: 1.125em; }

h6 {
  font-size: 1em; }

strong {
  font-weight: 700; }

a,
button {
  background: none;
  border: none;
  text-decoration: none; }

/* Header styles */
.logo a img {
  height: 80px; }

.page-heading.style-image {
  padding-top: 260px;
  padding-bottom: 160px; }

.navigation #main-nav.color-white + .btn-container a.button:before {
  background-color: #ec1846 !important; }

.title h1 {
  font-size: 100px;
  font-weight: bold; }

.title p {
  font-size: 24px;
  line-height: 1.25; }

/* End header styles */

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVzLmNzcyIsInNvdXJjZXMiOlsic3R5bGVzLnNjc3MiLCJfaGVscGVycy5zY3NzIiwiaGVscGVycy9fZnVuY3Rpb25zLnNjc3MiLCJjb3JlL19zZXR0aW5ncy5zY3NzIiwiaGVscGVycy9fbWl4aW5zLnNjc3MiLCJoZWxwZXJzL19wbGFjZWhvbGRlcnMuc2NzcyIsImhlbHBlcnMvX2NsYXNzZXMuc2NzcyIsImhlbHBlcnMvX2FuaW1hdGlvbnMuc2NzcyIsIl9jb3JlLnNjc3MiLCJjb3JlL19yZXNldC5zY3NzIiwibGlicy9ub3JtYWxpemUvX25vcm1hbGl6ZS5zY3NzIiwiY29yZS9fYmFzZS5zY3NzIiwiY29yZS9fdHlwb2dyYXBoeS5zY3NzIiwibW9kdWxlcy9faWNvbnMuc2NzcyIsImxpYnMvaWNvbmZvbnQvX2ljb24tZm9udC5zY3NzIiwiY29yZS9fZ3JpZHMuc2NzcyIsImxpYnMvamVldC9famVldC5zY3NzIiwibGlicy9qZWV0L19zZXR0aW5ncy5zY3NzIiwibGlicy9qZWV0L19mdW5jdGlvbnMuc2NzcyIsImxpYnMvamVldC9fZ3JpZC5zY3NzIiwibGlicy9qZWV0L19hbGlhc2VzLnNjc3MiLCJjb3JlL19sYXlvdXQuc2NzcyIsInRlbXBsYXRlcy9faGVhZGVyLnNjc3MiLCJ0ZW1wbGF0ZXMvX2hvbWUuc2NzcyIsInRlbXBsYXRlcy9fZm9vdGVyLnNjc3MiLCJfbW9kdWxlcy5zY3NzIiwibW9kdWxlcy9fYWNjb3JkaW9ucy5zY3NzIiwibW9kdWxlcy9fYWxlcnRzLnNjc3MiLCJtb2R1bGVzL19idXR0b25zLnNjc3MiLCJtb2R1bGVzL19mb3Jtcy5zY3NzIiwibW9kdWxlcy9mb3Jtcy9fcmFkaW8tY2hlY2tib3guc2NzcyIsIm1vZHVsZXMvX2hpZGVhYmxlLnNjc3MiLCJtb2R1bGVzL19saXN0cy5zY3NzIiwibW9kdWxlcy9fbW9kYWxzLnNjc3MiLCJtb2R1bGVzL19yYXRpbmdzLnNjc3MiLCJsaWJzL3Nhc3N5LWNhc3QvX1Nhc3N5Q2FzdC5zY3NzIiwibW9kdWxlcy9fdGFicy5zY3NzIiwibW9kdWxlcy9fdGFibGVzLnNjc3MiLCJtb2R1bGVzL190b29sdGlwcy5zY3NzIiwiX3NoYW1lLnNjc3MiXSwic291cmNlc0NvbnRlbnQiOlsiLy8vL1xyXG4vLy8gUHJvamVjdDogICAgVUkgRGV2IFN0YXJ0ZWQgZnJhbWV3b3JrXHJcbi8vLyBDb21wYW55OiAgICBNYWtpbmcgU2Vuc2VcclxuLy8vIFdlYnNpdGU6IFx0XHRodHRwOi8vbWFraW5nc2Vuc2UuY29tXHJcbi8vLyBWZXJzaW9uOiAgICAxLjEuMVxyXG4vLy8gQXV0aG9yOiAgICAgVUkgRGV2IFRlYW0gOilcclxuLy8vIFxyXG4vLy8gXHJcbi8vLyBJTVBPUlRTXHJcbi8vLyBcclxuLy8vIC0+IEhlbHBlcnNcclxuLy8vIC0gQ29sbGVjdGlvbiBvZiBjdXN0b20gU0FTUyBGdW5jdGlvbnMsIE1peGlucywgcGxhY2Vob2xkZXJzLCBleHRlbmRzIGFuZCBoZWxwZXIgY2xhc3Nlcy5cclxuLy8vIFx0VGhpcyBmaWxlIGlzIGluY2x1ZGVkIGJlZm9yZSB0aGUgY29yZSBzaW5jZSBjb3JlIG1ha2VzIHVzZSBvZiBzb21lIGZ1bmN0aW9ucyBhbmRcclxuLy8vIFx0bWl4aW5zLlxyXG4vLy8gXHJcbi8vLyAtPiBDb3JlXHJcbi8vLyAtIE1haW4gc3R5bGVzLiBDb3JlIGNvbnRlbnQuXHJcbi8vLyBcclxuLy8vIC0+IE1vZHVsZXNcclxuLy8vIC0gRXZlcnkgbW9kdWxhci9yZXVzYWJsZSBlbGVtZW50IGhhcyBpdHMgc3R5bGVzIGRlZmluZWQgaGVyZS5cclxuLy8vIFxyXG4vLy8gLT4gU2hhbWUgQ1NTXHJcbi8vLyAtIFllYWgsIHdlIHNob3VsZCBiZSBhc2hhbWVkIG9mIHRoaXMuIE1VU1QgZml4IHRoZXNlIGluIHRoZSBuZWFyIGZ1dHVyZS5cclxuLy8vIEBhdXRob3IgTVNcclxuLy8vL1x0XHRcclxuXHJcbkBpbXBvcnQgXCJoZWxwZXJzXCI7XHJcbkBpbXBvcnQgXCJjb3JlXCI7XHJcbkBpbXBvcnQgXCJtb2R1bGVzXCI7XHJcbkBpbXBvcnQgXCJzaGFtZVwiO1xyXG4iLCIvLy8vXHJcbi8vLyBIZWxwZXJzXHJcbi8vLyAtPiBGdW5jdGlvbnNcclxuLy8vIC0+IE1peGluc1xyXG4vLy8gLT4gUGxhY2Vob2xkZXJzXHJcbi8vLyAtPiBDbGFzc2VzXHJcbi8vLyAtPiBBbmltYXRpb25zICYga2V5ZnJhbWVzXHJcbi8vLyBAZ3JvdXAgSGVscGVyc1xyXG4vLy8gQGF1dGhvciBNU1xyXG4vLy8vXHJcblxyXG5AaW1wb3J0IFwiaGVscGVycy9mdW5jdGlvbnNcIjtcclxuQGltcG9ydCBcImhlbHBlcnMvbWl4aW5zXCI7XHJcbkBpbXBvcnQgXCJoZWxwZXJzL3BsYWNlaG9sZGVyc1wiO1xyXG5AaW1wb3J0IFwiaGVscGVycy9jbGFzc2VzXCI7XHJcbkBpbXBvcnQgXCJoZWxwZXJzL2FuaW1hdGlvbnNcIjtcclxuIiwiLy8vL1xyXG4vLy8gRnVuY3Rpb25zXHJcbi8vLyBAZ3JvdXAgRnVuY3Rpb25zXHJcbi8vLyBAYXV0aG9yIERhbWlhbiBNdXRpXHJcbi8vLy9cclxuXHJcbi8vL1xyXG5AaW1wb3J0IFwiLi4vY29yZS9zZXR0aW5nc1wiO1xyXG5cclxuLy8vIENvbnZlcnQgdG8gRU1zIGZ1bmN0aW9uXHJcbi8vLyBAcGFyYW0ge051bWJlcn0gdGFyZ2V0IC0gVGhlIHZhbHVlIHRvIGJlIGNvbnZlcnRlZFxyXG4vLy8gQHBhcmFtIHtOdW1iZXJ9IGNvbnRleHQgWyRtc3VpZi1mb250LXNpemVdIFRoZSBiYXNlIGZvbnQgc2l6ZSBcclxuLy8vIEByZXR1cm4ge0VtfSB2YWx1ZVxyXG5AZnVuY3Rpb24gdG9lbSgkdGFyZ2V0LCAkY29udGV4dDogJG1zdWlmLWZvbnQtc2l6ZSkge1xyXG4gICBAaWYgJHRhcmdldCA9PSAwIHsgQHJldHVybiAwIH1cclxuICAgQHJldHVybiAkdGFyZ2V0IC8gJGNvbnRleHQgKyAwZW07XHJcbn1cclxuXHJcbi8vLyBDb252ZXJ0IHRvIFJFTXMgZnVuY3Rpb25cclxuLy8vIEBwYXJhbSB7TnVtYmVyfSB0YXJnZXQgLSBUaGUgdmFsdWUgdG8gYmUgY29udmVydGVkXHJcbi8vLyBAcGFyYW0ge051bWJlcn0gY29udGV4dCBbJG1zdWlmLWZvbnQtc2l6ZV0gLSBUaGUgYmFzZSBmb250IHNpemUgXHJcbi8vLyBAcmV0dXJuIHtSZW19IHZhbHVlXHJcbkBmdW5jdGlvbiB0b3JlbSgkdGFyZ2V0LCAkY29udGV4dDogJG1zdWlmLWZvbnQtc2l6ZSkge1xyXG4gICBAaWYgJHRhcmdldCA9PSAwIHsgQHJldHVybiAwIH1cclxuICAgQHJldHVybiAkdGFyZ2V0IC8gJGNvbnRleHQgKyAwcmVtO1xyXG59XHJcblxyXG4vLy8gUmVtb3ZlIHVuaXQgZnJvbSB2YWx1ZVxyXG4vLy8gQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIC0gVGhlIGVudGlyZSB2YWx1ZVxyXG4vLy8gQHJldHVybiB7TnVtYmVyfSBUaGUgc3RyaXBlZCB2YWx1ZVxyXG5AZnVuY3Rpb24gc3RyaXAtdW5pdCgkdmFsdWUpIHtcclxuXHRAcmV0dXJuICR2YWx1ZSAvICgkdmFsdWUgKiAwICsgMSk7XHJcbn1cclxuXHJcbi8vLyBMaWdodGVuIGEgY29sb3JcclxuLy8vIEBwYXJhbSB7U3RyaW5nIHwgQ29sb3J9IGNvbG9yIC0gVGhlIGNvbG9yIHRvIGJlIGxpZ2h0ZW5cclxuLy8vIEBwYXJhbSB7TnVtYmVyfSBwZXJjZW50YWdlIC0gVGhlIHBlcmNlbnQgdG8gYmUgbGlnaHRlblxyXG4vLy8gQHJldHVybiB7U3RyaW5nIHwgQ29sb3J9IGNvbG9yXHJcbkBmdW5jdGlvbiB0aW50KCRjb2xvciwgJHBlcmNlbnRhZ2UpIHtcclxuICBAcmV0dXJuIG1peCh3aGl0ZSwgJGNvbG9yLCAkcGVyY2VudGFnZSk7XHJcbn1cclxuXHJcbi8vLyBEYXJrZW4gYSBjb2xvclxyXG4vLy8gQHBhcmFtIHtTdHJpbmcgfCBDb2xvcn0gY29sb3IgLSBUaGUgY29sb3IgdG8gYmUgZGFya2VuXHJcbi8vLyBAcGFyYW0ge051bWJlcn0gcGVyY2VudGFnZSAtIFRoZSBwZXJjZW50IHRvIGJlIGRhcmtlblxyXG4vLy8gQHJldHVybiB7U3RyaW5nIHwgQ29sb3J9IGNvbG9yXHJcbkBmdW5jdGlvbiBzaGFkZSgkY29sb3IsICRwZXJjZW50YWdlKSB7XHJcbiAgQHJldHVybiBtaXgoYmxhY2ssICRjb2xvciwgJHBlcmNlbnRhZ2UpO1xyXG59XHJcblxyXG4vLy8gRXhwbG9kZSBhIHN0cmluZyBpbiBhIFBIUCBmYXNoaW9uXHJcbi8vLyBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIC0gVGFyZ2V0IHN0cmluZ1xyXG4vLy8gQHBhcmFtIHtTdHJpbmd9IGRlbSAtIERlbGltaXRlciBjaGFyYWN0ZXJcclxuLy8vIEByZXR1cm4ge1N0cmluZ30gRXhwbG9kZWQgc3RyaW5nXHJcbkBmdW5jdGlvbiBleHBsb2RlKCRzdHJpbmcsJGRlbSkge1xyXG4gICRsaXN0OiAoKTtcclxuICAkc3VtOiBzdHItbGVuZ3RoKCRzdHJpbmcpO1xyXG5cclxuICBAZm9yICRpIGZyb20gMSB0aHJvdWdoICRzdW0ge1xyXG4gICAgJHN0cjogc3RyLWluZGV4KCRzdHJpbmcsJGRlbSk7XHJcblxyXG4gICAgQGlmIHN0ci1sZW5ndGgoJHN0cmluZykgPj0gMSBhbmQgJHN0ciA9PSBudWxsIHtcclxuICAgICAgJGxpc3Q6IGFwcGVuZCgkbGlzdCwkc3RyaW5nLGNvbW1hKTtcclxuICAgICAgJHN0cmluZzogJyc7XHJcbiAgICB9XHJcblxyXG4gICAgQGlmIHR5cGUtb2YoJHN0cikgPT0gbnVtYmVyIHtcclxuICAgICAgJGVhY2g6IHN0ci1zbGljZSgkc3RyaW5nLDAsKCRzdHIgLSAxKSk7XHJcbiAgICAgICRsaXN0OiBhcHBlbmQoJGxpc3QsJGVhY2gsY29tbWEpO1xyXG4gICAgICAkc3RyaW5nOiBzdHItc2xpY2UoJHN0cmluZywoJHN0ciArIDEpLCAkc3VtKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBpZiBsZW5ndGgoJGxpc3QpID4gMSB7XHJcbiAgICBAcmV0dXJuICcuJyArIG50aCgkbGlzdCwgMik7XHJcbiAgfVxyXG4gIEBlbHNlIHtcclxuICAgIEByZXR1cm4gbnRoKCRsaXN0LCAxKTtcclxuICB9XHJcbn1cclxuXHJcbi8vLyBHZXQgdmFsdWVzIGluIGEgbXVsdGlkaW1lbnRpb25hbCBtYXAuIFRoYW5rcyB0byBIdWdvIEdpcmF1ZGVsXHJcbi8vLyBAYXV0aG9yIEh1Z28gR2lyYXVkZWxcclxuLy8vIEBwYXJhbSB7bWFwfSAkbWFwIC0gTWFwXHJcbi8vLyBAcGFyYW0ge2FyZ2xpc3R9ICRrZXlzIC0gS2V5cyB0byBmZXRjaFxyXG4vLy8gQHJldHVybiB7Kn1cclxuQGZ1bmN0aW9uIG1hcC1kZWVwLWdldCgkbWFwLCAka2V5cy4uLikge1xyXG4gIEBlYWNoICRrZXkgaW4gJGtleXMge1xyXG4gICAgJG1hcDogbWFwLWdldCgkbWFwLCAka2V5KTtcclxuICB9XHJcbiAgQHJldHVybiAkbWFwO1xyXG59XHJcbiIsIi8vLy9cclxuLy8vIFNldHRpbmdzIEZpbGVcclxuLy8vIEluaXQgZm9udHMsIGJhY2tncm91bmRzLCB3cmFwcGVycywgYnJlYWtwb2ludHMgYW5kIFRyYW5zaXRpb24gdmFyaWFibGVzXHJcbi8vLyBAZ3JvdXAgU2V0dGluZ3NcclxuLy8vL1xyXG5cclxuXHJcbi8vLyBGb250cyAvLy9cclxuLy8vXHJcbiRtc3VpZi1mb250LXNpemU6ICAgICAgICAgICAgICAgICAxNnB4O1xyXG4vLy9cclxuJG1zdWlmLWZvbnQtd2VpZ2h0OiAgICAgICAgICAgICAgIDQwMDtcclxuLy8vXHJcbiRtc3VpZi1mb250LWZhbWlseTogICAgICAgICAgICAgICBBcmlhbCwgXCJIZWx2ZXRpY2EgTmV1ZVwiLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XHJcbi8vL1xyXG4kbXN1aWYtZm9udDogICAgICAgICAgICAgICAgICAgICAgJG1zdWlmLWZvbnQtd2VpZ2h0IHRvZW0oJG1zdWlmLWZvbnQtc2l6ZSkgJG1zdWlmLWZvbnQtZmFtaWx5O1xyXG4vLy9cclxuJG1zdWlmLWZvbnQtd2VpZ2h0LWxpZ2h0OiAgICAgICAgIDMwMDtcclxuLy8vXHJcbiRtc3VpZi1mb250LXdlaWdodC1yZWd1bGFyOiAgICAgICAkbXN1aWYtZm9udC13ZWlnaHQ7XHJcbi8vL1xyXG4kbXN1aWYtZm9udC13ZWlnaHQtc2VtaWJvbGQ6ICAgICAgNjAwO1xyXG4vLy9cclxuJG1zdWlmLWZvbnQtd2VpZ2h0LWJvbGQ6ICAgICAgICAgIDcwMDtcclxuLy8vXHJcbiRtc3VpZi1mb250LWNvbG9yOiAgICAgICAgICAgICAgICAjMTAxMDEwO1xyXG4vLy9cclxuJG1zdWlmLWZvbnQtY29sb3ItYnJpZ2h0OiAgICAgICAgICNlZGVkZTY7XHJcbi8vL1xyXG4kbXN1aWYtZm9udC1jb2xvci1kYXJrOiAgICAgICAgICAgJG1zdWlmLWZvbnQtY29sb3I7XHJcbi8vL1xyXG4kbXN1aWYtZm9udC1jb2xvci13aGl0ZTogICAgICAgICAgI2ZmZjtcclxuXHJcbi8vLyBCYWNrZ3JvdW5kIC8vL1xyXG4vLy9cclxuJG1zdWlmLWJhY2tncm91bmQ6ICAgICAgICAgICAgICAgICRtc3VpZi1mb250LWNvbG9yLWJyaWdodDtcclxuLy8vXHJcbiRtc3VpZi1iYWNrZ3JvdW5kLWJyaWdodDogICAgICAgICAkbXN1aWYtYmFja2dyb3VuZDtcclxuXHJcbi8vLyBXcmFwcGVyIC8vL1xyXG4vLy9cclxuJG1zdWlmLXdyYXBwZXItbWluLXdpZHRoOiAgICAgICAgIHRvcmVtKDEyMDBweCk7XHJcblxyXG4vLy8gQnJlYWtwb2ludHMgLy8vXHJcbi8vL1xyXG4kbXN1aWYtYnJlYWtwb2ludHM6IChcclxuICAnZGVza3RvcC1maGQnOiAobWF4LXdpZHRoOiAxOTIwcHgpLFxyXG4gICdkZXNrdG9wJzogKG1heC13aWR0aDogMTM2NnB4KSxcclxuICAnaXBhZCc6IChtaW4td2lkdGg6IDEwMjNweCwgbWF4LXdpZHRoOiAxMDI0cHgpLFxyXG4gICdpc2Rlc2t0b3AnOiAobWluLXdpZHRoOiAxMDI0cHgpLFxyXG4gICdpc21vYmlsZSc6IChtYXgtd2lkdGg6IDEwMjRweCksXHJcbiAgJ2lwaG9uZSc6IChtYXgtd2lkdGg6IDk4MHB4KVxyXG4pO1xyXG5cclxuLy8vIFRyYW5zaXRpb24vQW5pbWF0aW9uIC8vL1xyXG4vLy9cclxuJG1zdWlmLXRyYW5zaXRpb24tZHVyYXRpb246ICAgICAgMC4yNXM7XHJcbi8vL1xyXG4kbXN1aWYtdHJhbnNpdGlvbi10aW1pbmc6ICAgICAgICBlYXNlOyIsIi8vLy9cclxuLy8vIEZ1bmN0aW9uc1xyXG4vLy8gQGdyb3VwIE1peGluc1xyXG4vLy8gQGF1dGhvciBEYW1pYW4gTXV0aVxyXG4vLy8vXHJcblxyXG5cclxuLy8vIERlYnVnIGxheW91dCBieSBkcmF3aW5nIGJvcmRlcnMgYXJvdW5kIGV2ZXJ5IGVsZW1lbnRcclxuLy8vIFVuY29tbWVudCB0aGUgZm9sbG93aW5nIGxpbmUgdG8gZGVidWcgbGF5b3V0J3MgYm94IG1vZGVsLlxyXG4vLy8gaW5jbHVkZSBlZGl0KCk7XHJcbkBtaXhpbiBkZWJ1Zy1sYXlvdXQoKSB7XHJcblx0KiB7IG91dGxpbmU6IDJweCBkb3R0ZWQgcmVkOyB9XHJcblx0KiAqIHsgb3V0bGluZTogMnB4IGRvdHRlZCBncmVlbjsgfVxyXG5cdCogKiAqIHsgb3V0bGluZTogMnB4IGRvdHRlZCBvcmFuZ2U7IH1cclxuXHQqICogKiAqIHsgb3V0bGluZTogMnB4IGRvdHRlZCBibHVlOyB9XHJcblx0KiAqICogKiAqIHsgb3V0bGluZTogMXB4IHNvbGlkIHJlZDsgfVxyXG5cdCogKiAqICogKiAqIHsgb3V0bGluZTogMXB4IHNvbGlkIGdyZWVuOyB9XHJcblx0KiAqICogKiAqICogKiB7IG91dGxpbmU6IDFweCBzb2xpZCBvcmFuZ2U7IH1cclxuXHQqICogKiAqICogKiAqICogeyBvdXRsaW5lOiAxcHggc29saWQgYmx1ZTsgfVxyXG59XHJcblxyXG4vLy8gQ29udHJvbCBlbGVtZW50J3MgYXNwZWN0IHJhdGlvXHJcbi8vLyBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgd2lkdGhcclxuLy8vIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0XHJcbkBtaXhpbiBhc3BlY3QtcmF0aW8oJHdpZHRoLCAkaGVpZ2h0KSB7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICY6YmVmb3JlIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgY29udGVudDogXCJcIjtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgcGFkZGluZy10b3A6ICgkaGVpZ2h0IC8gJHdpZHRoKSAqIDEwMCU7XHJcbiAgfVxyXG4gID4gLmNvbnRlbnQge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgbGVmdDogMDtcclxuICAgIHJpZ2h0OiAwO1xyXG4gICAgYm90dG9tOiAwO1xyXG4gIH1cclxufVxyXG5cclxuLy8vIFN0eWxlIGlucHV0J3MgcGxhY2Vob2xkZXJcclxuQG1peGluIHBsYWNlaG9sZGVyIHtcclxuICA6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge0Bjb250ZW50O31cclxuICA6LW1vei1wbGFjZWhvbGRlciAgICAgICAgICAge0Bjb250ZW50O31cclxuICA6Oi1tb3otcGxhY2Vob2xkZXIgICAgICAgICAge0Bjb250ZW50O31cclxuICA6LW1zLWlucHV0LXBsYWNlaG9sZGVyICAgICAge0Bjb250ZW50O31cclxufVxyXG5cclxuLy8vIENyZWF0ZSBhIHNpbmdsZSBtZWRpYSBjb25kaXRpb24gb3V0IG9mIGEgbWFwIG9mIHF1ZXJpZXNcclxuLy8vIEBwYXJhbSB7U3RyaW5nfSBxdWVyaWVzIC0gVGhlIHF1ZXJpZXNcclxuQG1peGluIG1lZGlhKCRxdWVyaWVzKSB7XHJcbiAgQGlmIGxlbmd0aCgkcXVlcmllcykgPT0gMCB7XHJcbiAgICBAY29udGVudDtcclxuICB9IEBlbHNlIHtcclxuICAgICRmaXJzdC1rZXk6IG50aChtYXAta2V5cygkcXVlcmllcyksIDEpO1xyXG5cclxuICAgIEBtZWRpYSAoJGZpcnN0LWtleTogbWFwLWdldCgkcXVlcmllcywgJGZpcnN0LWtleSkpIHtcclxuICAgICAgJHF1ZXJpZXM6IG1hcC1yZW1vdmUoJHF1ZXJpZXMsICRmaXJzdC1rZXkpO1xyXG5cclxuICAgICAgQGluY2x1ZGUgbWVkaWEoJHF1ZXJpZXMpIHtcclxuICAgICAgICBAY29udGVudDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy8vIEdldHMgdGhlIG1lZGlhIHF1ZXJ5IGZyb20gdGhlIE1lZGlhIFF1ZXJpZXMgTGlzdCBDb25maWd1cmVkIGluIGAkbXN1aWYtYnJlYWtwb2ludHNgXHJcbi8vLyBAcGFyYW0ge1N0cmluZ30gYnJlYWtwb2ludCAtIFRoZSBicmVha3BvaW50IHRvIHNlYXJjaCBvbiBgJG1zdWlmLWJyZWFrcG9pbnRzYCBMaXN0XHJcbkBtaXhpbiByZXNwb25kLXRvKCRicmVha3BvaW50KSB7XHJcbiAgLy8gR2V0IHRoZSBxdWVyeSBtYXAgZm9yICRtc3VpZi1icmVha3BvaW50cyBtYXBcclxuICAkcXVlcmllczogbWFwLWdldCgkbXN1aWYtYnJlYWtwb2ludHMsICRicmVha3BvaW50KTtcclxuXHJcbiAgLy8gSWYgdGhlcmUgaXMgbm8gcXVlcnkgY2FsbGVkICRicmVha3BvaW50IGluIG1hcCwgdGhyb3cgYW4gZXJyb3JcclxuICBAaWYgbm90ICRxdWVyaWVzIHtcclxuICAgIEBlcnJvciBcIk5vIHZhbHVlIGNvdWxkIGJlIHJldHJpZXZlZCBmcm9tIGAjeyRicmVha3BvaW50fWAuIFBsZWFzZSBtYWtlIHN1cmUgaXQgaXMgZGVmaW5lZCBpbiBgJG1zdWlmLWJyZWFrcG9pbnRzYCBtYXAuXCI7XHJcbiAgfVxyXG5cclxuICAvLyBJbmNsdWRlIHRoZSBtZWRpYSBtaXhpbiB3aXRoICRxdWVyaWVzXHJcbiAgQGluY2x1ZGUgbWVkaWEoJHF1ZXJpZXMpIHtcclxuICAgIEBjb250ZW50O1xyXG4gIH1cclxufVxyXG4iLCIvLy8vXHJcbi8vLyBQbGFjZWhvbGRlcnNcclxuLy8vIEBncm91cCBQbGFjZWhvbGRlcnNcclxuLy8vIEBhdXRob3IgRGFtaWFuIE11dGlcclxuLy8vL1xyXG5cclxuLy8vXHJcbkBpbXBvcnQgXCIuLi9jb3JlL3NldHRpbmdzXCI7XHJcblxyXG4vLy9cclxuJXRleHQtLXNtYWxsIHtcclxuICBmb250LXNpemU6IDgwJVxyXG59XHJcbi8vL1xyXG4ldGV4dC0tbGVmdCB7XHJcbiAgdGV4dC1hbGlnbjogbGVmdFxyXG59XHJcbi8vL1xyXG4ldGV4dC0tcmlnaHQge1xyXG4gIHRleHQtYWxpZ246IHJpZ2h0XHJcbn1cclxuLy8vXHJcbiV0ZXh0LS1jZW50ZXIge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlclxyXG59XHJcbi8vL1xyXG4ldGV4dC0tbGlnaHQge1xyXG4gIGZvbnQtd2VpZ2h0OiAkbXN1aWYtZm9udC13ZWlnaHQtbGlnaHRcclxufVxyXG4vLy9cclxuJXRleHQtLXJlZ3VsYXIge1xyXG4gIGZvbnQtd2VpZ2h0OiAkbXN1aWYtZm9udC13ZWlnaHQtcmVndWxhclxyXG59XHJcbi8vL1xyXG4ldGV4dC0tc2VtaWJvbGQge1xyXG4gIGZvbnQtd2VpZ2h0OiAkbXN1aWYtZm9udC13ZWlnaHQtc2VtaWJvbGRcclxufVxyXG4vLy9cclxuJXRleHQtLWJvbGQge1xyXG4gIGZvbnQtd2VpZ2h0OiAkbXN1aWYtZm9udC13ZWlnaHQtYm9sZFxyXG59XHJcbi8vL1xyXG4ldGV4dC0tdXBwZXJjYXNlIHtcclxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlXHJcbn1cclxuIiwiLy8vL1xyXG4vLy8gQ2xhc3Nlc1xyXG4vLy8gLT4gSGVscGVyIGNsYXNzZXMuIENhbiBiZSBjcmVhdGVkIGJ5IGV4dGVuZGluZyBwbGFjZWhvbGRlcnNcclxuLy8vIEBncm91cCBDbGFzc2VzXHJcbi8vLy9cclxuIiwiLy8vL1xyXG4vLy8gQW5pbWF0aW9uc1xyXG4vLy8gLT4gS2V5ZnJhbWVzIGFuZCBldmVyeSBvdGhlciBnZW5lcmFsIGFuaW1hdGlvbiB0byBiZSBhcHBsaWVkXHJcbi8vLyBAZ3JvdXAgQW5pbWF0aW9uc1xyXG4vLy8vXHJcblxyXG4vLy9cclxuQGtleWZyYW1lcyBmYWRlLWluIHtcclxuICBmcm9tIHtcclxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgIG9wYWNpdHk6IDA7XHJcbiAgfVxyXG5cclxuICB0byB7XHJcbiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xyXG4gICAgb3BhY2l0eTogMTtcclxuICB9XHJcbn1cclxuLy8vXHJcbkBrZXlmcmFtZXMgZmFkZS1vdXQge1xyXG4gIGZyb20ge1xyXG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcclxuICAgIG9wYWNpdHk6IDE7XHJcbiAgfVxyXG5cclxuICB0byB7XHJcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XHJcbiAgICBvcGFjaXR5OiAwO1xyXG4gIH1cclxufVxyXG4vLy9cclxuQGtleWZyYW1lcyBzbGlkZS1kb3duIHtcclxuICBmcm9tIHtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTAwJSk7XHJcbiAgfVxyXG5cclxuICB0byB7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XHJcbiAgfVxyXG59XHJcbi8vL1xyXG5Aa2V5ZnJhbWVzIHNsaWRlLXVwIHtcclxuICBmcm9tIHtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcclxuICB9XHJcblxyXG4gIHRvIHtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTAwJSk7XHJcbiAgfVxyXG59XHJcbiIsIi8vLy9cclxuLy8vIFByb2plY3QgQ29yZVxyXG4vLy8gLT4gUHJvamVjdCBTZXR0aW5nc1xyXG4vLy8gLT4gQ1NTIFJlc2V0L05vcm1hbGl6ZXJcclxuLy8vIC0+IEJhc2UgZWxlbWVudHNcclxuLy8vIC0+IFR5cG9ncmFwaHlcclxuLy8vIC0+IEdyaWQgU3lzdGVtXHJcbi8vLyAtPiBMYXlvdXRcclxuLy8vIEBncm91cCBQcm9qZWN0IENvcmVcclxuLy8vIEBhdXRob3IgTVNcclxuLy8vL1xyXG5cclxuQGltcG9ydCBcImNvcmUvc2V0dGluZ3NcIjtcclxuQGltcG9ydCBcImNvcmUvcmVzZXRcIjtcclxuQGltcG9ydCBcImNvcmUvYmFzZVwiO1xyXG5AaW1wb3J0IFwiY29yZS90eXBvZ3JhcGh5XCI7XHJcbkBpbXBvcnQgXCJjb3JlL2dyaWRzXCI7XHJcbkBpbXBvcnQgXCJjb3JlL2xheW91dFwiO1xyXG4iLCIvLy8vXHJcbi8vLyBOT1JNQUxJWkVSXHJcbi8vLyAtPiBUaGFua3MgdG8gTmljb2xhcyBHYWxsYWdoZXIncyBOb3JtYWxpemUuY3NzIC0gaHR0cDovL25lY29sYXMuZ2l0aHViLmlvL25vcm1hbGl6ZS5jc3MvXHJcbi8vLy9cclxuXHJcbkBpbXBvcnQgXCIuLi9saWJzL25vcm1hbGl6ZS9fbm9ybWFsaXplLnNjc3NcIjtcclxuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgTm9ybWFsaXplLnNjc3Mgc2V0dGluZ3NcclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuLyoqXHJcbiAqIEluY2x1ZGVzIGxlZ2FjeSBicm93c2VyIHN1cHBvcnQgSUU2LzdcclxuICpcclxuICogU2V0IHRvIGZhbHNlIGlmIHlvdSB3YW50IHRvIGRyb3Agc3VwcG9ydCBmb3IgSUU2IGFuZCBJRTdcclxuICovXHJcblxyXG4kbGVnYWN5X2Jyb3dzZXJfc3VwcG9ydDogZmFsc2UgIWRlZmF1bHQ7XHJcblxyXG4vKiBCYXNlXHJcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKipcclxuICogMS4gU2V0IGRlZmF1bHQgZm9udCBmYW1pbHkgdG8gc2Fucy1zZXJpZi5cclxuICogMi4gUHJldmVudCBpT1MgYW5kIElFIHRleHQgc2l6ZSBhZGp1c3QgYWZ0ZXIgZGV2aWNlIG9yaWVudGF0aW9uIGNoYW5nZSxcclxuICogICAgd2l0aG91dCBkaXNhYmxpbmcgdXNlciB6b29tLlxyXG4gKiAzLiBDb3JyZWN0cyB0ZXh0IHJlc2l6aW5nIG9kZGx5IGluIElFIDYvNyB3aGVuIGJvZHkgYGZvbnQtc2l6ZWAgaXMgc2V0IHVzaW5nXHJcbiAqICBgZW1gIHVuaXRzLlxyXG4gKi9cclxuXHJcbmh0bWwge1xyXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmOyAvKiAxICovXHJcbiAgLW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cclxuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cclxuICBAaWYgJGxlZ2FjeV9icm93c2VyX3N1cHBvcnQge1xyXG4gICAgKmZvbnQtc2l6ZTogMTAwJTsgLyogMyAqL1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSBkZWZhdWx0IG1hcmdpbi5cclxuICovXHJcblxyXG5ib2R5IHtcclxuICBtYXJnaW46IDA7XHJcbn1cclxuXHJcbi8qIEhUTUw1IGRpc3BsYXkgZGVmaW5pdGlvbnNcclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbi8qKlxyXG4gKiBDb3JyZWN0IGBibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBmb3IgYW55IEhUTUw1IGVsZW1lbnQgaW4gSUUgOC85LlxyXG4gKiBDb3JyZWN0IGBibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBmb3IgYGRldGFpbHNgIG9yIGBzdW1tYXJ5YCBpbiBJRSAxMC8xMVxyXG4gKiBhbmQgRmlyZWZveC5cclxuICogQ29ycmVjdCBgYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgZm9yIGBtYWluYCBpbiBJRSAxMS5cclxuICovXHJcblxyXG5hcnRpY2xlLFxyXG5hc2lkZSxcclxuZGV0YWlscyxcclxuZmlnY2FwdGlvbixcclxuZmlndXJlLFxyXG5mb290ZXIsXHJcbmhlYWRlcixcclxuaGdyb3VwLFxyXG5tYWluLFxyXG5tZW51LFxyXG5uYXYsXHJcbnNlY3Rpb24sXHJcbnN1bW1hcnkge1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcblxyXG4vKipcclxuICogMS4gQ29ycmVjdCBgaW5saW5lLWJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGluIElFIDYvNy84LzkgYW5kIEZpcmVmb3ggMy5cclxuICogMi4gTm9ybWFsaXplIHZlcnRpY2FsIGFsaWdubWVudCBvZiBgcHJvZ3Jlc3NgIGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxyXG4gKi9cclxuXHJcbmF1ZGlvLFxyXG5jYW52YXMsXHJcbnByb2dyZXNzLFxyXG52aWRlbyB7XHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrOyAvKiAxICovXHJcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyAvKiAyICovXHJcbiAgQGlmICRsZWdhY3lfYnJvd3Nlcl9zdXBwb3J0IHtcclxuICAgICpkaXNwbGF5OiBpbmxpbmU7XHJcbiAgICAqem9vbTogMTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQcmV2ZW50cyBtb2Rlcm4gYnJvd3NlcnMgZnJvbSBkaXNwbGF5aW5nIGBhdWRpb2Agd2l0aG91dCBjb250cm9scy5cclxuICogUmVtb3ZlIGV4Y2VzcyBoZWlnaHQgaW4gaU9TIDUgZGV2aWNlcy5cclxuICovXHJcblxyXG5hdWRpbzpub3QoW2NvbnRyb2xzXSkge1xyXG4gIGRpc3BsYXk6IG5vbmU7XHJcbiAgaGVpZ2h0OiAwO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkcmVzcyBgW2hpZGRlbl1gIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgOC85LzEwLlxyXG4gKiBIaWRlIHRoZSBgdGVtcGxhdGVgIGVsZW1lbnQgaW4gSUUgOC85LzEwLzExLCBTYWZhcmksIGFuZCBGaXJlZm94IDwgMjIuXHJcbiAqL1xyXG5cclxuW2hpZGRlbl0sXHJcbnRlbXBsYXRlIHtcclxuICBkaXNwbGF5OiBub25lO1xyXG59XHJcblxyXG4vKiBMaW5rc1xyXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgZ3JheSBiYWNrZ3JvdW5kIGNvbG9yIGZyb20gYWN0aXZlIGxpbmtzIGluIElFIDEwLlxyXG4gKi9cclxuXHJcbmEge1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG59XHJcblxyXG4vKipcclxuICogSW1wcm92ZSByZWFkYWJpbGl0eSBvZiBmb2N1c2VkIGVsZW1lbnRzIHdoZW4gdGhleSBhcmUgYWxzbyBpbiBhblxyXG4gKiBhY3RpdmUvaG92ZXIgc3RhdGUuXHJcbiAqL1xyXG5cclxuYSB7XHJcbiAgJjphY3RpdmUsICY6aG92ZXIge1xyXG4gICAgb3V0bGluZTogMDtcclxuICB9O1xyXG59XHJcblxyXG4vKiBUZXh0LWxldmVsIHNlbWFudGljc1xyXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuLyoqXHJcbiAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkvMTAvMTEsIFNhZmFyaSwgYW5kIENocm9tZS5cclxuICovXHJcblxyXG5hYmJyW3RpdGxlXSB7XHJcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGRvdHRlZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZHJlc3Mgc3R5bGUgc2V0IHRvIGBib2xkZXJgIGluIEZpcmVmb3ggNCssIFNhZmFyaSwgYW5kIENocm9tZS5cclxuICovXHJcblxyXG5iLFxyXG5zdHJvbmcge1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG5AaWYgJGxlZ2FjeV9icm93c2VyX3N1cHBvcnQge1xyXG4gIGJsb2NrcXVvdGUge1xyXG4gICAgbWFyZ2luOiAxZW0gNDBweDtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gU2FmYXJpIGFuZCBDaHJvbWUuXHJcbiAqL1xyXG5cclxuZGZuIHtcclxuICBmb250LXN0eWxlOiBpdGFsaWM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRyZXNzIHZhcmlhYmxlIGBoMWAgZm9udC1zaXplIGFuZCBtYXJnaW4gd2l0aGluIGBzZWN0aW9uYCBhbmQgYGFydGljbGVgXHJcbiAqIGNvbnRleHRzIGluIEZpcmVmb3ggNCssIFNhZmFyaSwgYW5kIENocm9tZS5cclxuICovXHJcblxyXG5oMSB7XHJcbiAgZm9udC1zaXplOiAyZW07XHJcbiAgbWFyZ2luOiAwLjY3ZW0gMDtcclxufVxyXG5cclxuQGlmICRsZWdhY3lfYnJvd3Nlcl9zdXBwb3J0IHtcclxuICBoMiB7XHJcbiAgICBmb250LXNpemU6IDEuNWVtO1xyXG4gICAgbWFyZ2luOiAwLjgzZW0gMDtcclxuICB9XHJcblxyXG4gIGgzIHtcclxuICAgIGZvbnQtc2l6ZTogMS4xN2VtO1xyXG4gICAgbWFyZ2luOiAxZW0gMDtcclxuICB9XHJcblxyXG4gIGg0IHtcclxuICAgIGZvbnQtc2l6ZTogMWVtO1xyXG4gICAgbWFyZ2luOiAxLjMzZW0gMDtcclxuICB9XHJcblxyXG4gIGg1IHtcclxuICAgIGZvbnQtc2l6ZTogMC44M2VtO1xyXG4gICAgbWFyZ2luOiAxLjY3ZW0gMDtcclxuICB9XHJcblxyXG4gIGg2IHtcclxuICAgIGZvbnQtc2l6ZTogMC42N2VtO1xyXG4gICAgbWFyZ2luOiAyLjMzZW0gMDtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRyZXNzZXMgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkuXHJcbiAqL1xyXG5cclxubWFyayB7XHJcbiAgYmFja2dyb3VuZDogI2ZmMDtcclxuICBjb2xvcjogIzAwMDtcclxufVxyXG5cclxuQGlmICRsZWdhY3lfYnJvd3Nlcl9zdXBwb3J0IHtcclxuXHJcbiAgLyoqXHJcbiAgICogQWRkcmVzc2VzIG1hcmdpbnMgc2V0IGRpZmZlcmVudGx5IGluIElFIDYvNy5cclxuICAgKi9cclxuXHJcbiAgcCxcclxuICBwcmUge1xyXG4gICAgKm1hcmdpbjogMWVtIDA7XHJcbiAgfVxyXG5cclxuICAvKlxyXG4gICAqIEFkZHJlc3NlcyBDU1MgcXVvdGVzIG5vdCBzdXBwb3J0ZWQgaW4gSUUgNi83LlxyXG4gICAqL1xyXG5cclxuICBxIHtcclxuICAgICpxdW90ZXM6IG5vbmU7XHJcbiAgfVxyXG5cclxuICAvKlxyXG4gICAqIEFkZHJlc3NlcyBgcXVvdGVzYCBwcm9wZXJ0eSBub3Qgc3VwcG9ydGVkIGluIFNhZmFyaSA0LlxyXG4gICAqL1xyXG5cclxuICBxOmJlZm9yZSxcclxuICBxOmFmdGVyIHtcclxuICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgY29udGVudDogbm9uZTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRyZXNzIGluY29uc2lzdGVudCBhbmQgdmFyaWFibGUgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cclxuICovXHJcblxyXG5zbWFsbCB7XHJcbiAgZm9udC1zaXplOiA4MCU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQcmV2ZW50IGBzdWJgIGFuZCBgc3VwYCBhZmZlY3RpbmcgYGxpbmUtaGVpZ2h0YCBpbiBhbGwgYnJvd3NlcnMuXHJcbiAqL1xyXG5cclxuc3ViLFxyXG5zdXAge1xyXG4gIGZvbnQtc2l6ZTogNzUlO1xyXG4gIGxpbmUtaGVpZ2h0OiAwO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XHJcbn1cclxuXHJcbnN1cCB7XHJcbiAgdG9wOiAtMC41ZW07XHJcbn1cclxuXHJcbnN1YiB7XHJcbiAgYm90dG9tOiAtMC4yNWVtO1xyXG59XHJcblxyXG5AaWYgJGxlZ2FjeV9icm93c2VyX3N1cHBvcnQge1xyXG5cclxuICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgIExpc3RzXHJcbiAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbiAgLypcclxuICAgKiBBZGRyZXNzZXMgbWFyZ2lucyBzZXQgZGlmZmVyZW50bHkgaW4gSUUgNi83LlxyXG4gICAqL1xyXG5cclxuICBkbCxcclxuICBtZW51LFxyXG4gIG9sLFxyXG4gIHVsIHtcclxuICAgICptYXJnaW46IDFlbSAwO1xyXG4gIH1cclxuXHJcbiAgZGQge1xyXG4gICAgKm1hcmdpbjogMCAwIDAgNDBweDtcclxuICB9XHJcblxyXG4gIC8qXHJcbiAgICogQWRkcmVzc2VzIHBhZGRpbmdzIHNldCBkaWZmZXJlbnRseSBpbiBJRSA2LzcuXHJcbiAgICovXHJcblxyXG4gIG1lbnUsXHJcbiAgb2wsXHJcbiAgdWwge1xyXG4gICAgKnBhZGRpbmc6IDAgMCAwIDQwcHg7XHJcbiAgfVxyXG5cclxuICAvKlxyXG4gICAqIENvcnJlY3RzIGxpc3QgaW1hZ2VzIGhhbmRsZWQgaW5jb3JyZWN0bHkgaW4gSUUgNy5cclxuICAgKi9cclxuXHJcbiAgbmF2IHVsLFxyXG4gIG5hdiBvbCB7XHJcbiAgICAqbGlzdC1zdHlsZTogbm9uZTtcclxuICAgICpsaXN0LXN0eWxlLWltYWdlOiBub25lO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbi8qIEVtYmVkZGVkIGNvbnRlbnRcclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbi8qKlxyXG4gKiAxLiBSZW1vdmUgYm9yZGVyIHdoZW4gaW5zaWRlIGBhYCBlbGVtZW50IGluIElFIDgvOS8xMC5cclxuICogMi4gSW1wcm92ZXMgaW1hZ2UgcXVhbGl0eSB3aGVuIHNjYWxlZCBpbiBJRSA3LlxyXG4gKi9cclxuXHJcbmltZyB7XHJcbiAgYm9yZGVyOiAwO1xyXG4gIEBpZiAkbGVnYWN5X2Jyb3dzZXJfc3VwcG9ydCB7XHJcbiAgICAqLW1zLWludGVycG9sYXRpb24tbW9kZTogYmljdWJpYzsgLyogMiAqL1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENvcnJlY3Qgb3ZlcmZsb3cgbm90IGhpZGRlbiBpbiBJRSA5LzEwLzExLlxyXG4gKi9cclxuXHJcbnN2Zzpub3QoOnJvb3QpIHtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG59XHJcblxyXG4vKiBHcm91cGluZyBjb250ZW50XHJcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKipcclxuICogQWRkcmVzcyBtYXJnaW4gbm90IHByZXNlbnQgaW4gSUUgOC85IGFuZCBTYWZhcmkuXHJcbiAqL1xyXG5cclxuZmlndXJlIHtcclxuICBtYXJnaW46IDFlbSA0MHB4O1xyXG59XHJcblxyXG4vKipcclxuICogQWRkcmVzcyBkaWZmZXJlbmNlcyBiZXR3ZWVuIEZpcmVmb3ggYW5kIG90aGVyIGJyb3dzZXJzLlxyXG4gKi9cclxuXHJcbmhyIHtcclxuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcclxuICBoZWlnaHQ6IDA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb250YWluIG92ZXJmbG93IGluIGFsbCBicm93c2Vycy5cclxuICovXHJcblxyXG5wcmUge1xyXG4gIG92ZXJmbG93OiBhdXRvO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkcmVzcyBvZGQgYGVtYC11bml0IGZvbnQgc2l6ZSByZW5kZXJpbmcgaW4gYWxsIGJyb3dzZXJzLlxyXG4gKiBDb3JyZWN0IGZvbnQgZmFtaWx5IHNldCBvZGRseSBpbiBJRSA2LCBTYWZhcmkgNC81LCBhbmQgQ2hyb21lLlxyXG4gKi9cclxuXHJcbmNvZGUsXHJcbmtiZCxcclxucHJlLFxyXG5zYW1wIHtcclxuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XHJcbiAgQGlmICRsZWdhY3lfYnJvd3Nlcl9zdXBwb3J0IHtcclxuICAgIF9mb250LWZhbWlseTogJ2NvdXJpZXIgbmV3JywgbW9ub3NwYWNlO1xyXG4gIH1cclxuICBmb250LXNpemU6IDFlbTtcclxufVxyXG5cclxuLyogRm9ybXNcclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbi8qKlxyXG4gKiBLbm93biBsaW1pdGF0aW9uOiBieSBkZWZhdWx0LCBDaHJvbWUgYW5kIFNhZmFyaSBvbiBPUyBYIGFsbG93IHZlcnkgbGltaXRlZFxyXG4gKiBzdHlsaW5nIG9mIGBzZWxlY3RgLCB1bmxlc3MgYSBgYm9yZGVyYCBwcm9wZXJ0eSBpcyBzZXQuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIDEuIENvcnJlY3QgY29sb3Igbm90IGJlaW5nIGluaGVyaXRlZC5cclxuICogIEtub3duIGlzc3VlOiBhZmZlY3RzIGNvbG9yIG9mIGRpc2FibGVkIGVsZW1lbnRzLlxyXG4gKiAyLiBDb3JyZWN0IGZvbnQgcHJvcGVydGllcyBub3QgYmVpbmcgaW5oZXJpdGVkLlxyXG4gKiAzLiBBZGRyZXNzIG1hcmdpbnMgc2V0IGRpZmZlcmVudGx5IGluIEZpcmVmb3ggNCssIFNhZmFyaSwgYW5kIENocm9tZS5cclxuICogNC4gSW1wcm92ZXMgYXBwZWFyYW5jZSBhbmQgY29uc2lzdGVuY3kgaW4gYWxsIGJyb3dzZXJzLlxyXG4gKi9cclxuXHJcbmJ1dHRvbixcclxuaW5wdXQsXHJcbm9wdGdyb3VwLFxyXG5zZWxlY3QsXHJcbnRleHRhcmVhIHtcclxuICBjb2xvcjogaW5oZXJpdDsgLyogMSAqL1xyXG4gIGZvbnQ6IGluaGVyaXQ7IC8qIDIgKi9cclxuICBtYXJnaW46IDA7IC8qIDMgKi9cclxuICBAaWYgJGxlZ2FjeV9icm93c2VyX3N1cHBvcnQge1xyXG4gICAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyAvKiAzICovXHJcbiAgICAqdmVydGljYWwtYWxpZ246IG1pZGRsZTsgLyogMyAqL1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZHJlc3MgYG92ZXJmbG93YCBzZXQgdG8gYGhpZGRlbmAgaW4gSUUgOC85LzEwLzExLlxyXG4gKi9cclxuXHJcbmJ1dHRvbiB7XHJcbiAgb3ZlcmZsb3c6IHZpc2libGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRyZXNzIGluY29uc2lzdGVudCBgdGV4dC10cmFuc2Zvcm1gIGluaGVyaXRhbmNlIGZvciBgYnV0dG9uYCBhbmQgYHNlbGVjdGAuXHJcbiAqIEFsbCBvdGhlciBmb3JtIGNvbnRyb2wgZWxlbWVudHMgZG8gbm90IGluaGVyaXQgYHRleHQtdHJhbnNmb3JtYCB2YWx1ZXMuXHJcbiAqIENvcnJlY3QgYGJ1dHRvbmAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gRmlyZWZveCwgSUUgOC85LzEwLzExLCBhbmQgT3BlcmEuXHJcbiAqIENvcnJlY3QgYHNlbGVjdGAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gRmlyZWZveC5cclxuICovXHJcblxyXG5idXR0b24sXHJcbnNlbGVjdCB7XHJcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiAxLiBBdm9pZCB0aGUgV2ViS2l0IGJ1ZyBpbiBBbmRyb2lkIDQuMC4qIHdoZXJlICgyKSBkZXN0cm95cyBuYXRpdmUgYGF1ZGlvYFxyXG4gKiAgYW5kIGB2aWRlb2AgY29udHJvbHMuXHJcbiAqIDIuIENvcnJlY3QgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSBgaW5wdXRgIHR5cGVzIGluIGlPUy5cclxuICogMy4gSW1wcm92ZSB1c2FiaWxpdHkgYW5kIGNvbnNpc3RlbmN5IG9mIGN1cnNvciBzdHlsZSBiZXR3ZWVuIGltYWdlLXR5cGVcclxuICogIGBpbnB1dGAgYW5kIG90aGVycy5cclxuICogNC4gUmVtb3ZlcyBpbm5lciBzcGFjaW5nIGluIElFIDcgd2l0aG91dCBhZmZlY3Rpbmcgbm9ybWFsIHRleHQgaW5wdXRzLlxyXG4gKiAgS25vd24gaXNzdWU6IGlubmVyIHNwYWNpbmcgcmVtYWlucyBpbiBJRSA2LlxyXG4gKi9cclxuXHJcbmJ1dHRvbixcclxuaHRtbCBpbnB1dFt0eXBlPVwiYnV0dG9uXCJdLCAvKiAxICovXHJcbmlucHV0W3R5cGU9XCJyZXNldFwiXSxcclxuaW5wdXRbdHlwZT1cInN1Ym1pdFwiXSB7XHJcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247IC8qIDIgKi9cclxuICBjdXJzb3I6IHBvaW50ZXI7IC8qIDMgKi9cclxuICBAaWYgJGxlZ2FjeV9icm93c2VyX3N1cHBvcnQge1xyXG4gICAgKm92ZXJmbG93OiB2aXNpYmxlOyAgLyogNCAqL1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlLXNldCBkZWZhdWx0IGN1cnNvciBmb3IgZGlzYWJsZWQgZWxlbWVudHMuXHJcbiAqL1xyXG5cclxuYnV0dG9uW2Rpc2FibGVkXSxcclxuaHRtbCBpbnB1dFtkaXNhYmxlZF0ge1xyXG4gIGN1cnNvcjogZGVmYXVsdDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSBpbm5lciBwYWRkaW5nIGFuZCBib3JkZXIgaW4gRmlyZWZveCA0Ky5cclxuICovXHJcblxyXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXHJcbmlucHV0OjotbW96LWZvY3VzLWlubmVyIHtcclxuICBib3JkZXI6IDA7XHJcbiAgcGFkZGluZzogMDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZHJlc3MgRmlyZWZveCA0KyBzZXR0aW5nIGBsaW5lLWhlaWdodGAgb24gYGlucHV0YCB1c2luZyBgIWltcG9ydGFudGAgaW5cclxuICogdGhlIFVBIHN0eWxlc2hlZXQuXHJcbiAqL1xyXG5cclxuaW5wdXQge1xyXG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiAxLiBBZGRyZXNzIGJveCBzaXppbmcgc2V0IHRvIGBjb250ZW50LWJveGAgaW4gSUUgOC85LzEwLlxyXG4gKiAyLiBSZW1vdmUgZXhjZXNzIHBhZGRpbmcgaW4gSUUgOC85LzEwLlxyXG4gKiAgS25vd24gaXNzdWU6IGV4Y2VzcyBwYWRkaW5nIHJlbWFpbnMgaW4gSUUgNi5cclxuICovXHJcblxyXG5pbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0sXHJcbmlucHV0W3R5cGU9XCJyYWRpb1wiXSB7XHJcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xyXG4gIHBhZGRpbmc6IDA7IC8qIDIgKi9cclxuICBAaWYgJGxlZ2FjeV9icm93c2VyX3N1cHBvcnQge1xyXG4gICAgKmhlaWdodDogMTNweDsgLyogMyAqL1xyXG4gICAgKndpZHRoOiAxM3B4OyAvKiAzICovXHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogRml4IHRoZSBjdXJzb3Igc3R5bGUgZm9yIENocm9tZSdzIGluY3JlbWVudC9kZWNyZW1lbnQgYnV0dG9ucy4gRm9yIGNlcnRhaW5cclxuICogYGZvbnQtc2l6ZWAgdmFsdWVzIG9mIHRoZSBgaW5wdXRgLCBpdCBjYXVzZXMgdGhlIGN1cnNvciBzdHlsZSBvZiB0aGVcclxuICogZGVjcmVtZW50IGJ1dHRvbiB0byBjaGFuZ2UgZnJvbSBgZGVmYXVsdGAgdG8gYHRleHRgLlxyXG4gKi9cclxuXHJcbmlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXHJcbmlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xyXG4gIGhlaWdodDogYXV0bztcclxufVxyXG5cclxuLyoqXHJcbiAqIDEuIEFkZHJlc3MgYGFwcGVhcmFuY2VgIHNldCB0byBgc2VhcmNoZmllbGRgIGluIFNhZmFyaSBhbmQgQ2hyb21lLlxyXG4gKiAyLiBBZGRyZXNzIGBib3gtc2l6aW5nYCBzZXQgdG8gYGJvcmRlci1ib3hgIGluIFNhZmFyaSBhbmQgQ2hyb21lLlxyXG4gKi9cclxuXHJcbmlucHV0W3R5cGU9XCJzZWFyY2hcIl0ge1xyXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkOyAvKiAxICovXHJcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7IC8qIDIgKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSBpbm5lciBwYWRkaW5nIGFuZCBzZWFyY2ggY2FuY2VsIGJ1dHRvbiBpbiBTYWZhcmkgYW5kIENocm9tZSBvbiBPUyBYLlxyXG4gKiBTYWZhcmkgKGJ1dCBub3QgQ2hyb21lKSBjbGlwcyB0aGUgY2FuY2VsIGJ1dHRvbiB3aGVuIHRoZSBzZWFyY2ggaW5wdXQgaGFzXHJcbiAqIHBhZGRpbmcgKGFuZCBgdGV4dGZpZWxkYCBhcHBlYXJhbmNlKS5cclxuICovXHJcblxyXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxyXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcclxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWZpbmUgY29uc2lzdGVudCBib3JkZXIsIG1hcmdpbiwgYW5kIHBhZGRpbmcuXHJcbiAqL1xyXG5cclxuZmllbGRzZXQge1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjMGMwYzA7XHJcbiAgbWFyZ2luOiAwIDJweDtcclxuICBwYWRkaW5nOiAwLjM1ZW0gMC42MjVlbSAwLjc1ZW07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiAxLiBDb3JyZWN0IGBjb2xvcmAgbm90IGJlaW5nIGluaGVyaXRlZCBpbiBJRSA4LzkvMTAvMTEuXHJcbiAqIDIuIFJlbW92ZSBwYWRkaW5nIHNvIHBlb3BsZSBhcmVuJ3QgY2F1Z2h0IG91dCBpZiB0aGV5IHplcm8gb3V0IGZpZWxkc2V0cy5cclxuICogMy4gQ29ycmVjdHMgdGV4dCBub3Qgd3JhcHBpbmcgaW4gRmlyZWZveCAzLlxyXG4gKiA0LiBDb3JyZWN0cyBhbGlnbm1lbnQgZGlzcGxheWVkIG9kZGx5IGluIElFIDYvNy5cclxuICovXHJcblxyXG5sZWdlbmQge1xyXG4gIGJvcmRlcjogMDsgLyogMSAqL1xyXG4gIHBhZGRpbmc6IDA7IC8qIDIgKi9cclxuICBAaWYgJGxlZ2FjeV9icm93c2VyX3N1cHBvcnQge1xyXG4gICAgd2hpdGUtc3BhY2U6IG5vcm1hbDsgLyogMyAqL1xyXG4gICAgKm1hcmdpbi1sZWZ0OiAtN3B4OyAvKiA0ICovXHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUmVtb3ZlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFIDgvOS8xMC8xMS5cclxuICovXHJcblxyXG50ZXh0YXJlYSB7XHJcbiAgb3ZlcmZsb3c6IGF1dG87XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEb24ndCBpbmhlcml0IHRoZSBgZm9udC13ZWlnaHRgIChhcHBsaWVkIGJ5IGEgcnVsZSBhYm92ZSkuXHJcbiAqIE5PVEU6IHRoZSBkZWZhdWx0IGNhbm5vdCBzYWZlbHkgYmUgY2hhbmdlZCBpbiBDaHJvbWUgYW5kIFNhZmFyaSBvbiBPUyBYLlxyXG4gKi9cclxuXHJcbm9wdGdyb3VwIHtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxuLyogVGFibGVzXHJcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKipcclxuICogUmVtb3ZlIG1vc3Qgc3BhY2luZyBiZXR3ZWVuIHRhYmxlIGNlbGxzLlxyXG4gKi9cclxuXHJcbnRhYmxlIHtcclxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xyXG4gIGJvcmRlci1zcGFjaW5nOiAwO1xyXG59XHJcblxyXG50ZCxcclxudGgge1xyXG4gIHBhZGRpbmc6IDA7XHJcbn0iLCIvLy8vXHJcbi8vLyBCYXNlIEZpbGVcclxuLy8vIEluaXQgY3NzIGJhc2ljIHNldHRpbmdzXHJcbi8vLyBAZ3JvdXAgQmFzZVxyXG4vLy8vXHJcblxyXG5cclxuQGltcG9ydCBcIi4vdHlwb2dyYXBoeVwiO1xyXG5cclxuXHJcbiosXHJcbio6YmVmb3JlLFxyXG4qOmFmdGVyIHtcclxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG59XHJcblxyXG5ib2R5LFxyXG5odG1sIHtcclxuICBvdmVyZmxvdy14OiBoaWRkZW47XHJcbiAgZm9udDogJG1zdWlmLWZvbnQ7XHJcbiAgY29sb3I6ICRtc3VpZi1mb250LWNvbG9yO1xyXG59XHJcblxyXG5ib2R5IHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkbXN1aWYtYmFja2dyb3VuZDtcclxufVxyXG5cclxuaW1nIHtcclxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgaGVpZ2h0OiBhdXRvO1xyXG4gIG1heC13aWR0aDogMTAwJTtcclxuICBvdXRsaW5lOiAwO1xyXG59XHJcblxyXG5maWVsZHNldCB7XHJcbiAgYm9yZGVyOiBub25lO1xyXG4gIHBhZGRpbmc6IDA7XHJcbiAgbWFyZ2luOiAwO1xyXG59XHJcblxyXG5ibG9ja3F1b3RlIHtcclxuICBtYXJnaW46IDA7XHJcbn1cclxuXHJcbm1lbnUsXHJcbm5hdiB7XHJcblx0dWwsXHJcblx0bGkge1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgcGFkZGluZzogMDtcclxuICB9XHJcbn1cclxuXHJcbmhyIHtcclxuICB3aWR0aDogMTAwJTtcclxuICBoZWlnaHQ6IDIwcHg7XHJcbiAgbWFyZ2luOiAwIDAgMjBweDtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGRhc2hlZDtcclxufVxyXG5cclxuYnV0dG9uIHtcclxuICAmOmZvY3VzIHtcclxuICAgIG91dGxpbmU6IG5vbmU7XHJcbiAgfVxyXG59XHJcblxyXG5hIHtcclxuXHR0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgdHJhbnNpdGlvbjogYWxsICRtc3VpZi10cmFuc2l0aW9uLWR1cmF0aW9uICRtc3VpZi10cmFuc2l0aW9uLXRpbWluZztcclxufVxyXG4iLCIvLy8vXHJcbi8vLyBUeXBvZ3JhcGh5XHJcbi8vLyBJbml0IHR5cG9ncmFwaHkgYmFzaWMgc2V0dGluZ3NcclxuLy8vIEBncm91cCBUeXBvZ3JhcGh5XHJcbi8vLy9cclxuXHJcbi8vL1xyXG5AaW1wb3J0IFwiLi9zZXR0aW5nc1wiO1xyXG4vLy9cclxuQGltcG9ydCBcIi4uL21vZHVsZXMvaWNvbnNcIjtcclxuXHJcblxyXG4vLy9cclxuJG1zdWlmLWhlYWRlcnMtaDEtZm9udC1zaXplOiBcdFx0XHRcdHRvZW0oNDZweCk7XHJcbi8vL1xyXG4kbXN1aWYtaGVhZGVycy1oMi1mb250LXNpemU6IFx0XHRcdFx0dG9lbSgzMnB4KTtcclxuLy8vXHJcbiRtc3VpZi1oZWFkZXJzLWgzLWZvbnQtc2l6ZTogXHRcdFx0XHR0b2VtKDI0cHgpO1xyXG4vLy9cclxuJG1zdWlmLWhlYWRlcnMtaDQtZm9udC1zaXplOiBcdFx0XHRcdHRvZW0oMjJweCk7XHJcbi8vL1xyXG4kbXN1aWYtaGVhZGVycy1oNS1mb250LXNpemU6IFx0XHRcdFx0dG9lbSgxOHB4KTtcclxuLy8vXHJcbiRtc3VpZi1oZWFkZXJzLWg2LWZvbnQtc2l6ZTogXHRcdFx0XHR0b2VtKDE2cHgpO1xyXG5cclxuXHJcbmh0bWwsXHJcbmJ1dHRvbiB7XHJcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XHJcbn1cclxuXHJcbmgxLFxyXG5oMixcclxuaDMsXHJcbmg0LFxyXG5oNSxcclxuaDYge1xyXG4gIGZvbnQ6ICRtc3VpZi1mb250O1xyXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgY29sb3I6ICRtc3VpZi1mb250LWNvbG9yO1xyXG59XHJcblxyXG5oMSB7XHJcbiAgbWFyZ2luOiAwO1xyXG4gIGZvbnQtc2l6ZTogJG1zdWlmLWhlYWRlcnMtaDEtZm9udC1zaXplO1xyXG4gIGZvbnQtd2VpZ2h0OiAkbXN1aWYtZm9udC13ZWlnaHQtYm9sZDtcclxuICBsaW5lLWhlaWdodDogMS4yO1xyXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbn1cclxuXHJcbmgyIHtcclxuICBtYXJnaW46IDA7XHJcbiAgZm9udC1zaXplOiAkbXN1aWYtaGVhZGVycy1oMi1mb250LXNpemU7XHJcbiAgbGluZS1oZWlnaHQ6IDEuNDtcclxufVxyXG5cclxuaDMge1xyXG4gIGZvbnQtc2l6ZTogJG1zdWlmLWhlYWRlcnMtaDMtZm9udC1zaXplO1xyXG59XHJcblxyXG5oNCB7XHJcbiAgZm9udC1zaXplOiAkbXN1aWYtaGVhZGVycy1oNC1mb250LXNpemU7XHJcbn1cclxuXHJcbmg1IHtcclxuICBmb250LXNpemU6ICRtc3VpZi1oZWFkZXJzLWg1LWZvbnQtc2l6ZTtcclxufVxyXG5cclxuaDYge1xyXG4gIGZvbnQtc2l6ZTogJG1zdWlmLWhlYWRlcnMtaDYtZm9udC1zaXplO1xyXG59XHJcblxyXG5zdHJvbmcge1xyXG4gIGZvbnQtd2VpZ2h0OiAkbXN1aWYtZm9udC13ZWlnaHQtYm9sZDtcclxufVxyXG4iLCIvLy8vXHJcbi8vLyBJY29uIEZvbnRcclxuLy8vIC0+IFRoYW5rcyB0byBncnVudC13ZWJmb250IC0gaHR0cHM6Ly9naXRodWIuY29tL3NhcGVnaW4vZ3J1bnQtd2ViZm9udFxyXG4vLy8vXHJcblxyXG5AaW1wb3J0IFwiLi4vbGlicy9pY29uZm9udC9pY29uLWZvbnRcIjtcclxuIiwiQGZvbnQtZmFjZSB7XHJcbiAgZm9udC1mYW1pbHk6IFwiaWNvbi1mb250XCI7XHJcbiAgc3JjOiB1cmwoJy4uL2ZvbnRzL2ljb24tZm9udC5lb3QnKTtcclxuICBzcmM6IHVybCgnLi4vZm9udHMvaWNvbi1mb250LmVvdD8jaWVmaXgnKSBmb3JtYXQoJ2VvdCcpLFxyXG4gICAgdXJsKCcuLi9mb250cy9pY29uLWZvbnQud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksXHJcbiAgICB1cmwoJy4uL2ZvbnRzL2ljb24tZm9udC53b2ZmJykgZm9ybWF0KCd3b2ZmJyksXHJcbiAgICB1cmwoJy4uL2ZvbnRzL2ljb24tZm9udC50dGYnKSBmb3JtYXQoJ3RydWV0eXBlJyksXHJcbiAgICB1cmwoJy4uL2ZvbnRzL2ljb24tZm9udC5zdmcjaWNvbi1mb250JykgZm9ybWF0KCdzdmcnKTtcclxufVxyXG5cclxuLm1zLWljb24ge1xyXG4gIGZvbnQtZmFtaWx5OlwiaWNvbi1mb250XCI7XHJcbiAgZGlzcGxheTppbmxpbmUtYmxvY2s7XHJcbiAgdmVydGljYWwtYWxpZ246bWlkZGxlO1xyXG4gIGxpbmUtaGVpZ2h0OjE7XHJcbiAgZm9udC13ZWlnaHQ6bm9ybWFsO1xyXG4gIGZvbnQtc3R5bGU6bm9ybWFsO1xyXG4gIHNwZWFrOm5vbmU7XHJcbiAgdGV4dC1kZWNvcmF0aW9uOmluaGVyaXQ7XHJcbiAgdGV4dC10cmFuc2Zvcm06bm9uZTtcclxuICB0ZXh0LXJlbmRlcmluZzpvcHRpbWl6ZUxlZ2liaWxpdHk7XHJcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzphbnRpYWxpYXNlZDtcclxuICAtbW96LW9zeC1mb250LXNtb290aGluZzpncmF5c2NhbGU7XHJcbn1cclxuXHJcblxyXG4gIC5pY29uLXN0YXItZnVsbDpiZWZvcmUge1xyXG4gICAgY29udGVudDogXCJcXEUwMDFcIjtcclxuICB9XHJcblxyXG4gIC5pY29uLXN0YXItaGFsZjpiZWZvcmUge1xyXG4gICAgY29udGVudDogXCJcXEUwMDJcIjtcclxuICB9XHJcblxyXG4gIC5pY29uLXN0YXItcXVhcnRlcjpiZWZvcmUge1xyXG4gICAgY29udGVudDogXCJcXEUwMDNcIjtcclxuICB9XHJcblxyXG4gIC5pY29uLXN0YXItdGhyZWUtcXVhcnRlcnM6YmVmb3JlIHtcclxuICAgIGNvbnRlbnQ6IFwiXFxFMDA0XCI7XHJcbiAgfVxyXG5cciIsIi8vLy9cclxuLy8vIEdyaWQgU3lzdGVtXHJcbi8vLyAtPiBUaGFua3MgdG8gSmVldCBGcmFtZXdvcmsgLSBodHRwOi8vamVldC5ncy9cclxuLy8vL1xyXG5cclxuQGltcG9ydCBcIi4uL2xpYnMvamVldC9qZWV0XCI7XHJcbiIsIkBpbXBvcnQgJ19zZXR0aW5ncyc7XHJcbkBpbXBvcnQgJ19mdW5jdGlvbnMnO1xyXG5AaW1wb3J0ICdfZ3JpZCc7XHJcbkBpbXBvcnQgJ19hbGlhc2VzJztcclxuIiwiLy8vIEFsbCB2YWx1ZXMgYXJlIGRlZmF1bHRzIGFuZCBjYW4gdGhlcmVmb3JlIGJlIGVhc2lseSBvdmVyaWRkZW4uXHJcblxyXG4vLy8gSmVldCdzIGRlZmF1bHQgZ3V0dGVyIHZhbHVlIGFzIGEgcGVyY2VudGFnZS5cclxuLy8vIEB0eXBlIE51bWJlclxyXG4kamVldC1ndXR0ZXI6IDMgIWRlZmF1bHQ7XHJcblxyXG4vLy8gSmVldCdzIHZhcmlhYmxlIGZvciBzZXR0aW5nIHRoZSBjYWxsaW5nIG9yZGVyIHdoZW4gdXNpbmcgbmVzdGVkIGNvbHVtbnNcclxuLy8vIHNpemVzLCBwcmlvcml0aXppbmcgdGhlIHBhcmVudCBpbnN0ZWFkIG9mIHRoZSBjaGlsZC5cclxuLy8vIEB0eXBlIEJvb2xcclxuJGplZXQtcGFyZW50LWZpcnN0OiBmYWxzZSAhZGVmYXVsdDtcclxuXHJcbi8vLyBKZWV0J3MgZGVmYXVsdCBsYXlvdXQgZGlyZWN0aW9uLlxyXG4vLy8gQHR5cGUgU3RyaW5nXHJcbiRqZWV0LWxheW91dC1kaXJlY3Rpb246IFwiTFRSXCIgIWRlZmF1bHQ7XHJcblxyXG4vLy8gSmVldCdzIGRlZmF1bHQgbWF4LXdpZHRoIHZhbHVlLlxyXG4vLy8gQHR5cGUgTnVtYmVyfFVuaXRcclxuJGplZXQtbWF4LXdpZHRoOiAxNDEwcHggIWRlZmF1bHQ7XHJcbiIsIi8vLyBHZXQgIHBlcmNlbnRhZ2UgZnJvbSBhIGdpdmVuIHJhdGlvLlxyXG4vLy8gQGFjY2VzcyBwcml2YXRlXHJcbi8vLyBAcGFyYW0ge051bWJlcn0gJHJhdGlvIFsxXSAtIFRoZSBjb2x1bW4gcmF0aW8gb2YgdGhlIGVsZW1lbnQuXHJcbi8vLyBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSBwZXJjZW50YWdlIHZhbHVlLlxyXG5AZnVuY3Rpb24gamVldC1nZXQtc3BhbigkcmF0aW86IDEpIHtcclxuICBAcmV0dXJuICRyYXRpbyAqIDEwMDtcclxufVxyXG5cclxuLy8vIFdvcmsgb3V0IHRoZSBjb2x1bW4gd2lkdGhzIGJhc2VkIG9uIHRoZSByYXRpbyBhbmQgZ3V0dGVyIHNpemVzLlxyXG4vLy8gQGFjY2VzcyBwcml2YXRlXHJcbi8vLyBAcGFyYW0ge051bWJlcn0gJHJhdGlvcyBbMV0gLSBUaGUgY29sdW1uIHJhdGlvIG9mIHRoZSBlbGVtZW50LlxyXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRndXR0ZXIgWyRqZWV0LWd1dHRlcl0gLSBUaGUgZ3V0dGVyIGZvciB0aGUgY29sdW1uLlxyXG4vLy8gQHJldHVybnMge0xpc3R9ICR3aWR0aCAkZ3V0dGVyIC0gQSBsaXN0IGNvbnRhaW5pbmcgdGhlIHdpdGggYW5kIGd1dHRlciBmb3IgdGhlIGVsZW1lbnQuXHJcbkBmdW5jdGlvbiBqZWV0LWdldC1jb2x1bW4oJHJhdGlvczogMSwgJGd1dHRlcjogJGplZXQtZ3V0dGVyKSB7XHJcbiAgJHJhdGlvczogaWYobm90ICRqZWV0LXBhcmVudC1maXJzdCwgamVldC1yZXZlcnNlKCRyYXRpb3MpLCAkcmF0aW9zKTtcclxuICAkd2lkdGg6IDEwMDtcclxuXHJcbiAgQGVhY2ggJHJhdGlvIGluICRyYXRpb3Mge1xyXG4gICAgJGd1dHRlcjogJGd1dHRlciAvICR3aWR0aCAqIDEwMDtcclxuICAgICR3aWR0aDogMTAwICogJHJhdGlvIC0gJGd1dHRlciArICRyYXRpbyAqICRndXR0ZXI7XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICR3aWR0aCAkZ3V0dGVyO1xyXG59XHJcblxyXG4vLy8gR2V0IHRoZSBzZXQgbGF5b3V0IGRpcmVjdGlvbiBmb3IgdGhlIHByb2plY3QuXHJcbi8vLyBAYWNjZXNzIHByaXZhdGVcclxuLy8vIEByZXR1cm5zIHtTdHJpbmd9ICRkaXJlY3Rpb24gLSBUaGUgbGF5b3V0IGRpcmVjdGlvbi5cclxuQGZ1bmN0aW9uIGplZXQtZ2V0LWxheW91dC1kaXJlY3Rpb24oKSB7XHJcbiAgJGRpcmVjdGlvbjogaWYoJGplZXQtbGF5b3V0LWRpcmVjdGlvbiA9PSBcIlJUTFwiLCByaWdodCwgbGVmdCk7XHJcblxyXG4gIEByZXR1cm4gJGRpcmVjdGlvbjtcclxufVxyXG5cclxuLy8vIFJlcGxhY2UgYSBzcGVjaWZpZWQgbGlzdCB2YWx1ZSB3aXRoIGEgbmV3IHZhbHVlICh1c2VzIGJ1aWx0IGluIHNldC1udGgoKSBpZiBhdmFpbGFibGUpLlxyXG4vLy8gQGFjY2VzcyBwcml2YXRlXHJcbi8vLyBAcGFyYW0ge0xpc3R9ICRsaXN0IC0gVGhlIGxpc3Qgb2YgdmFsdWVzIHlvdSB3YW50IHRvIGFsdGVyLlxyXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRpbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgbGlzdCBpdGVtIHlvdSB3YW50IHRvIHJlcGxhY2UuXHJcbi8vLyBAcGFyYW0geyp9ICR2YWx1ZSAtIFRoZSB2YWx1ZSB5b3Ugd2FudCB0byByZXBsYWNlICRpbmRleCB3aXRoLlxyXG4vLy8gQHJldHVybnMge0xpc3R9ICRsaXN0IC0gVGhlIGxpc3Qgd2l0aCB0aGUgdmFsdWUgcmVwbGFjZWQgb3IgcmVtb3ZlZC5cclxuLy8vIEB0aHJvdyBFcnJvciBpZiBhbiBpbnZhbGlkIGluZGV4IGlzIHN1cHBsaWVkLlxyXG5AZnVuY3Rpb24gamVldC1yZXBsYWNlLW50aCgkbGlzdCwgJGluZGV4LCAkdmFsdWUpIHtcclxuICAvLyBGYWxsYmFjayBmb3IgU2FzcyAzLjJcclxuICBAaWYgZnVuY3Rpb24tZXhpc3RzKFwic2V0LW50aFwiKSAhPSB0cnVlIHtcclxuICAgICRyZXN1bHQ6ICgpO1xyXG4gICAgJGluZGV4OiBpZigkaW5kZXggPCAwLCBsZW5ndGgoJGxpc3QpICsgJGluZGV4ICsgMSwgJGluZGV4KTtcclxuXHJcbiAgICBAZm9yICRpIGZyb20gMSB0aHJvdWdoIGxlbmd0aCgkbGlzdCkge1xyXG4gICAgICAkcmVzdWx0OiBhcHBlbmQoJHJlc3VsdCwgaWYoJGkgPT0gJGluZGV4LCAkdmFsdWUsIG50aCgkbGlzdCwgJGkpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgQHJldHVybiAkcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgLy8gU2FzcyAzLjNcclxuICAkcmVzdWx0OiBzZXQtbnRoKCRsaXN0LCAkaW5kZXgsICR2YWx1ZSk7XHJcblxyXG4gIEByZXR1cm4gJHJlc3VsdDtcclxufVxyXG5cclxuLy8vIFJldmVyc2UgYSBsaXN0IChwcm9ncmVzc2l2ZWx5IGVuaGFuY2VkIGZvciBTYXNzIDMuMykuXHJcbi8vLyBAYWNjZXNzIHByaXZhdGVcclxuLy8vIEBwYXJhbSB7TGlzdH0gJGxpc3QgLSBUaGUgbGlzdCBvZiB2YWx1ZXMgeW91IHdhbnQgdG8gcmV2ZXJzZS5cclxuLy8vIEByZXR1cm5zIHtMaXN0fSAkcmVzdWx0IC0gVGhlIHJldmVyc2VkIGxpc3QuXHJcbkBmdW5jdGlvbiBqZWV0LXJldmVyc2UoJGxpc3QpIHtcclxuICAvLyBTYXNzIDMuMlxyXG4gIEBpZiBmdW5jdGlvbi1leGlzdHMoXCJzZXQtbnRoXCIpICE9IHRydWUge1xyXG4gICAgJHJlc3VsdDogKCk7XHJcblxyXG4gICAgQGZvciAkaSBmcm9tIGxlbmd0aCgkbGlzdCkgKiAtMSB0aHJvdWdoIC0xIHtcclxuICAgICAgJGl0ZW06IG50aCgkbGlzdCwgYWJzKCRpKSk7XHJcblxyXG4gICAgICBAaWYgbGVuZ3RoKCRpdGVtKSA+IDEgYW5kICRyZWN1cnNpdmUge1xyXG4gICAgICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCBqZWV0LXJldmVyc2UoJGl0ZW0sICRyZWN1cnNpdmUpKTtcclxuICAgICAgfVxyXG4gICAgICBAZWxzZSB7XHJcbiAgICAgICAgJHJlc3VsdDogYXBwZW5kKCRyZXN1bHQsICRpdGVtKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEByZXR1cm4gJHJlc3VsdDtcclxuICB9XHJcblxyXG4gIC8vIFNhc3MgMy4zK1xyXG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggY2VpbChsZW5ndGgoJGxpc3QpLzIpIHtcclxuICAgICR0bXA6IG50aCgkbGlzdCwgJGkpO1xyXG4gICAgJHRtcDogaWYobGVuZ3RoKCR0bXApID4gMSBhbmQgJHJlY3Vyc2l2ZSwgcmV2ZXJzZSgkdG1wLCAkcmVjdXJzaXZlKSwgJHRtcCk7XHJcblxyXG4gICAgJGxpc3Q6IHNldC1udGgoJGxpc3QsICRpLCBudGgoJGxpc3QsIC0kaSkpO1xyXG4gICAgJGxpc3Q6IHNldC1udGgoJGxpc3QsIC0kaSwgJHRtcCk7XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRsaXN0O1xyXG59XHJcblxyXG4vLy8gR2V0IHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24gdG8gYSBnaXZlbiB2YWx1ZS5cclxuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxyXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRkaXIgLSBUaGUgZGlyZWN0aW9uIHlvdSB3YW50IHRoZSBvcHBvc2l0ZSBvZi5cclxuLy8vIEByZXR1cm5zIHtTdHJpbmd9IC0gVGhlIG9wcG9zaXRlIGRpcmVjdGlvbiB0byAkZGlyLlxyXG4vLy8gQHRocm93IEVycm9yIGlmIGFuIGluY29ycmVjdCBzdHJpbmcgZm9yIHBvc2l0aW9uIGlzIHByb3ZpZGVkLlxyXG5AZnVuY3Rpb24gamVldC1vcHBvc2l0ZS1kaXJlY3Rpb24oJGRpcmVjdGlvbikge1xyXG4gIEBpZiAkZGlyZWN0aW9uID09IFwibGVmdFwiIHtcclxuICAgIEByZXR1cm4gcmlnaHQ7XHJcbiAgfSBAZWxzZSBpZiAkZGlyZWN0aW9uID09IFwicmlnaHRcIiB7XHJcbiAgICBAcmV0dXJuIGxlZnQ7XHJcbiAgfSBAZWxzZSBpZiAkZGlyZWN0aW9uID09IFwidG9wXCIge1xyXG4gICAgQHJldHVybiBib3R0b207XHJcbiAgfSBAZWxzZSBpZiAkZGlyZWN0aW9uID09IFwiYm90dG9tXCIge1xyXG4gICAgQHJldHVybiB0b3A7XHJcbiAgfSBAZWxzZSBpZiBpbmRleChcImx0clwiIFwiTFRSXCIsICRkaXJlY3Rpb24pIHtcclxuICAgIEByZXR1cm4gcnRsO1xyXG4gIH0gQGVsc2UgaWYgaW5kZXgoXCJydGxcIiBcIlJUTFwiLCAkZGlyZWN0aW9uKSB7XHJcbiAgICBAcmV0dXJuIGx0cjtcclxuICB9IEBlbHNlIHtcclxuICAgIEB3YXJuIFwiYCN7JGRpcmVjdGlvbn1gIGlzIG5vdCBhIGRpcmVjdGlvbjsgcGxlYXNlIG1ha2Ugc3VyZSB5b3VyIGRpcmVjdGlvbiBpcyBhbGwgbG93ZXJjYXNlLlwiO1xyXG4gICAgQHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbi8vLyBQZXJmb3JtIGEgdmFsdWUgaW50byBhIHBlcmNlbnRhZ2UgdmFsdWUuXHJcbi8vLyBAYWNjZXNzIHByaXZhdGVcclxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkdmFsdWUgLSBUaGUgdmFsdWUgd2hpY2ggc2hvdWxkIGJlIGNvbnZlcnRlZC5cclxuLy8vIEByZXR1cm5zIHtOdW1iZXJ9ICR2YWx1ZSAtIFRoZSBwZXJjZW50YWdlLlxyXG5AZnVuY3Rpb24gamVldC1nZXQtcGVyY2VudGFnZSgkdmFsdWUpIHtcclxuICBAaWYgJHZhbHVlID09IDAge1xyXG4gICAgQHJldHVybiAwO1xyXG4gIH0gQGVsc2Uge1xyXG4gICAgQHJldHVybiAkdmFsdWUgKiAxJTtcclxuICB9XHJcbn1cclxuIiwiLy8vIFN0eWxlIGFuIGVsZW1lbnQgYXMgYSBjb2x1bW4gd2l0aCBhIGd1dHRlci5cclxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkcmF0aW9zIFsxXSAtIEEgd2lkdGggcmVsYXRpdmUgdG8gaXRzIGNvbnRhaW5lciBhcyBhIGZyYWN0aW9uLlxyXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRvZmZzZXQgWzBdIC0gQSBvZmZzZXQgc3BlY2lmaWVkIGFzIGEgZnJhY3Rpb24uXHJcbi8vLyBAcGFyYW0ge051bWJlcn0gJGN5Y2xlIFswXSAtIEVhc2lseSBjcmVhdGUgYW4gbnRoIGNvbHVtbiBncmlkIHdoZXJlICRjeWNsZSBlcXVhbHMgdGhlIG51bWJlciBvZiBjb2x1bW5zLlxyXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRndXR0ZXIgWyRqZWV0LWd1dHRlcl0gLSBTcGVjaWZ5IHRoZSBndXR0ZXIgd2lkdGggYXMgYSBwZXJjZW50YWdlIG9mIHRoZSBjb250YWluZXJzIHdpZHRoLlxyXG5AbWl4aW4gai1jb2x1bW4oJHJhdGlvczogMSwgJG9mZnNldDogMCwgJGN5Y2xlOiAwLCAkZ3V0dGVyOiAkamVldC1ndXR0ZXIpIHtcclxuICAkc2lkZTogamVldC1nZXQtbGF5b3V0LWRpcmVjdGlvbigpO1xyXG4gICRvcHBvc2l0ZS1zaWRlOiBqZWV0LW9wcG9zaXRlLWRpcmVjdGlvbigkc2lkZSk7XHJcbiAgJGNvbHVtbi13aWR0aHM6IGplZXQtZ2V0LWNvbHVtbigkcmF0aW9zLCAkZ3V0dGVyKTtcclxuICAkbWFyZ2luLWxhc3Q6IDA7XHJcbiAgJG1hcmdpbi1sOiAkbWFyZ2luLWxhc3Q7XHJcbiAgJG1hcmdpbi1yOiBudGgoJGNvbHVtbi13aWR0aHMsIDIpO1xyXG5cclxuICBAaWYgJG9mZnNldCAhPSAwIHtcclxuICAgIEBpZiAkb2Zmc2V0IDwgMCB7XHJcbiAgICAgICRvZmZzZXQ6ICRvZmZzZXQgKiAtMTtcclxuICAgICAgJG9mZnNldDogbnRoKGplZXQtZ2V0LWNvbHVtbigkb2Zmc2V0LCBudGgoJGNvbHVtbi13aWR0aHMsIDIpKSwgMSk7XHJcbiAgICAgICRtYXJnaW4tbGFzdDogJG9mZnNldCArIG50aCgkY29sdW1uLXdpZHRocywgMikgKiAyO1xyXG4gICAgICAkbWFyZ2luLXI6ICRtYXJnaW4tbGFzdDtcclxuICAgIH0gQGVsc2Uge1xyXG4gICAgICAkb2Zmc2V0OiBudGgoamVldC1nZXQtY29sdW1uKCRvZmZzZXQsIG50aCgkY29sdW1uLXdpZHRocywgMikpLCAxKTtcclxuICAgICAgJG1hcmdpbi1sOiAkb2Zmc2V0ICsgbnRoKCRjb2x1bW4td2lkdGhzLCAyKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZsb2F0OiAkc2lkZTtcclxuICBjbGVhcjogbm9uZTtcclxuICB3aWR0aDogamVldC1nZXQtcGVyY2VudGFnZShudGgoJGNvbHVtbi13aWR0aHMsIDEpKTtcclxuXHJcbiAgbWFyZ2luOiB7XHJcbiAgICAjeyRzaWRlfTogamVldC1nZXQtcGVyY2VudGFnZSgkbWFyZ2luLWwpO1xyXG4gICAgI3skb3Bwb3NpdGUtc2lkZX06IGplZXQtZ2V0LXBlcmNlbnRhZ2UoJG1hcmdpbi1yKTtcclxuICB9O1xyXG5cclxuICBAaWYgJGN5Y2xlICE9IDAge1xyXG4gICAgJjpudGgtb2YtdHlwZShuKSB7XHJcbiAgICAgIG1hcmdpbi0je2plZXQtb3Bwb3NpdGUtZGlyZWN0aW9uKCRzaWRlKX06IGplZXQtZ2V0LXBlcmNlbnRhZ2UoJG1hcmdpbi1yKTtcclxuICAgICAgZmxvYXQ6ICRzaWRlO1xyXG4gICAgICBjbGVhcjogbm9uZTtcclxuICAgIH1cclxuXHJcbiAgICAmOm50aC1vZi10eXBlKCN7JGN5Y2xlfW4pIHtcclxuICAgICAgbWFyZ2luLSN7amVldC1vcHBvc2l0ZS1kaXJlY3Rpb24oJHNpZGUpfTogamVldC1nZXQtcGVyY2VudGFnZSgkbWFyZ2luLWxhc3QpO1xyXG4gICAgICBmbG9hdDogamVldC1vcHBvc2l0ZS1kaXJlY3Rpb24oJHNpZGUpO1xyXG4gICAgfVxyXG5cclxuICAgICY6bnRoLW9mLXR5cGUoI3skY3ljbGV9biArIDEpIHtcclxuICAgICAgY2xlYXI6IGJvdGg7XHJcbiAgICB9XHJcbiAgfSBAZWxzZSB7XHJcbiAgICAmOmxhc3QtY2hpbGQge1xyXG4gICAgICBtYXJnaW4tI3tqZWV0LW9wcG9zaXRlLWRpcmVjdGlvbigkc2lkZSl9OiBqZWV0LWdldC1wZXJjZW50YWdlKCRtYXJnaW4tbGFzdCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLy8gR2V0IHRoZSB3aWR0aCBvZiBhIGNvbHVtbiBhbmQgbm90aGluZyBlbHNlLlxyXG4vLy8gQGFjY2VzcyBwcml2YXRlXHJcbi8vLyBAcGFyYW0ge051bWJlcn0gJHJhdGlvcyBbMV0gLSBBIHdpZHRoIHJlbGF0aXZlIHRvIGl0cyBjb250YWluZXIgYXMgYSBmcmFjdGlvbi5cclxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkZ3V0dGVyIFskamVldC1ndXR0ZXJdIC0gU3BlY2lmeSB0aGUgZ3V0dGVyIHdpZHRoIGFzIGEgcGVyY2VudGFnZSBvZiB0aGUgY29udGFpbmVycyB3aWR0aC5cclxuQGZ1bmN0aW9uIGotY29sdW1uLXdpZHRoKCRyYXRpb3M6IDEsICRndXR0ZXI6ICRqZWV0LWd1dHRlcikge1xyXG4gIEByZXR1cm4gamVldC1nZXQtcGVyY2VudGFnZShudGgoamVldC1nZXQtY29sdW1uKCRyYXRpb3MsICRndXR0ZXIpLCAxKSk7XHJcbn1cclxuXHJcbi8vLyBHZXQgdGhlIGd1dHRlciBzaXplIG9mIGEgY29sdW1uIGFuZCBub3RoaW5nIGVsc2UuXHJcbi8vLyBAYWNjZXNzIHByaXZhdGVcclxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkcmF0aW9zIFsxXSAtIEEgd2lkdGggcmVsYXRpdmUgdG8gaXRzIGNvbnRhaW5lciBhcyBhIGZyYWN0aW9uLlxyXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRndXR0ZXIgWyRqZWV0LWd1dHRlcl0gLSBTcGVjaWZ5IHRoZSBndXR0ZXIgd2lkdGggYXMgYSBwZXJjZW50YWdlIG9mIHRoZSBjb250YWluZXJzIHdpZHRoLlxyXG5AZnVuY3Rpb24gai1jb2x1bW4tZ3V0dGVyKCRyYXRpb3M6IDEsICRndXR0ZXI6ICRqZWV0LWd1dHRlcikge1xyXG4gIEByZXR1cm4gamVldC1nZXQtcGVyY2VudGFnZShudGgoamVldC1nZXQtY29sdW1uKCRyYXRpb3MsICRndXR0ZXIpLCAyKSk7XHJcbn1cclxuXHJcbi8vLyBTdHlsZSBhbiBlbGVtZW50IGFzIGEgY29sdW1uIHdpdGhvdXQgYW55IGd1dHRlcnMgZm9yIGEgc2VhbWxlc3Mgcm93LlxyXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRyYXRpb3MgWzFdIC0gQSB3aWR0aCByZWxhdGl2ZSB0byBpdHMgY29udGFpbmVyIGFzIGEgZnJhY3Rpb24uXHJcbi8vLyBAcGFyYW0ge051bWJlcn0gJG9mZnNldCBbMF0gLSBBIG9mZnNldCBzcGVjaWZpZWQgYXMgYSBmcmFjdGlvbi5cclxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkY3ljbGUgWzBdIC0gRWFzaWx5IGNyZWF0ZSBhbiBudGggY29sdW1uIGdyaWQgd2hlcmUgY3ljbGUgZXF1YWxzIHRoZSBudW1iZXIgb2YgY29sdW1ucy5cclxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkdW5jeWNsZSBbMF0gLSBVbmRvIGEgcHJldmlvdXMgY3ljbGUgdmFsdWUgdG8gYWxsb3cgZm9yIGEgbmV3IG9uZS5cclxuQG1peGluIGotc3BhbigkcmF0aW86IDEsICRvZmZzZXQ6IDAsICRjeWNsZTogMCwgJHVuY3ljbGU6IDApIHtcclxuICAkc2lkZTogamVldC1nZXQtbGF5b3V0LWRpcmVjdGlvbigpO1xyXG4gICRvcHBvc2l0ZS1zaWRlOiBqZWV0LW9wcG9zaXRlLWRpcmVjdGlvbigkc2lkZSk7XHJcbiAgJHNwYW4td2lkdGg6IGplZXQtZ2V0LXNwYW4oJHJhdGlvKTtcclxuICAkbWFyZ2luLXI6IDA7XHJcbiAgJG1hcmdpbi1sOiAkbWFyZ2luLXI7XHJcblxyXG4gIEBpZiAkb2Zmc2V0ICE9IDAge1xyXG4gICAgQGlmICRvZmZzZXQgPCAwIHtcclxuICAgICAgJG9mZnNldDogJG9mZnNldCAqIC0xO1xyXG4gICAgICAkbWFyZ2luLXI6IGplZXQtZ2V0LXNwYW4oJG9mZnNldCk7XHJcbiAgICB9IEBlbHNlIHtcclxuICAgICAgJG1hcmdpbi1sOiBqZWV0LWdldC1zcGFuKCRvZmZzZXQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZmxvYXQ6ICRzaWRlO1xyXG4gIGNsZWFyOiBub25lO1xyXG4gIHdpZHRoOiBqZWV0LWdldC1wZXJjZW50YWdlKCRzcGFuLXdpZHRoKTtcclxuXHJcbiAgbWFyZ2luOiB7XHJcbiAgICAjeyRzaWRlfTogamVldC1nZXQtcGVyY2VudGFnZSgkbWFyZ2luLWwpO1xyXG4gICAgI3skb3Bwb3NpdGUtc2lkZX06IGplZXQtZ2V0LXBlcmNlbnRhZ2UoJG1hcmdpbi1yKTtcclxuICB9O1xyXG5cclxuICBAaWYgJGN5Y2xlICE9IDAge1xyXG4gICAgJjpudGgtb2YtdHlwZSgjeyRjeWNsZX1uKSB7XHJcbiAgICAgIGZsb2F0OiAkb3Bwb3NpdGUtc2lkZTtcclxuICAgIH1cclxuXHJcbiAgICAmOm50aC1vZi10eXBlKCN7JGN5Y2xlfW4gKyAxKSB7XHJcbiAgICAgIGNsZWFyOiBib3RoO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQGlmICR1bmN5Y2xlICE9IDAge1xyXG4gICAgJjpudGgtb2YtdHlwZSgjeyR1bmN5Y2xlfW4pIHtcclxuICAgICAgZmxvYXQ6ICRzaWRlO1xyXG4gICAgfVxyXG5cclxuICAgICY6bnRoLW9mLXR5cGUoI3skdW5jeWNsZX1uICsgMSkge1xyXG4gICAgICBjbGVhcjogbm9uZTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxyXG4vLy8gUmVvcmRlciBjb2x1bW5zIHdpdGhvdXQgYWx0ZXJpbmcgdGhlIEhUTUwuXHJcbi8vLyBAcGFyYW0ge051bWJlcn0gJHJhdGlvcyBbMF0gLSBTcGVjaWZ5IGhvdyBmYXIgYWxvbmcgeW91IHdhbnQgdGhlIGVsZW1lbnQgdG8gbW92ZS5cclxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkY29sLW9yLXNwYW4gW2NvbHVtbl0gLSBTcGVjaWZ5IHdoZXRoZXIgdGhlIGVsZW1lbnQgaGFzIGEgZ3V0dGVyIG9yIG5vdC5cclxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkZ3V0dGVyIFskamVldC1ndXR0ZXJdIC0gU3BlY2lmeSB0aGUgZ3V0dGVyIHdpZHRoIGFzIGEgcGVyY2VudGFnZSBvZiB0aGUgY29udGFpbmVycyB3aWR0aC5cclxuQG1peGluIGotc2hpZnQoJHJhdGlvczogMCwgJGNvbC1vci1zcGFuOiBjb2x1bW4sICRndXR0ZXI6ICRqZWV0LWd1dHRlcikge1xyXG4gICR0cmFuc2xhdGU6ICcnO1xyXG4gICRzaWRlOiBqZWV0LWdldC1sYXlvdXQtZGlyZWN0aW9uKCk7XHJcblxyXG4gIEBpZiAkc2lkZSA9PSByaWdodCB7XHJcbiAgICAkcmF0aW9zOiBqZWV0LXJlcGxhY2UtbnRoKCRyYXRpb3MsIDAsIG50aCgkcmF0aW9zLCAxKSAqIC0xKTtcclxuICB9XHJcblxyXG4gIEBpZiBpbmRleChcImNvbHVtblwiIFwiY29sXCIgXCJjXCIsICRjb2wtb3Itc3Bhbikge1xyXG4gICAgJGNvbHVtbi13aWR0aHM6IGplZXQtZ2V0LWNvbHVtbigkcmF0aW9zLCAkZ3V0dGVyKTtcclxuICAgICR0cmFuc2xhdGU6IG50aCgkY29sdW1uLXdpZHRocywgMSkgKyBudGgoJGNvbHVtbi13aWR0aHMsIDIpO1xyXG4gIH0gQGVsc2Uge1xyXG4gICAgJHRyYW5zbGF0ZTogamVldC1nZXQtc3BhbigkcmF0aW9zKTtcclxuICB9XHJcblxyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBsZWZ0OiBqZWV0LWdldC1wZXJjZW50YWdlKCR0cmFuc2xhdGUpO1xyXG59XHJcblxyXG4vLy8gUmVzZXQgYW4gZWxlbWVudCB0aGF0IGhhcyBoYWQgc2hpZnQoKSBhcHBsaWVkIHRvIGl0LlxyXG5AbWl4aW4gai11bnNoaWZ0KCkge1xyXG4gIHBvc2l0aW9uOiBzdGF0aWM7XHJcbiAgbGVmdDogMDtcclxufVxyXG5cclxuLy8vIFZpZXcgdGhlIGdyaWQgYW5kIGl0cyBsYXllcnMgZm9yIGVhc3kgZGVidWdnaW5nLlxyXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRjb2xvciBbYmxhY2tdIC0gVGhlIGJhY2tncm91bmQgdGludCBhcHBsaWVkLlxyXG4vLy8gQHBhcmFtIHtCb29sfSAkaW1wb3J0YW50IFtmYWxzZV0gLSBXaGV0aGVyIHRvIGFwcGx5IHRoZSBzdHlsZSBhcyAhaW1wb3J0YW50LlxyXG5AbWl4aW4gai1lZGl0KCRjb2xvcjogYmxhY2ssICRpbXBvcnRhbnQ6IGZhbHNlKSB7XHJcbiAgQGlmICRpbXBvcnRhbnQge1xyXG4gICAgKiB7XHJcbiAgICAgIGJhY2tncm91bmQ6IHJnYmEoJGNvbG9yLCAuMDUpICFpbXBvcnRhbnQ7XHJcbiAgICB9XHJcbiAgfSBAZWxzZSB7XHJcbiAgICAqIHtcclxuICAgICAgYmFja2dyb3VuZDogcmdiYSgkY29sb3IsIC4wNSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLy8gSG9yaXpvbnRhbGx5IGNlbnRlciBhbiBlbGVtZW50LlxyXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRtYXgtd2lkdGggWzE0MTBweF0gLSBUaGUgbWF4IHdpZHRoIHRoZSBlbGVtZW50IGNhbiBiZS5cclxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkcGFkIFswXSAtIFNwZWNpZnkgdGhlIGVsZW1lbnQncyBsZWZ0IGFuZCByaWdodCBwYWRkaW5nLlxyXG5AbWl4aW4gai1jZW50ZXIoJG1heC13aWR0aDogJGplZXQtbWF4LXdpZHRoLCAkcGFkOiAwKSB7XHJcbiAgd2lkdGg6IGF1dG87XHJcbiAgbWF4LXdpZHRoOiAkbWF4LXdpZHRoO1xyXG4gIGZsb2F0OiBub25lO1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG5cclxuICBtYXJnaW46IHtcclxuICAgIHJpZ2h0OiBhdXRvO1xyXG4gICAgbGVmdDogYXV0bztcclxuICB9O1xyXG5cclxuICBwYWRkaW5nOiB7XHJcbiAgICBsZWZ0OiAkcGFkO1xyXG4gICAgcmlnaHQ6ICRwYWQ7XHJcbiAgfTtcclxufVxyXG5cclxuLy8vIFVuY2VudGVyIGFuIGVsZW1lbnQuXHJcbkBtaXhpbiBqLXVuY2VudGVyKCkge1xyXG4gIG1heC13aWR0aDogbm9uZTtcclxuXHJcbiAgbWFyZ2luOiB7XHJcbiAgICByaWdodDogMDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgfTtcclxuXHJcbiAgcGFkZGluZzoge1xyXG4gICAgbGVmdDogMDtcclxuICAgIHJpZ2h0OiAwO1xyXG4gIH07XHJcbn1cclxuXHJcbi8vLyBTdGFjayBhbiBlbGVtZW50IHNvIHRoYXQgbm90aGluZyBpcyBlaXRoZXIgc2lkZSBvZiBpdC5cclxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkcGFkIFswXSAtIFNwZWNpZnkgdGhlIGVsZW1lbnQncyBsZWZ0IGFuZCByaWdodCBwYWRkaW5nLlxyXG4vLy8gQHBhcmFtIHtCb29sIHwgU3RyaW5nfSAkYWxpZ24gW2ZhbHNlXSAtIFNwZWNpZnkgdGhlIHRleHQgYWxpZ24gZm9yIHRoZSBlbGVtZW50LlxyXG5AbWl4aW4gai1zdGFjaygkcGFkOiAwLCAkYWxpZ246IGZhbHNlKSB7XHJcbiAgJHNpZGU6IGplZXQtZ2V0LWxheW91dC1kaXJlY3Rpb24oKTtcclxuICAkb3Bwb3NpdGUtc2lkZTogamVldC1vcHBvc2l0ZS1kaXJlY3Rpb24oJHNpZGUpO1xyXG5cclxuICBkaXNwbGF5OiBibG9jaztcclxuICBjbGVhcjogYm90aDtcclxuICBmbG9hdDogbm9uZTtcclxuICB3aWR0aDogMTAwJTtcclxuXHJcbiAgbWFyZ2luOiB7XHJcbiAgICBsZWZ0OiBhdXRvO1xyXG4gICAgcmlnaHQ6IGF1dG87XHJcbiAgfTtcclxuXHJcbiAgJjpmaXJzdC1jaGlsZCB7XHJcbiAgICBtYXJnaW4tI3skc2lkZX06IGF1dG87XHJcbiAgfVxyXG5cclxuICAmOmxhc3QtY2hpbGQge1xyXG4gICAgbWFyZ2luLSN7JG9wcG9zaXRlLXNpZGV9OiBhdXRvO1xyXG4gIH1cclxuXHJcbiAgQGlmICRwYWQgIT0gMCB7XHJcbiAgICBwYWRkaW5nOiB7XHJcbiAgICAgIGxlZnQ6ICRwYWQ7XHJcbiAgICAgIHJpZ2h0OiAkcGFkO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQGlmICgkYWxpZ24gaXMgbm90IGZhbHNlKSB7XHJcbiAgICBAaWYgaW5kZXgoXCJjZW50ZXJcIiBcImNcIiwgJGFsaWduKSB7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH0gQGVsc2UgaWYgaW5kZXgoXCJsZWZ0XCIgXCJsXCIsICRhbGlnbikge1xyXG4gICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgfSBAZWxzZSBpZiBpbmRleChcInJpZ2h0XCIgXCJyXCIsICRhbGlnbikge1xyXG4gICAgICB0ZXh0LWFsaWduOiByaWdodDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8vLyBVbnN0YWNrIGFuIGVsZW1lbnQuXHJcbkBtaXhpbiBqLXVuc3RhY2soKSB7XHJcbiAgJHNpZGU6IGplZXQtZ2V0LWxheW91dC1kaXJlY3Rpb24oKTtcclxuICAkb3Bwb3NpdGUtc2lkZTogamVldC1vcHBvc2l0ZS1kaXJlY3Rpb24oJHNpZGUpO1xyXG5cclxuICB0ZXh0LWFsaWduOiAkc2lkZTtcclxuICBkaXNwbGF5OiBpbmxpbmU7XHJcbiAgY2xlYXI6IG5vbmU7XHJcbiAgd2lkdGg6IGF1dG87XHJcblxyXG4gIG1hcmdpbjoge1xyXG4gICAgbGVmdDogMDtcclxuICAgIHJpZ2h0OiAwO1xyXG4gIH07XHJcblxyXG4gICY6Zmlyc3QtY2hpbGQge1xyXG4gICAgbWFyZ2luLSN7JHNpZGV9OiAwO1xyXG4gIH1cclxuXHJcbiAgJjpsYXN0LWNoaWxkIHtcclxuICAgIG1hcmdpbi0je2plZXQtb3Bwb3NpdGUtZGlyZWN0aW9uKCRzaWRlKX06IDA7XHJcbiAgfVxyXG59XHJcbi8vLyBDZW50ZXIgYW4gZWxlbWVudCBvbiBlaXRoZXIgb3IgYm90aCBheGVzLiBSZXF1aXJlcyBhIHBhcmVudCBlbGVtZW50IHdpdGggcmVsYXRpdmUgcG9zaXRpb25pbmcuXHJcbi8vLyBAcGFyYW0ge1N0cmluZ30gJGRpcmVjdGlvbiBbYm90aF0gLSBTcGVjaWZ5IHdoaWNoIGF4ZXMgdG8gY2VudGVyIHRoZSBlbGVtZW50IG9uLlxyXG5AbWl4aW4gai1hbGlnbigkZGlyZWN0aW9uOiBib3RoKSB7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2Q7XHJcblxyXG4gIEBpZiBpbmRleChcImhvcml6b250YWxcIiBcImhcIiwgJGRpcmVjdGlvbikge1xyXG4gICAgbGVmdDogNTAlO1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xyXG4gIH0gQGVsc2UgaWYgaW5kZXgoXCJ2ZXJ0aWNhbFwiIFwidlwiLCAkZGlyZWN0aW9uKSB7XHJcbiAgICB0b3A6IDUwJTtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcclxuICB9IEBlbHNlIGlmIGluZGV4KFwibm9uZVwiLCAkZGlyZWN0aW9uKSB7XHJcbiAgICB0b3A6IGF1dG87XHJcbiAgICBsZWZ0OiBhdXRvO1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgMCk7XHJcbiAgfSBAZWxzZSB7XHJcbiAgICB0b3A6IDUwJTtcclxuICAgIGxlZnQ6IDUwJTtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xyXG4gIH1cclxufVxyXG5cclxuLy8vIEFwcGx5IGEgY2xlYXJmaXggdG8gYW4gZWxlbWVudC5cclxuQG1peGluIGotY2YoKSB7XHJcbiAgKnpvb206IDE7XHJcblxyXG4gICY6YmVmb3JlLCAmOmFmdGVyIHtcclxuICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgZGlzcGxheTogdGFibGU7XHJcbiAgfVxyXG5cclxuICAmOmFmdGVyIHtcclxuICAgIGNsZWFyOiBib3RoO1xyXG4gIH1cclxufVxyXG4iLCJAbWl4aW4gY29sdW1uKCRhcmdzLi4uKSB7XHJcbiAgQGluY2x1ZGUgai1jb2x1bW4oJGFyZ3MuLi4pO1xyXG59XHJcblxyXG5AZnVuY3Rpb24gY29sdW1uLXdpZHRoKCRhcmdzLi4uKSB7XHJcbiAgQHJldHVybiBqLWNvbHVtbi13aWR0aCgkYXJncy4uLik7XHJcbn1cclxuXHJcbkBmdW5jdGlvbiBjb2x1bW4tZ3V0dGVyKCRhcmdzLi4uKSB7XHJcbiAgQHJldHVybiBqLWNvbHVtbi1ndXR0ZXIoJGFyZ3MuLi4pO1xyXG59XHJcblxyXG5AbWl4aW4gc3BhbigkYXJncy4uLikge1xyXG4gIEBpbmNsdWRlIGotc3BhbigkYXJncy4uLik7XHJcbn1cclxuXHJcbkBtaXhpbiBzaGlmdCgkYXJncy4uLikge1xyXG4gIEBpbmNsdWRlIGotc2hpZnQoJGFyZ3MuLi4pO1xyXG59XHJcblxyXG5AbWl4aW4gdW5zaGlmdCgpIHtcclxuICBAaW5jbHVkZSBqLXVuc2hpZnQoKTtcclxufVxyXG5cclxuQG1peGluIGVkaXQoJGFyZ3MuLi4pIHtcclxuICBAaW5jbHVkZSBqLWVkaXQoJGFyZ3MuLi4pO1xyXG59XHJcblxyXG5AbWl4aW4gY2VudGVyKCRhcmdzLi4uKSB7XHJcbiAgQGluY2x1ZGUgai1jZW50ZXIoJGFyZ3MuLi4pO1xyXG59XHJcblxyXG5AbWl4aW4gdW5jZW50ZXIoKSB7XHJcbiAgQGluY2x1ZGUgai11bmNlbnRlcigpO1xyXG59XHJcblxyXG5AbWl4aW4gc3RhY2soJGFyZ3MuLi4pIHtcclxuICBAaW5jbHVkZSBqLXN0YWNrKCRhcmdzLi4uKTtcclxufVxyXG5cclxuQG1peGluIHVuc3RhY2soKSB7XHJcbiAgQGluY2x1ZGUgai11bnN0YWNrKCk7XHJcbn1cclxuXHJcbkBtaXhpbiBhbGlnbigkYXJncy4uLikge1xyXG4gIEBpbmNsdWRlIGotYWxpZ24oJGFyZ3MuLi4pO1xyXG59XHJcblxyXG5AbWl4aW4gY2YoKSB7XHJcbiAgQGluY2x1ZGUgai1jZigpO1xyXG59XHJcblxyXG5AbWl4aW4gY29sKCRhcmdzLi4uKSB7XHJcbiAgQGluY2x1ZGUgY29sdW1uKCRhcmdzLi4uKTtcclxufVxyXG5cclxuQG1peGluIGRlYnVnKCkge1xyXG4gIEBpbmNsdWRlIGVkaXQ7XHJcbn1cclxuXHJcbkBmdW5jdGlvbiBjdygkYXJncy4uLikge1xyXG4gIEByZXR1cm4gY29sdW1uLXdpZHRoKCRhcmdzLi4uKTtcclxufVxyXG5cclxuQGZ1bmN0aW9uIGNnKCRhcmdzLi4uKSB7XHJcbiAgQHJldHVybiBjb2x1bW4tZ3V0dGVyKCRhcmdzLi4uKTtcclxufVxyXG4iLCIvLy8vXHJcbi8vLyBMYXlvdXRcclxuLy8vIC0+IEhpZGVhYmxlXHJcbi8vLyAtPiBIZWFkZXJcclxuLy8vIC0+IEhvbWUgcGFnZVxyXG4vLy8gLT4gRm9vdGVyXHJcbi8vLy9cclxuXHJcbkBpbXBvcnQgXCIuLi90ZW1wbGF0ZXMvaGVhZGVyXCI7XHJcbkBpbXBvcnQgXCIuLi90ZW1wbGF0ZXMvaG9tZVwiO1xyXG5AaW1wb3J0IFwiLi4vdGVtcGxhdGVzL2Zvb3RlclwiO1xyXG4iLCIvLy8vXHJcbi8vLyBIZWFkZXJcclxuLy8vIEBncm91cCBIZWFkZXJcclxuLy8vIEBhdXRob3IgTVNcclxuLy8vLyIsIi8vLy9cclxuLy8vIEhvbWVcclxuLy8vIEBncm91cCBIb21lXHJcbi8vLyBAYXV0aG9yIE1TXHJcbi8vLy8iLCIvLy8vXHJcbi8vLyBGb290ZXJcclxuLy8vIEBncm91cCBGb290ZXJcclxuLy8vIEBhdXRob3IgTVNcclxuLy8vL1xyXG4iLCIvLy8vXHJcbi8vLyBNb2R1bGVzXHJcbi8vLyAtPiBBY2NvcmRpb25zXHJcbi8vLyAtPiBBbGVydHNcclxuLy8vIC0+IEJ1dHRvbnNcclxuLy8vIC0+IEZvcm1zXHJcbi8vLyAtPiBIaWRlYWJsZVxyXG4vLy8gLT4gTGlzdHNcclxuLy8vIC0+IE1vZGFsIERpYWxvZ3NcclxuLy8vIC0+IFJhdGluZyBzdGFyc1xyXG4vLy8gLT4gVGFicyBjb21wb25lbnRcclxuLy8vIC0+IFRhYmxlc1xyXG4vLy8gLT4gVG9vbHRpcHNcclxuLy8vIEBncm91cCBNb2R1bGVzXHJcbi8vLyBAYXV0aG9yIE1TXHJcbi8vLy9cclxuXHJcbkBpbXBvcnQgXCJtb2R1bGVzL2FjY29yZGlvbnNcIjtcclxuQGltcG9ydCBcIm1vZHVsZXMvYWxlcnRzXCI7XHJcbkBpbXBvcnQgXCJtb2R1bGVzL2J1dHRvbnNcIjtcclxuQGltcG9ydCBcIm1vZHVsZXMvZm9ybXNcIjtcclxuQGltcG9ydCBcIm1vZHVsZXMvaGlkZWFibGVcIjtcclxuQGltcG9ydCBcIm1vZHVsZXMvbGlzdHNcIjtcclxuQGltcG9ydCBcIm1vZHVsZXMvbW9kYWxzXCI7XHJcbkBpbXBvcnQgXCJtb2R1bGVzL3JhdGluZ3NcIjtcclxuQGltcG9ydCBcIm1vZHVsZXMvdGFic1wiO1xyXG5AaW1wb3J0IFwibW9kdWxlcy90YWJsZXNcIjtcclxuQGltcG9ydCBcIm1vZHVsZXMvdG9vbHRpcHNcIjtcclxuIiwiLy8vL1xyXG4vLy8gQWNjb3JkaW9uc1xyXG4vLy8gQGdyb3VwIENvbXBvbmVudCAtIEFjY29yZGlvbnNcclxuLy8vIEBhdXRob3IgTVNcclxuLy8vL1xyXG5cclxuLy8vXHJcbiRhY2NvcmRpb24taXRlbS1iYWNrZ3JvdW5kOiAgICAgIHJnYmEoI2NjYywgMC43NSkgIWRlZmF1bHQ7XHJcbi8vL1xyXG4kYWNjb3JkaW9uLWhlYWRlci1iYWNrZ3JvdW5kOiAgICAjY2NjICFkZWZhdWx0O1xyXG4vLy9cclxuJGFjY29yZGlvbi1oZWFkZXItaGVpZ2h0OiAgICAgICAgNTBweCAhZGVmYXVsdDtcclxuLy8vXHJcbiRhY2NvcmRpb24taXRlbS1wYWRkaW5nOiAgICAgICAgIDEwcHggIWRlZmF1bHQ7XHJcblxyXG5cclxuLy8vIENvbXBvbmVudCBBY2NvcmRpb24gLSBcclxuLy8vIFRoaXMgaXMgYSBDU1Mtb25seSBhY2NvcmRpb24gY29tcG9uZW50IHRoYXRcclxuLy8vIHVzZXMgQ1NTIGA6dGFyZ2V0YCBldmVudCB0byBzaG93IG9yIGhpZGUgYmxvY2tzXHJcbi8vLyBvZiBjb250ZW50IGluIGFuIGFjY29yZGlvbiBmYXNoaW9uLlxyXG4vLy8gQGV4YW1wbGVcclxuLy8vICAgPGRpdiBjbGFzcz1cImMtYWNjb3JkaW9uXCI+XHJcbi8vLyAgICAgPGRpdiBjbGFzcz1cImMtYWNjb3JkaW9uX19pdGVtXCIgaWQ9XCJpdGVtLTFcIj5cclxuLy8vICAgICAgIDxhIGNsYXNzPVwiYy1hY2NvcmRpb25fX2hlYWRlclwiIGhyZWY9XCIjaXRlbS0xXCI+SXRlbSAxPC9hPlxyXG4vLy8gICAgICAgPHAgY2xhc3M9XCJjLWFjY29yZGlvbl9fY29udGVudFwiPkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LjwvcD5cclxuLy8vICAgICA8L2Rpdj5cclxuLy8vICAgICA8ZGl2IGNsYXNzPVwiYy1hY2NvcmRpb25fX2l0ZW1cIiBpZD1cIml0ZW0tMlwiPlxyXG4vLy8gICAgICAgPGEgY2xhc3M9XCJjLWFjY29yZGlvbl9faGVhZGVyXCIgaHJlZj1cIiNpdGVtLTJcIj5JdGVtIDI8L2E+XHJcbi8vLyAgICAgICA8cCBjbGFzcz1cImMtYWNjb3JkaW9uX19jb250ZW50XCI+TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuPC9wPlxyXG4vLy8gICAgIDwvZGl2PlxyXG4vLy8gICA8L2Rpdj5cclxuQG1peGluIGMtYWNjb3JkaW9uIHtcclxuICAuYy1hY2NvcmRpb24ge1xyXG4gICAgQGF0LXJvb3Qge1xyXG4gICAgICAmX19pdGVtIHtcclxuICAgICAgICBtYXgtaGVpZ2h0OiAkYWNjb3JkaW9uLWhlYWRlci1oZWlnaHQ7XHJcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdGludCgkYWNjb3JkaW9uLWhlYWRlci1iYWNrZ3JvdW5kLCAyMCUpO1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRhY2NvcmRpb24taXRlbS1iYWNrZ3JvdW5kO1xyXG4gICAgICAgIHRyYW5zaXRpb246IG1heC1oZWlnaHQgJG1zdWlmLXRyYW5zaXRpb24tZHVyYXRpb24gJG1zdWlmLXRyYW5zaXRpb24tdGltaW5nIDBzO1xyXG5cclxuICAgICAgICAvLyBTaG93IGFjY29yZGlvbiBpdGVtXHJcbiAgICAgICAgJjp0YXJnZXQge1xyXG4gICAgICAgICAgbWF4LWhlaWdodDogMTAwMHB4O1xyXG5cclxuICAgICAgICAgIC5jLWFjY29yZGlvbl9faGVhZGVyIHtcclxuICAgICAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgICAgIGNvbnRlbnQ6ICctJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgJl9faGVhZGVyIHtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAzMHB4O1xyXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAkYWNjb3JkaW9uLWhlYWRlci1oZWlnaHQ7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGFjY29yZGlvbi1oZWFkZXItYmFja2dyb3VuZDtcclxuXHJcbiAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgQGluY2x1ZGUgYWxpZ24odmVydGljYWwpO1xyXG5cclxuICAgICAgICAgIGNvbnRlbnQ6ICcrJztcclxuICAgICAgICAgIG1hcmdpbi1sZWZ0OiAtMjBweDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICZfX2NvbnRlbnQge1xyXG4gICAgICAgIHBhZGRpbmc6ICRhY2NvcmRpb24taXRlbS1wYWRkaW5nICRhY2NvcmRpb24taXRlbS1wYWRkaW5nKjM7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiLy8vL1xyXG4vLy8gQWxlcnQgQm94ZXNcclxuLy8vIEBncm91cCBDb21wb25lbnQgLSBBbGVydHNcclxuLy8vL1xyXG5cclxuLy8vXHJcbiRhbGVydC1zdGF0dXMtY29sb3I6IChcclxuICAnbm90aWNlJzogI0FERDhFNixcclxuICAnd2FybmluZyc6ICNGMEU2OEMsXHJcbiAgJ2Vycm9yJzogI0NENUM1QyxcclxuICAnc3VjY2Vzcyc6ICM2NkNEQUFcclxuKTtcclxuLy8vXHJcbiRhbGVydC10b2FzdC1tYXJnaW46IHRvZW0oMjBweCkgIWRlZmF1bHQ7XHJcbi8vL1xyXG4kYWxlcnQtdG9hc3QtbWF4LXdpZHRoOiB0b2VtKDMzMHB4KSAhZGVmYXVsdDtcclxuLy8vXHJcbiRhbGVydC10b2FzdC1hbmltYXRpb24tdHlwZTogJ3NsaWRlJyAhZGVmYXVsdDsgLy8gVmFsdWVzOiAnZmFkZScgb3IgJ3NsaWRlJ1xyXG4vLy9cclxuJGFsZXJ0LWFuaW1hdGlvbi1kdXJhdGlvbjogMXMgIWRlZmF1bHQ7XHJcbi8vL1xyXG4kYWxlcnQtYW5pbWF0aW9uLXBlc2lzdGVuY2U6IDVzICFkZWZhdWx0O1xyXG4vLy9cclxuJGFsZXJ0LWJvcmRlci1yYWRpdXM6IG5vbmUgIWRlZmF1bHQ7XHJcbi8vL1xyXG4kYWxlcnQtei1pbmRleC1wb3NpdGlvbjogMTAwMCAhZGVmYXVsdDtcclxuLy8vXHJcbiRhbGVydC10b2FzdC1wb3NpdGlvbnM6IChcclxuICAndG9wLWxlZnQnOiAoXHJcbiAgICB0b3A6IDAsXHJcbiAgICBsZWZ0OiAwXHJcbiAgKSxcclxuICAndG9wLXJpZ2h0JzogKFxyXG4gICAgdG9wOiAwLFxyXG4gICAgcmlnaHQ6IDBcclxuICApLFxyXG4gICdib3R0b20tcmlnaHQnOiAoXHJcbiAgICBib3R0b206IDAsXHJcbiAgICByaWdodDogMFxyXG4gICksXHJcbiAgJ2JvdHRvbS1sZWZ0JzogKFxyXG4gICAgYm90dG9tOiAwLFxyXG4gICAgbGVmdDogMFxyXG4gIClcclxuKTtcclxuXHJcblxyXG4vLy8gQ29tcG9uZW50IEFsZXJ0IC0gXHJcbi8vLyBJcyBhIGNvbXBvbmVudCB0byBzaG93IHR3byBkaWZmZXJlbnQgdHlwZXNcclxuLy8vIG9mIGFsZXJ0IGJveGVzOiB0b2FzdCBhbmQgdG9wIGJhci5cclxuLy8vIEBleGFtcGxlXHJcbi8vLyAgIC8vLT4gVG9hc3RcclxuLy8vICAgPGRpdiBjbGFzcz1cImMtYWxlcnQgYy1hbGVydC0tdG9hc3QgYy1hbGVydC0tdG9hc3Qte3Bvc2l0aW9ufSBjLWFsZXJ0LS17c3RhdHVzfVwiPkxvcmVtIGlwc3VtIGRvbG9yLjwvZGl2PlxyXG4vLy8gICAvLy0+IFRvcCBiYXJcclxuLy8vICAgPGRpdiBjbGFzcz1cImMtYWxlcnQgYy1hbGVydC0tdG9wLWJhciBjLWFsZXJ0LS17c3RhdHVzfVwiPkxvcmVtIGlwc3VtIGRvbG9yLjwvZGl2PlxyXG5AbWl4aW4gYy1hbGVydCB7XHJcbiAgQGtleWZyYW1lcyBzbGlkZS1pbi1yaWdodCB7XHJcbiAgICBmcm9tIHtcclxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKCN7JGFsZXJ0LXRvYXN0LW1heC13aWR0aCArICRhbGVydC10b2FzdC1tYXJnaW59KTtcclxuICAgIH1cclxuXHJcbiAgICB0byB7XHJcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBrZXlmcmFtZXMgc2xpZGUtb3V0LXJpZ2h0IHtcclxuICAgIGZyb20ge1xyXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XHJcbiAgICB9XHJcblxyXG4gICAgdG8ge1xyXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoI3skYWxlcnQtdG9hc3QtbWF4LXdpZHRoICsgJGFsZXJ0LXRvYXN0LW1hcmdpbn0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQGtleWZyYW1lcyBzbGlkZS1pbi1sZWZ0IHtcclxuICAgIGZyb20ge1xyXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLSN7JGFsZXJ0LXRvYXN0LW1heC13aWR0aCArICRhbGVydC10b2FzdC1tYXJnaW59KTtcclxuICAgIH1cclxuXHJcbiAgICB0byB7XHJcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBrZXlmcmFtZXMgc2xpZGUtb3V0LWxlZnQge1xyXG4gICAgZnJvbSB7XHJcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTtcclxuICAgIH1cclxuXHJcbiAgICB0byB7XHJcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtI3skYWxlcnQtdG9hc3QtbWF4LXdpZHRoICsgJGFsZXJ0LXRvYXN0LW1hcmdpbn0pO1xyXG4gICAgfVxyXG4gIH1cclxuICAuYy1hbGVydCB7XHJcbiAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICB6LWluZGV4OiAkYWxlcnQtei1pbmRleC1wb3NpdGlvbjtcclxuICAgIHBhZGRpbmc6IHRvZW0oMjBweCk7XHJcblxyXG4gICAgLy8gVG9hc3QgdHlwZVxyXG4gICAgJi0tdG9hc3Qge1xyXG4gICAgICBtYXgtd2lkdGg6ICRhbGVydC10b2FzdC1tYXgtd2lkdGg7XHJcbiAgICAgIG1hcmdpbjogJGFsZXJ0LXRvYXN0LW1hcmdpbjtcclxuXHJcbiAgICAgIEBpZiB2YXJpYWJsZS1leGlzdHMoYWxlcnQtYm9yZGVyLXJhZGl1cykgYW5kICRhbGVydC1ib3JkZXItcmFkaXVzICE9ICdub25lJyB7XHJcbiAgICAgICAgYm9yZGVyLXJhZGl1czogJGFsZXJ0LWJvcmRlci1yYWRpdXM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIEBpZiAkYWxlcnQtdG9hc3QtYW5pbWF0aW9uLXR5cGUgPT0gJ2ZhZGUnIHtcclxuICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XHJcbiAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICBhbmltYXRpb246IGZhZGUtaW4gJGFsZXJ0LWFuaW1hdGlvbi1kdXJhdGlvbiBmb3J3YXJkcywgZmFkZS1vdXQgJGFsZXJ0LWFuaW1hdGlvbi1kdXJhdGlvbiBmb3J3YXJkcyAkYWxlcnQtYW5pbWF0aW9uLXBlc2lzdGVuY2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCAkYWxlcnQtdG9hc3QtcG9zaXRpb25zIG1hcCBhbmQgY3JlYXRlIHRoZSBwcm9wZXIgY2xhc3Nlc1xyXG4gICAgICBAZWFjaCAkcG9zaXRpb24sICRjb29yZHMgaW4gJGFsZXJ0LXRvYXN0LXBvc2l0aW9ucyB7XHJcbiAgICAgICAgQGF0LXJvb3Qge1xyXG4gICAgICAgICAgLmMtYWxlcnQtLXRvYXN0LSN7JHBvc2l0aW9ufSB7XHJcbiAgICAgICAgICAgIHRvcDogbWFwLWdldCgkY29vcmRzLCB0b3ApO1xyXG4gICAgICAgICAgICByaWdodDogbWFwLWdldCgkY29vcmRzLCByaWdodCk7XHJcbiAgICAgICAgICAgIGJvdHRvbTogbWFwLWdldCgkY29vcmRzLCBib3R0b20pO1xyXG4gICAgICAgICAgICBsZWZ0OiBtYXAtZ2V0KCRjb29yZHMsIGxlZnQpO1xyXG5cclxuICAgICAgICAgICAgLy8gU2xpZGUgaW4gYW5kIG91dCBmcm9tIGxlZnRcclxuICAgICAgICAgICAgQGlmICRhbGVydC10b2FzdC1hbmltYXRpb24tdHlwZSA9PSAnc2xpZGUnIGFuZCBtYXAtZ2V0KCRjb29yZHMsIGxlZnQpID09IDAge1xyXG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtI3skYWxlcnQtdG9hc3QtbWF4LXdpZHRoICsgJGFsZXJ0LXRvYXN0LW1hcmdpbn0pO1xyXG4gICAgICAgICAgICAgIGFuaW1hdGlvbjogc2xpZGUtaW4tbGVmdCAkYWxlcnQtYW5pbWF0aW9uLWR1cmF0aW9uIGZvcndhcmRzLCBzbGlkZS1vdXQtbGVmdCAkYWxlcnQtYW5pbWF0aW9uLWR1cmF0aW9uIGZvcndhcmRzICRhbGVydC1hbmltYXRpb24tcGVzaXN0ZW5jZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBTbGlkZSBpbiBhbmQgb3V0IGZyb20gcmlnaHRcclxuICAgICAgICAgICAgQGVsc2UgaWYgJGFsZXJ0LXRvYXN0LWFuaW1hdGlvbi10eXBlID09ICdzbGlkZScgYW5kIG1hcC1nZXQoJGNvb3JkcywgcmlnaHQpID09IDAge1xyXG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgjeyRhbGVydC10b2FzdC1tYXgtd2lkdGggKyAkYWxlcnQtdG9hc3QtbWFyZ2lufSk7XHJcbiAgICAgICAgICAgICAgYW5pbWF0aW9uOiBzbGlkZS1pbi1yaWdodCAkYWxlcnQtYW5pbWF0aW9uLWR1cmF0aW9uIGZvcndhcmRzLCBzbGlkZS1vdXQtcmlnaHQgJGFsZXJ0LWFuaW1hdGlvbi1kdXJhdGlvbiBmb3J3YXJkcyAkYWxlcnQtYW5pbWF0aW9uLXBlc2lzdGVuY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBAYXQtcm9vdCB7XHJcbiAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCAkYWxlcnQtc3RhdHVzLWNvbG9yIG1hcCBhbmQgY3JlYXRlIHRoZSBwcm9wZXIgY2xhc3Nlc1xyXG4gICAgICBAZWFjaCAkc3RhdHVzLCAkY29sb3IgaW4gJGFsZXJ0LXN0YXR1cy1jb2xvciB7XHJcbiAgICAgICAgLmMtYWxlcnQtLSN7JHN0YXR1c30ge1xyXG4gICAgICAgICAgY29sb3I6IHNoYWRlKCRjb2xvciwgMzAlKTtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvcjtcclxuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHNoYWRlKCRjb2xvciwgMTAlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBIZWxsbyBiYXIgdHlwZVxyXG4gICAgJi0tdG9wLWJhciB7XHJcbiAgICAgIHRvcDogMDtcclxuICAgICAgcmlnaHQ6IDA7XHJcbiAgICAgIGxlZnQ6IDA7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBib3JkZXItdG9wOiAwO1xyXG4gICAgICBib3JkZXItcmlnaHQ6IDA7XHJcbiAgICAgIGJvcmRlci1sZWZ0OiAwO1xyXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwMCUpO1xyXG4gICAgICBhbmltYXRpb246IHNsaWRlLWRvd24gJGFsZXJ0LWFuaW1hdGlvbi1kdXJhdGlvbiBmb3J3YXJkcywgc2xpZGUtdXAgJGFsZXJ0LWFuaW1hdGlvbi1kdXJhdGlvbiBmb3J3YXJkcyAkYWxlcnQtYW5pbWF0aW9uLXBlc2lzdGVuY2U7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIi8vLy9cclxuLy8vIEJ1dHRvbnNcclxuLy8vIEBncm91cCBDb21wb25lbnQgLSBCdXR0b25zXHJcbi8vLy9cclxuXHJcbmEsXHJcbmJ1dHRvbiB7XHJcbiAgYmFja2dyb3VuZDogbm9uZTtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG5cclxuICAmLmJ0biB7XHJcbiAgICAmLS1wcmltYXJ5IHtcclxuICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgJi0tc2Vjb25kYXJ5IHtcclxuICAgICAgXHJcbiAgICB9XHJcbiAgfVxyXG59IiwiLy8vL1xyXG4vLy8gRm9ybXNcclxuLy8vIC0+IFJhZGlvIGFuZCBjaGVja2JveGVzXHJcbi8vLyBAZ3JvdXAgRm9ybXNcclxuLy8vL1xyXG5cclxuQGltcG9ydCBcImZvcm1zL3JhZGlvLWNoZWNrYm94XCI7XHJcbiIsIi8vLy9cclxuLy8vIFJhZGlvIEJ1dHRvbnMgJiBDaGVja2JveGVzXHJcbi8vLyBAZ3JvdXAgQ29tcG9uZW50IC0gUmFkaW8gQnV0dG9ucyAmIENoZWNrYm94ZXNcclxuLy8vIEBhdXRob3IgTVNcclxuLy8vL1xyXG5cclxuLy8vXHJcbiRyYy13aWR0aDogdG9lbSgyMHB4KSAhZGVmYXVsdDtcclxuLy8vXHJcbiRyYy1oZWlnaHQ6IHRvZW0oMjBweCkgIWRlZmF1bHQ7XHJcbi8vL1xyXG4kcmMtZm9udC1zaXplOiB0b2VtKDE2cHgpICFkZWZhdWx0O1xyXG4vLy9cclxuJHJjLWxhYmVsLWNvbG9yOiAjMDAwICFkZWZhdWx0O1xyXG4vLy9cclxuJHJjLW1hcmtlci1jb2xvcjogI2ZmZiAhZGVmYXVsdDtcclxuLy8vXHJcbiRyYy1iYWNrZ3JvdW5kLWNvbG9yOiAjQ0Q1QzVDICFkZWZhdWx0O1xyXG4vLy9cclxuJHJjLXJhZGlvLW1hcmtlcjogJ1xcMjVDRicgIWRlZmF1bHQ7IC8vIFVuaWNvZGUgZm9yICfil48nXHJcbi8vL1xyXG4kcmMtY2hlY2tib3gtbWFya2VyOiAnXFwyNzE0JyAhZGVmYXVsdDsgLy8gVW5pY29kZSBmb3IgJ+KclCdcclxuLy8vXHJcbiRyYy1jaGVja2JveC1ib3JkZXItcmFkaXVzOiB0b2VtKDNweCkgIWRlZmF1bHQ7XHJcblxyXG5cclxuLy8vIFJhZGlvIEJ1dHRvbnMgJiBDaGVja2JveGVzXHJcbi8vLyBNaXhpbiB0aGF0IHN0eWxlcyBSYWRpbyBidXR0b25zIGFuZFxyXG4vLy8gQ2hlY2tib3hlcyB3aXRoIENTUyBvbmx5LlxyXG4vLy8gQGV4YW1wbGVcclxuLy8vICAgW3R5cGU9XCJjaGVja2JveFwiXSxcclxuLy8vICAgW3R5cGU9XCJyYWRpb1wiXXtcclxuLy8vICAgICBAaW5jbHVkZSBkby1yYWRpby1jaGVja2JveCgne3R5cGV9Jywge2xhYmVsLWNvbG9yfSwge21hcmtlci1jb2xvcn0sIHtiYWNrZ3JvdW5kLWNvbG9yfSk7XHJcbi8vLyAgIH1cclxuQG1peGluIGRvLXJhZGlvLWNoZWNrYm94KCR0eXBlLCAkbGFiZWwtY29sb3IsICRtYXJrZXItY29sb3IsICRiYWNrZ3JvdW5kLWNvbG9yKSB7XHJcbiAgLy8gRGVmYXVsdCBzdHlsZXNcclxuICAmOmNoZWNrZWQsXHJcbiAgJjpub3QoOmNoZWNrZWQpIHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGxlZnQ6IC05OTk5cHg7XHJcblxyXG4gICAgKyBsYWJlbCB7XHJcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgcGFkZGluZy1sZWZ0OiAkcmMtd2lkdGggKiAxLjI1O1xyXG4gICAgICBsaW5lLWhlaWdodDogJHJjLWhlaWdodDtcclxuICAgICAgY29sb3I6ICRsYWJlbC1jb2xvcjtcclxuICAgICAgY3Vyc29yOiBwb2ludGVyO1xyXG5cclxuICAgICAgLy8gTm90IDpjaGVja2VkIHN0YXRlXHJcbiAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICBjb250ZW50OiAnJztcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgbGVmdDogMDtcclxuICAgICAgICB3aWR0aDogJHJjLXdpZHRoO1xyXG4gICAgICAgIGhlaWdodDogJHJjLWhlaWdodDtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZC1jb2xvcjtcclxuICAgICAgICBib3JkZXI6IDFweCBkb3R0ZWQgdHJhbnNwYXJlbnQ7XHJcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsICRtc3VpZi10cmFuc2l0aW9uLWR1cmF0aW9uICRtc3VpZi10cmFuc2l0aW9uLXRpbWluZztcclxuXHJcbiAgICAgICAgQGlmICR0eXBlID09ICdjaGVja2JveCcge1xyXG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogJHJjLWNoZWNrYm94LWJvcmRlci1yYWRpdXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIEBpZiAkdHlwZSA9PSAncmFkaW8nIHtcclxuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IHRvZW0oOTk5OXB4KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIDpjaGVja2VkIHN0YXRlXHJcbiAgICAgICY6YWZ0ZXIge1xyXG4gICAgICAgIEBpZiAkdHlwZSA9PSAncmFkaW8nIHtcclxuICAgICAgICAgIGNvbnRlbnQ6ICRyYy1yYWRpby1tYXJrZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEBlbHNlIGlmICR0eXBlID09ICdjaGVja2JveCcge1xyXG4gICAgICAgICAgY29udGVudDogJHJjLWNoZWNrYm94LW1hcmtlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICBsZWZ0OiAwO1xyXG4gICAgICAgIHdpZHRoOiAkcmMtd2lkdGg7XHJcbiAgICAgICAgZm9udC1zaXplOiAkcmMtZm9udC1zaXplO1xyXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICBjb2xvcjogJG1hcmtlci1jb2xvcjtcclxuICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gI3skbXN1aWYtdHJhbnNpdGlvbi1kdXJhdGlvbiAvIDJ9ICRtc3VpZi10cmFuc2l0aW9uLXRpbWluZztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gTWFya2VyIHRyYW5zaXRpb24gb24gOmNoZWNrZWRcclxuICAmOm5vdCg6Y2hlY2tlZCkge1xyXG4gICAgKyBsYWJlbCB7XHJcbiAgICAgICY6YWZ0ZXIge1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgJjpjaGVja2VkIHtcclxuICAgICsgbGFiZWwge1xyXG4gICAgICAmOmFmdGVyIHtcclxuICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIDpkaXNhYmxlZCBzdGF0ZVxyXG4gICY6ZGlzYWJsZWQge1xyXG4gICAgJjpjaGVja2VkLFxyXG4gICAgJjpub3QoOmNoZWNrZWQpIHtcclxuICAgICAgKyBsYWJlbCB7XHJcbiAgICAgICAgb3BhY2l0eTogMC4yNTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gOmZvY3VzIHN0YXRlXHJcbiAgJjpmb2N1cyxcclxuICAmOmhvdmVyIHtcclxuICAgICsgbGFiZWwge1xyXG4gICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogc2hhZGUoJGJhY2tncm91bmQtY29sb3IsIDI1JSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiLy8vL1xyXG4vLy8gSGlkZWFibGUgRWxlbWVudHNcclxuLy8vIEBncm91cCBDb21wb25lbnQgLSBIaWRlYWJsZSBFbGVtZW50XHJcbi8vLyBAYXV0aG9yIE1TXHJcbi8vLy9cclxuLy8vXHJcbiR0cmFuc2xhdGUtcG9zaXRpb246IChcclxuICAndG9wJzogdHJhbnNsYXRlWSgtMTAwJSksXHJcbiAgJ2JvdHRvbSc6IHRyYW5zbGF0ZVkoMTAwJSksXHJcbiAgJ3JpZ2h0JzogdHJhbnNsYXRlWCgxMDAlKSxcclxuICAnbGVmdCc6IHRyYW5zbGF0ZVgoLTEwMCUpXHJcbik7XHJcblxyXG4vLy8gSGlkZWFibGUgRWxlbWVudFxyXG4vLy8gTWl4aW4gdG8gbWFrZSBhbnkgZWxlbWVudCBoaWRlYWJsZSB1c2luZyBjc3MgdHJhbnNpdGlvbnNcclxuLy8vIGFuZCBhIGxpdHRsZSBiaXQgb2YgSnMuXHJcbi8vLyBAZXhhbXBsZVxyXG4vLy8gICAuZXhhbXBsZV9jbGFzcyB7XHJcbi8vLyAgICAgQGluY2x1ZGUgaGlkZS10bygndG9wJyk7XHJcbi8vLyAgIH1cclxuLy8vIFxyXG4vLy8gICQoJ2JvZHknKS5zY3JvbGwoZnVuY3Rpb24oZSkge1xyXG4vLy8gICAgICB2YXIgdGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0LFxyXG4vLy8gICAgICAgICAgc2VsZiA9ICQodGFyZ2V0KSxcclxuLy8vICAgICAgICAgICRlbGVtZW50ID0gJCgnLmVsZW1lbnQnKSxcclxuLy8vICAgICAgICAgIHNjcm9sbFRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCB0YXJnZXQuc2Nyb2xsVG9wLFxyXG4vLy8gICAgICAgICAgbGFzdFNjcm9sbFRvcCA9IHNlbGYuZGF0YShcImxhc3RTY3JvbGxUb3BcIikgfHwgMCxcclxuLy8vICAgICAgICAgIHNjcm9sbEhlaWdodCA9IHRhcmdldC5zY3JvbGxIZWlnaHQgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQ7XHJcbi8vLyAgICAgIGlmIChzY3JvbGxUb3AgPiBsYXN0U2Nyb2xsVG9wICYmIHNjcm9sbFRvcCA+ICRlbGVtZW50Lm91dGVySGVpZ2h0KCkpIHtcclxuLy8vICAgICAgICAgIC8vIFNjcm9sbGluZyBkb3duIHBhc3QgZWxlbWVudCBzaXplXHJcbi8vLyAgICAgICAgICAkZWxlbWVudC5hZGRDbGFzcygnaGlkZScpO1xyXG4vLy8gICAgICB9IGVsc2Uge1xyXG4vLy8gICAgICAgICAgLy8gU2Nyb2xsaW5nIHVwXHJcbi8vLyAgICAgICAgICAkZWxlbWVudC5yZW1vdmVDbGFzcygnaGlkZScpO1xyXG4vLy8gICAgICB9XHJcbi8vLyAgICAgIC8vc2F2ZXMgdGhlIGN1cnJlbnQgc2Nyb2xsVG9wXHJcbi8vLyAgICAgIHNlbGYuZGF0YShcImxhc3RTY3JvbGxUb3BcIiwgc2Nyb2xsVG9wKTtcclxuLy8vICB9KTtcclxuXHJcbkBtaXhpbiBoaWRlLXRvKCRwb3NpdGlvbikge1xyXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAkbXN1aWYtdHJhbnNpdGlvbi1kdXJhdGlvbiBlYXNlLWluLW91dDtcclxuXHJcbiAgJi5oaWRlIHtcclxuICAgIHRyYW5zZm9ybTogbWFwLWdldCgkdHJhbnNsYXRlLXBvc2l0aW9uLCAkcG9zaXRpb24pO1xyXG4gIH1cclxufSIsIi8vLy9cclxuLy8vIExpc3RzXHJcbi8vLyAtPiBVTCBhbmQgT0wgZWxlbWVudHM/IFllYWgsIHRob3NlIHR3byBnbyBoZXJlIGZvciByZXVzYWJsZSBjb21wb25lbnRzXHJcbi8vLy9cclxuIiwiLy8vL1xyXG4vLy8gTW9kYWwgRGlhbG9nc1xyXG4vLy8gQGdyb3VwIENvbXBvbmVudCAtIE1vZGFsIERpYWxvZ3NcclxuLy8vIEBhdXRob3IgTVNcclxuLy8vL1xyXG5cclxuLy8vXHJcbiRtb2RhbC1iYWNrZHJvcC1iYWNrZ3JvdW5kOiAgICByZ2JhKCMwMDAsIDAuNSkgIWRlZmF1bHQ7XHJcbi8vL1xyXG4kbW9kYWwtY29udGVudC1iYWNrZ3JvdW5kOiAgICAgI2ZmZiAhZGVmYXVsdDtcclxuLy8vXHJcbiRtb2RhbC10cmFuc2l0aW9uLWRlbGF5OiAgICAgICAkbXN1aWYtdHJhbnNpdGlvbi1kdXJhdGlvbiAhZGVmYXVsdDtcclxuXHJcblxyXG4vLy8gQ29tcG9uZW50IERpYWxvZyAtIFxyXG4vLy8gVGhpcyBpcyBhIENTUy1vbmx5IG1vZGFsIHRoYXQgdGFrZXNcclxuLy8vIGFkdmFudGFnZSBvZiA6dGFyZ2V0IGV2ZW50IHRvIHNob3dcclxuLy8vIGEgbW9kYWwtbGlrZSBjb21wb25lbnQgdXNpbmcgSFRNTCBhbmNob3JzLlxyXG4vLy8gQGV4YW1wbGVcclxuLy8vICAgPGEgaHJlZj1cIiNtb2RhbFwiPlNob3cgbW9kYWwgZGlhbG9nPC9hPlxyXG4vLy8gICA8ZGl2IGNsYXNzPVwiYy1tb2RhbFwiIGlkPVwibW9kYWxcIj5cclxuLy8vICAgICA8YSBocmVmPVwiIyFcIiBjbGFzcz1cImMtbW9kYWxfX2Nsb3NlXCI+Q2xvc2U8L2E+XHJcbi8vLyAgICAgPGRpdiBjbGFzcz1cImMtbW9kYWxfX2NvbnRlbnRcIj5Nb2RhbCBkaWFsb2cgY29udGVudCBnb2VzIGhlcmUuPC9kaXY+XHJcbi8vLyAgIDwvZGl2PlxyXG5AbWl4aW4gYy1tb2RhbHtcclxuICAuYy1tb2RhbCB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICByaWdodDogMDtcclxuICAgIGJvdHRvbTogMDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICB6LWluZGV4OiAwO1xyXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gICAgb3BhY2l0eTogMDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICRtb2RhbC1iYWNrZHJvcC1iYWNrZ3JvdW5kO1xyXG4gICAgdHJhbnNpdGlvbjogdmlzaWJpbGl0eSAkbXN1aWYtdHJhbnNpdGlvbi1kdXJhdGlvbiAwcywgb3BhY2l0eSAkbXN1aWYtdHJhbnNpdGlvbi1kdXJhdGlvbiAkbXN1aWYtdHJhbnNpdGlvbi10aW1pbmc7XHJcblxyXG4gICAgQGF0LXJvb3Qge1xyXG4gICAgICAmX19jb250ZW50IHtcclxuICAgICAgICBAaW5jbHVkZSBhbGlnbihib3RoKTtcclxuXHJcbiAgICAgICAgbWFyZ2luLXRvcDogLTIwcHg7XHJcbiAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkbW9kYWwtY29udGVudC1iYWNrZ3JvdW5kO1xyXG4gICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgJG1zdWlmLXRyYW5zaXRpb24tZHVyYXRpb24gJG1zdWlmLXRyYW5zaXRpb24tdGltaW5nICRtb2RhbC10cmFuc2l0aW9uLWRlbGF5LCBtYXJnaW4gJG1zdWlmLXRyYW5zaXRpb24tZHVyYXRpb24gJG1zdWlmLXRyYW5zaXRpb24tdGltaW5nICRtb2RhbC10cmFuc2l0aW9uLWRlbGF5O1xyXG4gICAgICB9XHJcblxyXG4gICAgICAmX19jbG9zZSB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIHRvcDogMjBweDtcclxuICAgICAgICByaWdodDogMjBweDtcclxuICAgICAgICB6LWluZGV4OiAxMDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFNob3cgbW9kYWwgZGlhbG9nIGFuZCBpdCdzIGNvbnRlbnRcclxuICAgICY6dGFyZ2V0LFxyXG4gICAgJi0taXMtdmlzaWJsZSB7XHJcbiAgICAgIHZpc2liaWxpdHk6IHZpc2libGU7XHJcbiAgICAgIG9wYWNpdHk6IDE7XHJcblxyXG4gICAgICAvLyBXb3VsZCBiZSBncmVhdCB0byB1c2UgJyYnIGZvciBjb25zaXN0ZW5jeSwgYnV0IGZvciBzb21lIHJlYXNvbiwgaXQgY29tcGlsZXMgdG8gLm1vZGFsOnRhcmdldF9fY29udGVudFxyXG4gICAgICAuYy1tb2RhbF9fY29udGVudCB7XHJcbiAgICAgICAgICBtYXJnaW4tdG9wOiAwO1xyXG4gICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCIvLy8vXHJcbi8vLyBTdGFyIFJhdGluZ1xyXG4vLy8gQGdyb3VwIENvbXBvbmVudCAtIFN0YXIgUmF0aW5nXHJcbi8vLyBAYXV0aG9yIE1TXHJcbi8vLy9cclxuXHJcbkBpbXBvcnQgXCIuLi9saWJzL3Nhc3N5LWNhc3QvU2Fzc3lDYXN0XCI7XHJcblxyXG4vLy9cclxuJHJhdGluZy1jb2xvci1lbXB0eTogICAgICNjY2MgIWRlZmF1bHQ7XHJcbi8vL1xyXG4kcmF0aW5nLWNvbG9yLWZ1bGw6ICAgICAgZ29sZCAhZGVmYXVsdDtcclxuLy8vXHJcbiRyYXRpbmctdmFsdWVzOiAoXHJcbiAgJzAuMjUnLCAnMC41MCcsICcwLjc1JywgJzEuMDAnLFxyXG4gICcxLjI1JywgJzEuNTAnLCAnMS43NScsICcyLjAwJyxcclxuICAnMi4yNScsICcyLjUwJywgJzIuNzUnLCAnMy4wMCcsXHJcbiAgJzMuMjUnLCAnMy41MCcsICczLjc1JywgJzQuMDAnLFxyXG4gICc0LjI1JywgJzQuNTAnLCAnNC43NScsICc1LjAwJ1xyXG4pO1xyXG4vLy9cclxuJHJhdGluZy1pY29uLW5hbWVzOiAoXHJcbiAgJ3F1YXJ0ZXInOiAnLmljb24tc3Rhci1xdWFydGVyJyxcclxuICAnaGFsZic6ICcuaWNvbi1zdGFyLWhhbGYnLFxyXG4gICd0aHJlZS1xdWFydGVycyc6ICcuaWNvbi1zdGFyLXRocmVlLXF1YXJ0ZXJzJyxcclxuICAnZnVsbCc6ICcuaWNvbi1zdGFyLWZ1bGwnXHJcbik7XHJcblxyXG5cclxuLy8vIFN0YXIgUmF0aW5nIENvbXBvbmVudCAtIFxyXG4vLy8gVGhpcyBpcyBhIENTUy1vbmx5IHN0YXIgcmF0aW5nIGNvbXBvbmVudFxyXG4vLy8gdGhhdCBzaG93cyB0aGUgcHJvcGVyIHJhdGluZyBkZXBlbmRpbmdcclxuLy8vIG9uIGEgZGF0YS1hdHRyaWJ1dGUgdmFsdWUuXHJcbi8vLyBAZXhhbXBsZVxyXG4vLy8gICA8ZGl2IGNsYXNzPVwiYy1yYXRpbmdcIiBkYXRhLXJhdGluZy12YWx1ZT1cIjMuMjVcIj5cclxuLy8vICAgICA8c3Bhbj48L3NwYW4+XHJcbi8vLyAgICAgPHNwYW4+PC9zcGFuPlxyXG4vLy8gICAgIDxzcGFuPjwvc3Bhbj5cclxuLy8vICAgICA8c3Bhbj48L3NwYW4+XHJcbi8vLyAgICAgPHNwYW4+PC9zcGFuPlxyXG4vLy8gICA8L2Rpdj5cclxuQG1peGluIGMtcmF0aW5ne1xyXG4gIC5jLXJhdGluZyB7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcblxyXG4gICAgc3BhbiB7XHJcbiAgICAgIEBleHRlbmQgLm1zLWljb247XHJcbiAgICAgIEBleHRlbmQgI3ttYXAtZ2V0KCRyYXRpbmctaWNvbi1uYW1lcywgJ2Z1bGwnKX07XHJcblxyXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgIG1hcmdpbjogMCAzcHg7XHJcbiAgICAgIGZvbnQtc2l6ZTogdG9lbSgxNnB4KTtcclxuICAgICAgY29sb3I6ICRyYXRpbmctY29sb3ItZW1wdHk7XHJcbiAgICAgIHRyYW5zaXRpb246IGNvbG9yICRtc3VpZi10cmFuc2l0aW9uLWR1cmF0aW9uICRtc3VpZi10cmFuc2l0aW9uLXRpbWluZztcclxuXHJcbiAgICAgICY6Zmlyc3QtY2hpbGQge1xyXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQGVhY2ggJHJhdGluZy12YWx1ZSBpbiAkcmF0aW5nLXZhbHVlcyB7XHJcbiAgICAgIC8vIEdldCB0aGUgbmV4dCBoaWdoZXIgaW50ZWdlci5cclxuICAgICAgJHJhdGluZy12YWx1ZS1jZWlsOiBjZWlsKHRvLW51bWJlcigkcmF0aW5nLXZhbHVlKSk7XHJcblxyXG4gICAgICAmW2RhdGEtcmF0aW5nLXZhbHVlPVwiI3t1bnF1b3RlKCRyYXRpbmctdmFsdWUpfVwiXSB7XHJcbiAgICAgICAgc3BhbjpudGgtY2hpbGQoLW4rI3skcmF0aW5nLXZhbHVlLWNlaWx9KSB7XHJcbiAgICAgICAgICBjb2xvcjogJHJhdGluZy1jb2xvci1mdWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3BhbjpudGgtY2hpbGQoI3skcmF0aW5nLXZhbHVlLWNlaWx9KSB7XHJcbiAgICAgICAgICBAaWYgZXhwbG9kZSgkcmF0aW5nLXZhbHVlLCAnLicpID09ICcuMjUnIHtcclxuICAgICAgICAgICAgQGV4dGVuZCAje21hcC1nZXQoJHJhdGluZy1pY29uLW5hbWVzLCAncXVhcnRlcicpfTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIEBlbHNlIGlmIGV4cGxvZGUoJHJhdGluZy12YWx1ZSwgJy4nKSA9PSAnLjUwJyB7XHJcbiAgICAgICAgICAgIEBleHRlbmQgI3ttYXAtZ2V0KCRyYXRpbmctaWNvbi1uYW1lcywgJ2hhbGYnKX07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBAZWxzZSBpZiBleHBsb2RlKCRyYXRpbmctdmFsdWUsICcuJykgPT0gJy43NScge1xyXG4gICAgICAgICAgICBAZXh0ZW5kICN7bWFwLWdldCgkcmF0aW5nLWljb24tbmFtZXMsICd0aHJlZS1xdWFydGVycycpfTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgICAgei1pbmRleDogMTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAmOmFmdGVyIHtcclxuICAgICAgICAgICAgQGV4dGVuZCAuaWNvbi1zdGFyLWZ1bGw6YmVmb3JlO1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgICAgIHotaW5kZXg6IDA7XHJcbiAgICAgICAgICAgIGNvbG9yOiAkcmF0aW5nLWNvbG9yLWVtcHR5O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCIvLy8gVG9nZ2xlIHN0cmljdCBtb2RlLCBpbiB3aGljaCBzY3JpcHQgd2lsbCB0aHJvdyB3aGVuIG5vdCBhYmxlIHRvIGNhc3QgYSB2YWx1ZVxyXG4vLy8gaW50byBhIGNlcnRhaW4gdHlwZSAobW9zdGx5IGNvbG9yIGFuZCBudW1iZXIpLiBJbiBub24tc3RyaWN0IG1vZGUsIGl0IHdpbGxcclxuLy8vIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZSBmcm9tIHRoZSBnaXZlbiB0eXBlLlxyXG4vLy8gQGFjY2VzcyBwdWJsaWNcclxuLy8vIEB0eXBlIEJvb2xcclxuJHNjLXN0cmljdC1tb2RlOiBmYWxzZSAhZGVmYXVsdDtcclxuXHJcbi8vLyBEZWZhdWx0IHJldHVybiB2YWx1ZSBmb3IgdGhlIGB0by1udW1iZXIoLi4pYCBmdW5jdGlvbiB3aGVuIHJ1bm5pbmcgaW5cclxuLy8vIG5vbi1zdHJpY3QgbW9kZS5cclxuLy8vIEBhY2Nlc3MgcHVibGljXHJcbi8vLyBAdHlwZSBOdW1iZXJcclxuJHNjLW5vbi1zdHJpY3QtZGVmYXVsdC1udW1iZXI6IDAgIWRlZmF1bHQ7XHJcblxyXG4vLy8gRGVmYXVsdCByZXR1cm4gdmFsdWUgZm9yIHRoZSBgdG8tY29sb3IoLi4pYCBmdW5jdGlvbiB3aGVuIHJ1bm5pbmcgaW5cclxuLy8vIG5vbi1zdHJpY3QgbW9kZS5cclxuLy8vIEBhY2Nlc3MgcHVibGljXHJcbi8vLyBAdHlwZSBOdW1iZXJcclxuJHNjLW5vbi1zdHJpY3QtZGVmYXVsdC1jb2xvcjogdHJhbnNwYXJlbnQgIWRlZmF1bHQ7XHJcblxyXG4vLy8gSW50ZXJuYWwgbWFwIGZvciBkeW5hbWljYWxseSBhY2Nlc3NpbmcgZGVmYXVsdCB2YWx1ZXMgZm9yIG5vbi1zdHJpY3QgbW9kZS5cclxuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxyXG4vLy8gQHR5cGUgTWFwXHJcbiRzYy1ub24tc3RyaWN0LWRlZmF1bHRzOiAoXHJcbiAgJ251bWJlcic6ICRzYy1ub24tc3RyaWN0LWRlZmF1bHQtbnVtYmVyLFxyXG4gICdjb2xvcic6ICRzYy1ub24tc3RyaWN0LWRlZmF1bHQtY29sb3IsXHJcbik7XHJcblxyXG4vLy8gSW50ZXJuYWwgY29uc3RhbnRzIG1hcC5cclxuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxyXG4vLy8gQHR5cGUgTWFwXHJcbiRzYy1jb25zdGFudHM6IChcclxuICAnREVDSU1BTF9TUEFDRSc6ICgnMCcsICcxJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICc3JywgJzgnLCAnOScpLFxyXG4gICdIRVhBREVDSU1BTF9TUEFDRSc6ICgnMCcsICcxJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICc3JywgJzgnLCAnOScsICdhJywgJ2InLCAnYycsICdkJywgJ2UnLCAnZicpLFxyXG4gICdDT0xPUl9LRVlXT1JEUyc6ICh0cmFuc3BhcmVudCwgYWxpY2VibHVlLCBhbnRpcXVld2hpdGUsIGFxdWEsIGFxdWFtYXJpbmUsIGF6dXJlLCBiZWlnZSwgYmlzcXVlLCBibGFjaywgYmxhbmNoZWRhbG1vbmQsIGJsdWUsIGJsdWV2aW9sZXQsIGJyb3duLCBidXJseXdvb2QsIGNhZGV0Ymx1ZSwgY2hhcnRyZXVzZSwgY2hvY29sYXRlLCBjb3JhbCwgY29ybmZsb3dlcmJsdWUsIGNvcm5zaWxrLCBjcmltc29uLCBjeWFuLCBkYXJrYmx1ZSwgZGFya2N5YW4sIGRhcmtnb2xkZW5yb2QsIGRhcmtncmF5LCBkYXJrZ3JlZW4sIGRhcmtncmV5LCBkYXJra2hha2ksIGRhcmttYWdlbnRhLCBkYXJrb2xpdmVncmVlbiwgZGFya29yYW5nZSwgZGFya29yY2hpZCwgZGFya3JlZCwgZGFya3NhbG1vbiwgZGFya3NlYWdyZWVuLCBkYXJrc2xhdGVibHVlLCBkYXJrc2xhdGVncmF5LCBkYXJrc2xhdGVncmV5LCBkYXJrdHVycXVvaXNlLCBkYXJrdmlvbGV0LCBkZWVwcGluaywgZGVlcHNreWJsdWUsIGRpbWdyYXksIGRpbWdyZXksIGRvZGdlcmJsdWUsIGZpcmVicmljaywgZmxvcmFsd2hpdGUsIGZvcmVzdGdyZWVuLCBmdWNoc2lhLCBnYWluc2Jvcm8sIGdob3N0d2hpdGUsIGdvbGQsIGdvbGRlbnJvZCwgZ3JheSwgZ3JlZW4sIGdyZWVueWVsbG93LCBncmV5LCBob25leWRldywgaG90cGluaywgaW5kaWFucmVkLCBpbmRpZ28sIGl2b3J5LCBraGFraSwgbGF2ZW5kZXIsIGxhdmVuZGVyYmx1c2gsIGxhd25ncmVlbiwgbGVtb25jaGlmZm9uLCBsaWdodGJsdWUsIGxpZ2h0Y29yYWwsIGxpZ2h0Y3lhbiwgbGlnaHRnb2xkZW5yb2R5ZWxsb3csIGxpZ2h0Z3JheSwgbGlnaHRncmVlbiwgbGlnaHRncmV5LCBsaWdodHBpbmssIGxpZ2h0c2FsbW9uLCBsaWdodHNlYWdyZWVuLCBsaWdodHNreWJsdWUsIGxpZ2h0c2xhdGVncmF5LCBsaWdodHNsYXRlZ3JleSwgbGlnaHRzdGVlbGJsdWUsIGxpZ2h0eWVsbG93LCBsaW1lLCBsaW1lZ3JlZW4sIGxpbmVuLCBtYWdlbnRhLCBtYXJvb24sIG1lZGl1bWFxdWFtYXJpbmUsIG1lZGl1bWJsdWUsIG1lZGl1bW9yY2hpZCwgbWVkaXVtcHVycGxlLCBtZWRpdW1zZWFncmVlbiwgbWVkaXVtc2xhdGVibHVlLCBtZWRpdW1zcHJpbmdncmVlbiwgbWVkaXVtdHVycXVvaXNlLCBtZWRpdW12aW9sZXRyZWQsIG1pZG5pZ2h0Ymx1ZSwgbWludGNyZWFtLCBtaXN0eXJvc2UsIG1vY2Nhc2luLCBuYXZham93aGl0ZSwgbmF2eSwgb2xkbGFjZSwgb2xpdmUsIG9saXZlZHJhYiwgb3JhbmdlLCBvcmFuZ2VyZWQsIG9yY2hpZCwgcGFsZWdvbGRlbnJvZCwgcGFsZWdyZWVuLCBwYWxldHVycXVvaXNlLCBwYWxldmlvbGV0cmVkLCBwYXBheWF3aGlwLCBwZWFjaHB1ZmYsIHBlcnUsIHBpbmssIHBsdW0sIHBvd2RlcmJsdWUsIHB1cnBsZSwgcmViZWNjYXB1cnBsZSwgcmVkLCByb3N5YnJvd24sIHJveWFsYmx1ZSwgc2FkZGxlYnJvd24sIHNhbG1vbiwgc2FuZHlicm93biwgc2VhZ3JlZW4sIHNlYXNoZWxsLCBzaWVubmEsIHNpbHZlciwgc2t5Ymx1ZSwgc2xhdGVibHVlLCBzbGF0ZWdyYXksIHNsYXRlZ3JleSwgc25vdywgc3ByaW5nZ3JlZW4sIHN0ZWVsYmx1ZSwgdGFuLCB0ZWFsLCB0aGlzdGxlLCB0b21hdG8sIHR1cnF1b2lzZSwgdmlvbGV0LCB3aGVhdCwgd2hpdGUsIHdoaXRlc21va2UsIHllbGxvdywgeWVsbG93Z3JlZW4pLFxyXG4gICdTVFJJTkdJRklFRF9DT0xPUl9LRVlXT1JEUyc6ICgndHJhbnNwYXJlbnQnLCAnYWxpY2VibHVlJywgJ2FudGlxdWV3aGl0ZScsICdhcXVhJywgJ2FxdWFtYXJpbmUnLCAnYXp1cmUnLCAnYmVpZ2UnLCAnYmlzcXVlJywgJ2JsYWNrJywgJ2JsYW5jaGVkYWxtb25kJywgJ2JsdWUnLCAnYmx1ZXZpb2xldCcsICdicm93bicsICdidXJseXdvb2QnLCAnY2FkZXRibHVlJywgJ2NoYXJ0cmV1c2UnLCAnY2hvY29sYXRlJywgJ2NvcmFsJywgJ2Nvcm5mbG93ZXJibHVlJywgJ2Nvcm5zaWxrJywgJ2NyaW1zb24nLCAnY3lhbicsICdkYXJrYmx1ZScsICdkYXJrY3lhbicsICdkYXJrZ29sZGVucm9kJywgJ2RhcmtncmF5JywgJ2RhcmtncmVlbicsICdkYXJrZ3JleScsICdkYXJra2hha2knLCAnZGFya21hZ2VudGEnLCAnZGFya29saXZlZ3JlZW4nLCAnZGFya29yYW5nZScsICdkYXJrb3JjaGlkJywgJ2RhcmtyZWQnLCAnZGFya3NhbG1vbicsICdkYXJrc2VhZ3JlZW4nLCAnZGFya3NsYXRlYmx1ZScsICdkYXJrc2xhdGVncmF5JywgJ2RhcmtzbGF0ZWdyZXknLCAnZGFya3R1cnF1b2lzZScsICdkYXJrdmlvbGV0JywgJ2RlZXBwaW5rJywgJ2RlZXBza3libHVlJywgJ2RpbWdyYXknLCAnZGltZ3JleScsICdkb2RnZXJibHVlJywgJ2ZpcmVicmljaycsICdmbG9yYWx3aGl0ZScsICdmb3Jlc3RncmVlbicsICdmdWNoc2lhJywgJ2dhaW5zYm9ybycsICdnaG9zdHdoaXRlJywgJ2dvbGQnLCAnZ29sZGVucm9kJywgJ2dyYXknLCAnZ3JlZW4nLCAnZ3JlZW55ZWxsb3cnLCAnZ3JleScsICdob25leWRldycsICdob3RwaW5rJywgJ2luZGlhbnJlZCcsICdpbmRpZ28nLCAnaXZvcnknLCAna2hha2knLCAnbGF2ZW5kZXInLCAnbGF2ZW5kZXJibHVzaCcsICdsYXduZ3JlZW4nLCAnbGVtb25jaGlmZm9uJywgJ2xpZ2h0Ymx1ZScsICdsaWdodGNvcmFsJywgJ2xpZ2h0Y3lhbicsICdsaWdodGdvbGRlbnJvZHllbGxvdycsICdsaWdodGdyYXknLCAnbGlnaHRncmVlbicsICdsaWdodGdyZXknLCAnbGlnaHRwaW5rJywgJ2xpZ2h0c2FsbW9uJywgJ2xpZ2h0c2VhZ3JlZW4nLCAnbGlnaHRza3libHVlJywgJ2xpZ2h0c2xhdGVncmF5JywgJ2xpZ2h0c2xhdGVncmV5JywgJ2xpZ2h0c3RlZWxibHVlJywgJ2xpZ2h0eWVsbG93JywgJ2xpbWUnLCAnbGltZWdyZWVuJywgJ2xpbmVuJywgJ21hZ2VudGEnLCAnbWFyb29uJywgJ21lZGl1bWFxdWFtYXJpbmUnLCAnbWVkaXVtYmx1ZScsICdtZWRpdW1vcmNoaWQnLCAnbWVkaXVtcHVycGxlJywgJ21lZGl1bXNlYWdyZWVuJywgJ21lZGl1bXNsYXRlYmx1ZScsICdtZWRpdW1zcHJpbmdncmVlbicsICdtZWRpdW10dXJxdW9pc2UnLCAnbWVkaXVtdmlvbGV0cmVkJywgJ21pZG5pZ2h0Ymx1ZScsICdtaW50Y3JlYW0nLCAnbWlzdHlyb3NlJywgJ21vY2Nhc2luJywgJ25hdmFqb3doaXRlJywgJ25hdnknLCAnb2xkbGFjZScsICdvbGl2ZScsICdvbGl2ZWRyYWInLCAnb3JhbmdlJywgJ29yYW5nZXJlZCcsICdvcmNoaWQnLCAncGFsZWdvbGRlbnJvZCcsICdwYWxlZ3JlZW4nLCAncGFsZXR1cnF1b2lzZScsICdwYWxldmlvbGV0cmVkJywgJ3BhcGF5YXdoaXAnLCAncGVhY2hwdWZmJywgJ3BlcnUnLCAncGluaycsICdwbHVtJywgJ3Bvd2RlcmJsdWUnLCAncHVycGxlJywgJ3JlYmVjY2FwdXJwbGUnLCAncmVkJywgJ3Jvc3licm93bicsICdyb3lhbGJsdWUnLCAnc2FkZGxlYnJvd24nLCAnc2FsbW9uJywgJ3NhbmR5YnJvd24nLCAnc2VhZ3JlZW4nLCAnc2Vhc2hlbGwnLCAnc2llbm5hJywgJ3NpbHZlcicsICdza3libHVlJywgJ3NsYXRlYmx1ZScsICdzbGF0ZWdyYXknLCAnc2xhdGVncmV5JywgJ3Nub3cnLCAnc3ByaW5nZ3JlZW4nLCAnc3RlZWxibHVlJywgJ3RhbicsICd0ZWFsJywgJ3RoaXN0bGUnLCAndG9tYXRvJywgJ3R1cnF1b2lzZScsICd2aW9sZXQnLCAnd2hlYXQnLCAnd2hpdGUnLCAnd2hpdGVzbW9rZScsICd5ZWxsb3cnLCAneWVsbG93Z3JlZW4nKSxcclxuICAnVU5JVFMnOiAoJ3B4JywgJ2NtJywgJ21tJywgJyUnLCAnY2gnLCAncGMnLCAnaW4nLCAnZW0nLCAncmVtJywgJ3B0JywgJ2V4JywgJ3Z3JywgJ3ZoJywgJ3ZtaW4nLCAndm1heCcsICdtcycsICdzJywgJ2RlZycsICdyYWQnLCAnZ3JhZCcsICd0dXJuJywgJ0h6JywgJ2tIeicsICdkcGknLCAnZHBjbScsICdkcHB4JyksXHJcbiAgJ1VOSVRfVkFMVUVTJzogKDFweCwgMWNtLCAxbW0sIDElLCAxY2gsIDFwYywgMWluLCAxZW0sIDFyZW0sIDFwdCwgMWV4LCAxdncsIDF2aCwgMXZtaW4sIDF2bWF4LCAxbXMsIDFzLCAxZGVnLCAxcmFkLCAxZ3JhZCwgMXR1cm4sIDFIeiwgMWtIeiwgMWRwaSwgMWRwY20sIDFkcHB4KSxcclxuICAnRkFMU0VZX1ZBTFVFUyc6IChmYWxzZSwgbnVsbCwgJycsIDApLFxyXG4pO1xyXG5cclxuLy8vIENvbnZlcnQgdG8gY29sb3JcclxuLy8vIEBwYXJhbSB7Kn0gJHZhbHVlIC0gdmFsdWUgdG8gY2FzdFxyXG4vLy8gQHJldHVybiB7Y29sb3IgfCBudWxsfVxyXG5AZnVuY3Rpb24gdG8tY29sb3IoJHZhbHVlKSB7XHJcbiAgJHR5cGU6IHR5cGUtb2YoJHZhbHVlKTtcclxuXHJcbiAgLy8gSWYgdGhlIHZhbHVlIGlzIGFscmVhZHkgYSBjb2xvciwgd2UgY2FuIHNhZmVseSByZXR1cm4gaXQuXHJcbiAgQGlmICgkdHlwZSA9PSAnY29sb3InKSB7XHJcbiAgICBAcmV0dXJuICR2YWx1ZTtcclxuICB9XHJcblxyXG4gIC8vIElmIHRoZSB0eXBlIGlzIG5vdCBhIHN0cmluZywgdGhlcmUgaXMgbm8gd2F5IHdlIGNhbiBjb252ZXJ0IGl0IHRvIGEgY29sb3IsXHJcbiAgLy8gc28gd2Ugd2FybiBhbmQgcmV0dXJuIHRoZSBkZWZhdWx0IGNvbG9yIHZhbHVlIChvciB0aHJvdyBpbiBzdHJpY3QgbW9kZSkuXHJcbiAgQGlmICgkdHlwZSAhPSAnc3RyaW5nJykge1xyXG4gICAgQHJldHVybiBfc2MtdGhyb3coJHZhbHVlLCAnY29sb3InKTtcclxuICB9XHJcblxyXG4gICR2YWx1ZS1sb3dlcjogdG8tbG93ZXItY2FzZSgkdmFsdWUpO1xyXG5cclxuICAvLyBJZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBzdHJpbmdpZmllZCBjb2xvciBrZXl3b3JkLCByZXR1cm4gdGhlIGFjY3VyYXRlXHJcbiAgLy8gY29sb3Iga2V5d29yZC5cclxuICAkY29sb3Ita2V5d29yZC1pbmRleDogaW5kZXgoXHJcbiAgICBtYXAtZ2V0KCRzYy1jb25zdGFudHMsICdTVFJJTkdJRklFRF9DT0xPUl9LRVlXT1JEUycpLFxyXG4gICAgJHZhbHVlLWxvd2VyXHJcbiAgKTtcclxuXHJcbiAgQGlmICRjb2xvci1rZXl3b3JkLWluZGV4IHtcclxuICAgIEByZXR1cm4gbnRoKG1hcC1nZXQoJHNjLWNvbnN0YW50cywgJ0NPTE9SX0tFWVdPUkRTJyksICRjb2xvci1rZXl3b3JkLWluZGV4KTtcclxuICB9XHJcblxyXG4gIC8vIElmIHRoZSBjb2xvciBzdGFydHMgd2l0aCBhIGhhc2gsIGFzc3VtZSBpdOKAmXMgYSBoZXhhZGVjaW1hbCBjb2xvciB0cmlwbGV0XHJcbiAgLy8gYW5kIHRyeSB0byBjb252ZXJ0IGl0IHRvIGFuIGFjdHVhbCBjb2xvci5cclxuICBAZWxzZSBpZiAoc3RyLXNsaWNlKCR2YWx1ZS1sb3dlciwgMSwgMSkgPT0gJyMnKSB7XHJcbiAgICBAcmV0dXJuIF9zYy1mcm9tLWhleCgkdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgLy8gSWYgdGhlIGNvbG9yIHN0YXJ0cyB3aXRoIGByZ2JgLCBhc3N1bWUgaXTigJlzIGEgcmdiKC4uKSBmdW5jdGlvbiBjYWxsIGFuZCB0cnlcclxuICAvLyB0byBjb252ZXJ0IGl0IHRvIGFuIGFjdHVhbCBjb2xvci5cclxuICBAZWxzZSBpZiAoc3RyLXNsaWNlKCR2YWx1ZS1sb3dlciwgMSwgMykgPT0gJ3JnYicpIHtcclxuICAgIEByZXR1cm4gX3NjLWZyb20tcmdiKCR2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICAvLyBJZiB0aGUgY29sb3Igc3RhcnRzIHdpdGggYGhzbGAsIGFzc3VtZSBpdOKAmXMgYSBoc2woLi4pIGZ1bmN0aW9uIGNhbGwgYW5kIHRyeVxyXG4gIC8vIHRvIGNvbnZlcnQgaXQgdG8gYW4gYWN0dWFsIGNvbG9yLlxyXG4gIEBlbHNlIGlmIChzdHItc2xpY2UoJHZhbHVlLWxvd2VyLCAxLCAzKSA9PSAnaHNsJykge1xyXG4gICAgQHJldHVybiBfc2MtZnJvbS1oc2woJHZhbHVlKTtcclxuICB9XHJcblxyXG4gIC8vIElmIGV2ZXJ5dGhpbmcgaGFzIGZhaWxlZCwgYXJuIGFuZCByZXR1cm4gdGhlIGRlZmF1bHQgY29sb3IgdmFsdWUgKG9yIHRocm93XHJcbiAgLy8gaW4gc3RyaWN0IG1vZGUpLlxyXG4gIEByZXR1cm4gX3NjLXRocm93KCR2YWx1ZSwgJ2NvbG9yJyk7XHJcbn1cclxuXHJcbi8vLyBDb252ZXJ0IHRvIGJvb2xcclxuLy8vIEBwYXJhbSB7Kn0gJHZhbHVlIC0gdmFsdWUgdG8gY2FzdFxyXG4vLy8gQHJldHVybiB7Qm9vbH1cclxuQGZ1bmN0aW9uIHRvLWJvb2woJHZhbHVlKSB7XHJcbiAgQGlmIGluZGV4KG1hcC1nZXQoJHNjLWNvbnN0YW50cywgJ0ZBTFNFWV9WQUxVRVMnKSwgJHZhbHVlKSB7XHJcbiAgICBAcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgQHJldHVybiB0cnVlO1xyXG59XHJcblxyXG4vLy8gQ29udmVydCB0byBsaXN0XHJcbi8vLyBAcGFyYW0geyp9ICR2YWx1ZSAtIHZhbHVlIHRvIGNhc3RcclxuLy8vIEByZXR1cm4ge0xpc3R9XHJcbkBmdW5jdGlvbiB0by1saXN0KCR2YWx1ZSkge1xyXG4gICR0eXBlOiB0eXBlLW9mKCR2YWx1ZSk7XHJcbiAgXHJcbiAgLy8gSWYgdGhlIHZhbHVlIGlzIGFscmVhZHkgYSBsaXN0LCB3ZSBjYW4gc2FmZWx5IHJldHVybiBpdC5cclxuICBAaWYgKCR0eXBlID09ICdsaXN0Jykge1xyXG4gICAgQHJldHVybiAkdmFsdWU7XHJcbiAgfVxyXG5cclxuICAvLyBJZiB0aGUgdmFsdWUgaXMgYSBtYXAsIHdlIHJldHVybiBhIHppcCBvZiBrZXlzIGFuZCB2YWx1ZXMgKGFrYSBhIGxpc3QtbWFwKS5cclxuICBAaWYgKCR0eXBlID09ICdtYXAnKSB7XHJcbiAgICBAcmV0dXJuIHppcChtYXAta2V5cygkdmFsdWUpLCBtYXAtdmFsdWVzKCR2YWx1ZSkpO1xyXG4gIH1cclxuXHJcbiAgLy8gRWxzZSB3ZSB3cmFwIHRoZSBpdGVtIGluIGEgc2luZ2xlLWl0ZW0gbGlzdC5cclxuICBAcmV0dXJuICgkdmFsdWUsKTtcclxufVxyXG5cclxuLy8vIEhlbHBlciBmdW5jdGlvbiB0byB0aHJvdyB3aGVuIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIG9yIHdhcm4gYW5kIHJldHVyblxyXG4vLy8gZGVmYXVsdCB2YWx1ZSBmb3IgZXhwZWN0ZWQgdHlwZSB3aGVuIHJ1bm5pbmcgaW4gbm9uLXN0cmljdCBtb2RlLlxyXG4vLy8gQHBhcmFtIHsqfSAkdmFsdWVcclxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkZXhwZWN0ZWQtdHlwZVxyXG5AZnVuY3Rpb24gX3NjLXRocm93KCR2YWx1ZSwgJGV4cGVjdGVkLXR5cGUpIHtcclxuICAkcmV0dXJuLXZhbHVlOiBtYXAtZ2V0KCRzYy1ub24tc3RyaWN0LWRlZmF1bHRzLCAkZXhwZWN0ZWQtdHlwZSk7XHJcblxyXG4gIEBpZiAkc2Mtc3RyaWN0LW1vZGUge1xyXG4gICAgQGVycm9yICdDb3VsZCBub3QgY2FzdCBgI3tpbnNwZWN0KCR2YWx1ZSl9YCB0byAjeyRleHBlY3RlZC10eXBlfS4nO1xyXG4gIH0gQGVsc2Uge1xyXG4gICAgQHdhcm4gJ0NvdWxkIG5vdCBjYXN0IGAje2luc3BlY3QoJHZhbHVlKX1gIHRvICN7JGV4cGVjdGVkLXR5cGV9OyByZXR1cm5pbmcgYCN7JHJldHVybi12YWx1ZX1gLic7XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRyZXR1cm4tdmFsdWU7XHJcbn1cclxuXHJcbi8vLyBDb252ZXJ0IHRvIG1hcFxyXG4vLy8gQHBhcmFtIHsqfSAkdmFsdWUgLSB2YWx1ZSB0byBjYXN0XHJcbi8vLyBAcmV0dXJuIHtNYXB9XHJcbkBmdW5jdGlvbiB0by1tYXAoJHZhbHVlKSB7XHJcbiAgJHR5cGU6IHR5cGUtb2YoJHZhbHVlKTtcclxuXHJcbiAgLy8gSWYgdGhlIHZhbHVlIGlzIGFscmVhZHkgYSBtYXAsIHdlIGNhbiBzYWZlbHkgcmV0dXJuIGl0LlxyXG4gIEBpZiAoJHR5cGUgPT0gJ21hcCcpIHtcclxuICAgIEByZXR1cm4gJHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLy8gSWYgdGhlIHR5cGUgaXMgYSBsaXN0LCB3ZSByZXR1cm4gYW4gZW1wdHkgbGlzdCBpZiBpdCBoYXMgYSBubyBpdGVtIG9yIHdlXHJcbiAgLy8gbWFwIGVhY2ggaXRlbSB0byBpdHMgaW5kZXggaW4gdGhlIGxpc3QuXHJcbiAgQGlmICgkdHlwZSA9PSAnbGlzdCcpIHtcclxuICAgICRsZW5ndGg6IGxlbmd0aCgkdmFsdWUpO1xyXG5cclxuICAgIEBpZiAoJGxlbmd0aCA9PSAwKSB7XHJcbiAgICAgIEByZXR1cm4gKCk7XHJcbiAgICB9XHJcblxyXG4gICAgJG1hcDogKCk7XHJcblxyXG4gICAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCAkbGVuZ3RoIHtcclxuICAgICAgJG1hcDogbWFwLW1lcmdlKCRtYXAsICgkaTogbnRoKCR2YWx1ZSwgJGkpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgQHJldHVybiAkbWFwO1xyXG4gIH1cclxuXHJcbiAgQHJldHVybiAoMTogJHZhbHVlKTtcclxufVxyXG5cclxuLy8vIENvbnZlcnQgdG8gbnVsbFxyXG4vLy8gQHBhcmFtIHsqfSAkdmFsdWUgLSB2YWx1ZSB0byBjYXN0XHJcbi8vLyBAcmV0dXJuIHtOdWxsfVxyXG5AZnVuY3Rpb24gdG8tbnVsbCgkdmFsdWUpIHtcclxuICBAcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbi8vLyBDYXN0IGEgdmFsdWUgdG8gYSBudW1iZXIgaWYgcG9zc2libGUgb3IgcmV0dXJuIDBcclxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkdmFsdWUgLSBjb21wbGV0ZSBzb3VyY2VcclxuLy8vIEByZXR1cm4ge051bWJlcn1cclxuQGZ1bmN0aW9uIHRvLW51bWJlcigkdmFsdWUpIHtcclxuICAkdHlwZTogdHlwZS1vZigkdmFsdWUpO1xyXG5cclxuICAvLyBJZiB0aGUgdmFsdWUgaXMgYWxyZWFkeSBhIG51bWJlciwgd2UgY2FuIHNhZmVseSByZXR1cm4gaXQuXHJcbiAgQGlmICgkdHlwZSA9PSAnbnVtYmVyJykge1xyXG4gICAgQHJldHVybiAkdmFsdWU7XHJcbiAgfVxyXG5cclxuICAvLyBJZiB0aGUgdmFsdWUgaXMgdGhlIGB0cnVlYCBib29sZWFuLCB3ZSByZXR1cm4gMS5cclxuICBAaWYgKCR2YWx1ZSA9PSB0cnVlKSAge1xyXG4gICAgQHJldHVybiAxO1xyXG4gIH1cclxuXHJcbiAgLy8gSWYgdGhlIHZhbHVlIGlzIHRoZSBgZmFsc2VgIGJvb2xlYW4sIHdlIHJldHVybiAwLlxyXG4gIEBpZiAoJHZhbHVlID09IGZhbHNlKSB7XHJcbiAgICBAcmV0dXJuIDA7XHJcbiAgfVxyXG5cclxuICAvLyBJZiB0aGUgdHlwZSBpcyBub3QgYSBzdHJpbmcsIHRoZXJlIGlzIG5vIHdheSB3ZSBjYW4gY29udmVydCBpdCB0byBhIG51bWJlcixcclxuICAvLyBzbyB3ZSB3YXJuIGFuZCByZXR1cm4gdGhlIGRlZmF1bHQgbnVtYmVyIHZhbHVlIChvciB0aHJvdyBpbiBzdHJpY3QgbW9kZSkuXHJcbiAgQGlmICgkdHlwZSAhPSAnc3RyaW5nJykge1xyXG4gICAgQHJldHVybiBfc2MtdGhyb3coJHZhbHVlLCAnbnVtYmVyJyk7XHJcbiAgfVxyXG5cclxuICAvLyBBdCB0aGlzIHBvaW50IHdlIGhhdmUgZGlzY2FyZGVkIGFsbCB0aGUgZWRnZSBjYXNlcyBzbyB3ZSBjYW4gc3RhcnQgdHJ5aW5nXHJcbiAgLy8gdG8gY2FzdCB0aGUgdmFsdWUgaW50byBhIG51bWJlci5cclxuICAkcG9pbnRlcjogMTtcclxuICAkcmVzdWx0OiAwO1xyXG4gICRmaXJzdC1jaGFyYWN0ZXI6IHN0ci1zbGljZSgkdmFsdWUsICRwb2ludGVyLCAkcG9pbnRlcik7XHJcbiAgJGFsbG93ZWQtZmlyc3QtY2hhcmFjdGVyOiBqb2luKCgnLScsICcuJyksIG1hcC1nZXQoJHNjLWNvbnN0YW50cywgJ0RFQ0lNQUxfU1BBQ0UnKSk7XHJcblxyXG4gIC8vIFdlIHBlcmZvcm0gYW4gZWFybHkgY2hlY2sgZm9yIGVycm9ycy4gSWYgdmFsdWUgc3RhcnRzIHdpdGggbmVpdGhlciBhIG51bWJlclxyXG4gIC8vIG5vciBhIG1pbnVzIHNpZ24sIGl0IGNhbm5vdCBiZSBjYXN0ZWQgdG8gYSBudW1iZXIuIFRoZXJlZm9yZSB3ZSB3YXJuIGFuZFxyXG4gIC8vIHJldHVybiB0aGUgZGVmYXVsdCBudW1iZXIgdmFsdWUgKG9yIHRocm93IGluIHN0cmljdCBtb2RlKS5cclxuICBAaWYgbm90IGluZGV4KCRhbGxvd2VkLWZpcnN0LWNoYXJhY3RlciwgJGZpcnN0LWNoYXJhY3Rlcikge1xyXG4gICAgQHJldHVybiBfc2MtdGhyb3coJHZhbHVlLCAnbnVtYmVyJyk7XHJcbiAgfVxyXG5cclxuICAvLyBJbiBjYXNlIHRoZSB2YWx1ZSBzdGFydHMgd2l0aCBhIGRvdCwgd2UgYXNzdW1lIGl0IGlzIGEgZmxvYXQgYW5kIHBhZCBpdFxyXG4gIC8vIHdpdGggYSB6ZXJvLlxyXG4gIEBpZiAoJGZpcnN0LWNoYXJhY3RlciA9PSAnLicpIHtcclxuICAgICR2YWx1ZTogJzAnICsgJHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLy8gV2UgZmluZCB0aGUgaW50ZWdlciBwYXJ0IG9mIHRoZSB2YWx1ZS5cclxuICAkZmluZC1pbnRlZ2VyOiBfc2MtZmluZC1pbnRlZ2VyKCR2YWx1ZSwgJHBvaW50ZXIpO1xyXG4gICRwb2ludGVyOiBudGgoJGZpbmQtaW50ZWdlciwgMSk7XHJcbiAgJHJlc3VsdDogIG50aCgkZmluZC1pbnRlZ2VyLCAyKTtcclxuXHJcbiAgLy8gSWYgdGhlcmUgc3RpbGwgaXMgYSBkb3QsIGl0IG1lYW5zIHdlIGhhdmUgdG8gY2hlY2sgZm9yIHRoZSBkaWdpdHMgcGFydCBvZlxyXG4gIC8vIHRoZSB2YWx1ZS5cclxuICBAaWYgKHN0ci1zbGljZSgkdmFsdWUsICRwb2ludGVyLCAkcG9pbnRlcikgPT0gJy4nKSB7XHJcbiAgICAkZmluZC1kaWdpdHM6IF9zYy1maW5kLWRpZ2l0cygkdmFsdWUsICRwb2ludGVyKTtcclxuICAgICRwb2ludGVyOiBudGgoJGZpbmQtZGlnaXRzLCAxKTtcclxuICAgICRkaWdpdHM6ICBudGgoJGZpbmQtZGlnaXRzLCAyKTtcclxuICAgICRyZXN1bHQ6ICgkcmVzdWx0ICsgJGRpZ2l0cyk7XHJcbiAgfVxyXG5cclxuICAvLyBJZiB0aGUgZmlyc3QgY2hhcmFjdGVyIGlzIGEgbWludXMgc3ltYm9sLCBpdCBtZWFucyB0aGUgbnVtYmVyIGlzIG5lZ2F0aXZlXHJcbiAgLy8gc28gd2UgY2FuIG11bHRpcGx5IGl0IHBlciAtMS5cclxuICBAaWYgKCRmaXJzdC1jaGFyYWN0ZXIgPT0gJy0nKSB7XHJcbiAgICAkcmVzdWx0OiAoJHJlc3VsdCAqIC0xKTtcclxuICB9XHJcblxyXG4gIC8vIElmIHdlIGFyZSBzdGlsbCBub3QgZG9uZSB3aXRoIHRoZSBldmFsdWF0aW9uLCBpdCBtZWFucyB0aGVyZSBjb3VsZCBiZSBhIENTU1xyXG4gIC8vIHVuaXQsIHNvIHdlIGNoZWNrIGZvciBpdC5cclxuICBAaWYgKCRwb2ludGVyIDw9IHN0ci1sZW5ndGgoJHZhbHVlKSkge1xyXG4gICAgJHJlc3VsdDogX3NjLXVuaXQoJHJlc3VsdCwgc3RyLXNsaWNlKCR2YWx1ZSwgJHBvaW50ZXIpKTtcclxuICB9XHJcblxyXG4gIEByZXR1cm4gJHJlc3VsdDtcclxufVxyXG5cclxuLy8vIENvbnZlcnQgdG8gc3RyaW5nXHJcbi8vLyBAcGFyYW0geyp9ICR2YWx1ZSAtIHZhbHVlIHRvIGNhc3RcclxuLy8vIEByZXR1cm4ge1N0cmluZ31cclxuQGZ1bmN0aW9uIHRvLXN0cmluZygkdmFsdWUpIHtcclxuICAkdHlwZTogdHlwZS1vZigkdmFsdWUpO1xyXG5cclxuICAvLyBJZiB0aGUgdmFsdWUgaXMgYWxyZWFkeSBhIHN0cmluZywgd2UgY2FuIHNhZmVseSByZXR1cm4gaXQuXHJcbiAgQGlmICgkdHlwZSA9PSAnc3RyaW5nJykge1xyXG4gICAgQHJldHVybiAkdmFsdWU7XHJcbiAgfVxyXG5cclxuICBAaWYgdHlwZS1vZigkdmFsdWUpID09ICdjb2xvcicge1xyXG4gICAgQHdhcm4gJ0Jld2FyZSEgU2FzcyBkb2VzIHNvbWUgY29sb3IgY29udmVyc2lvbi4gVGhlIHJlc3VsdGluZyBzdHJpbmcgbWF5IGJlIGRpZmZlcmVudCBmcm9tIHRoZSBjb2xvciBpbnB1dC4nO1xyXG4gIH1cclxuXHJcbiAgQHJldHVybiBpbnNwZWN0KCR2YWx1ZSk7XHJcbn1cclxuXHJcbi8vLyBDYXN0IGEgc3RyaW5nIGludG8gYSBoZXhhZGVjaW1hbCBjb2xvclxyXG4vLy8gQGFjY2VzcyBwcml2YXRlXHJcbi8vLyBAcGFyYW0ge3N0cmluZ30gJHN0cmluZyAtIHN0cmluZ1xyXG4vLy8gQHJldHVybiB7Q29sb3IgfCBTdHJpbmd9IC0gc3RyaW5nIG9yIGhleCBjb2xvciBkZXBlbmRpbmcgb24gdGhlIG1hdGNoXHJcbi8vLyBAcmVxdWlyZSB7ZnVuY3Rpb259IF9oZXgtdG8tZGVjXHJcbkBmdW5jdGlvbiBfc2MtZnJvbS1oZXgoJHN0cmluZykge1xyXG4gICRzdHJpbmc6IHRvLWxvd2VyLWNhc2UoJHN0cmluZyk7XHJcbiAgJHI6ICcnOyBcclxuICAkZzogJyc7XHJcbiAgJGI6ICcnO1xyXG4gICRoZXg6IG1hcC1nZXQoJHNjLWNvbnN0YW50cywgJ0hFWEFERUNJTUFMX1NQQUNFJyk7XHJcbiAgJGxlbmd0aDogc3RyLWxlbmd0aCgkc3RyaW5nKTtcclxuICAkbWF4OiBpZigkbGVuZ3RoID09IDQsIDEsIDIpO1xyXG5cclxuICAvLyBJZiB0aGUgbGVuZ3RoIG9mIHRoZSB2YWx1ZSBpcyBuZWl0aGVyIDQsIG5vciA3LCBpdCBjYW5ub3QgYmUgYSB2YWxpZFxyXG4gIC8vIGhleGFkZWNpbWFsIHRyaXBsZXQsIHRoZXJlZm9yZSB3ZSB3YXJuIGFuZCByZXR1cm4gdGhlIGRlZmF1bHQgY29sb3IgdmFsdWVcclxuICAvLyAob3IgdGhyb3cgaW4gc3RyaWN0IG1vZGUpLlxyXG4gIEBpZiAoJGxlbmd0aCAhPSA0IGFuZCAkbGVuZ3RoICE9IDcpIHtcclxuICAgIEByZXR1cm4gX3NjLXRocm93KCRzdHJpbmcsICdjb2xvcicpO1xyXG4gIH1cclxuXHJcbiAgLy8gTG9vcCB0aHJvdWdoIHRoZSBjaGFyYWN0ZXJzIGZyb20gdGhlIHZhbHVlLCBzdGFydGluZyBmcm9tIHRoZSBzZWNvbmQgb25lXHJcbiAgLy8gdG8gb21pdCB0aGUgaW5pdGlhbCBoYXNoLlxyXG4gIEBmb3IgJGkgZnJvbSAyIHRocm91Z2ggJGxlbmd0aCB7XHJcbiAgICAkYzogc3RyLXNsaWNlKCRzdHJpbmcsICRpLCAkaSk7XHJcblxyXG4gICAgLy8gSWYgdGhlIGNoYXJhY3RlciBpcyBub3QgcGFydCBvZiB0aGUgaGV4YWRlY2ltYWwgc3BhY2UsIHRoZSBjb2xvciBjYW5ub3RcclxuICAgIC8vIGJlIGEgdmFsaWQgaGV4YWRlY2ltYWwgdHJpcGxldCwgdGhlcmVmb3JlIHdlIHdhcm4gYW5kIHJldHVybiB0aGUgZGVmYXVsdFxyXG4gICAgLy8gY29sb3IgdmFsdWUgKG9yIHRocm93IGluIHN0cmljdCBtb2RlKS5cclxuICAgIEBpZiBub3QgaW5kZXgoJGhleCwgJGMpIHtcclxuICAgICAgQHJldHVybiBfc2MtdGhyb3coJHN0cmluZywgJ2NvbG9yJyk7XHJcbiAgICB9XHJcblxyXG4gICAgQGlmIChzdHItbGVuZ3RoKCRyKSA8ICRtYXgpIHtcclxuICAgICAgJHI6ICgkciArICRjKTtcclxuICAgIH0gQGVsc2UgaWYgKHN0ci1sZW5ndGgoJGcpIDwgJG1heCkge1xyXG4gICAgICAkZzogKCRnICsgJGMpO1xyXG4gICAgfSBAZWxzZSBpZiAoc3RyLWxlbmd0aCgkYikgPCAkbWF4KSB7XHJcbiAgICAgICRiOiAoJGIgKyAkYyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBJZiB0aGUgdHJpcGxldCBpcyBhIHNob3J0IG9uZSwgZHVwbGljYXRlZCBlYWNoIGZvdW5kIHZhbHVkIHRvIGNvbXBvc2UgYVxyXG4gIC8vIGxvbmcgdmVyc2lvbiwgbmVjZXNzYXJ5IGZvciB0aGUgX3NjLWhleC10by1kZWMoLi4pIGNhbGxzLlxyXG4gIEBpZiAkbGVuZ3RoID09IDQge1xyXG4gICAgJHI6ICRyICsgJHI7XHJcbiAgICAkZzogJGcgKyAkZztcclxuICAgICRiOiAkYiArICRiO1xyXG4gIH1cclxuXHJcbiAgQHJldHVybiByZ2IoX3NjLWhleC10by1kZWMoJHIpLCBfc2MtaGV4LXRvLWRlYygkZyksIF9zYy1oZXgtdG8tZGVjKCRiKSk7XHJcbn1cclxuXHJcbi8vLyBDYXN0IGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgaHNsKC4uKSBjYWxsIGludG8gYSBjb2xvclxyXG4vLy8gQGFjY2VzcyBwcml2YXRlXHJcbi8vLyBAcGFyYW0ge3N0cmluZ30gJHN0cmluZyAtIHN0cmluZ1xyXG4vLy8gQHJldHVybiB7Q29sb3J9IC0gQ29sb3JcclxuQGZ1bmN0aW9uIF9zYy1mcm9tLWhzbCgkdmFsdWUpIHtcclxuICAkdmFsdWU6IHRvLWxvd2VyLWNhc2UoJHZhbHVlKTtcclxuICAkY2hhbm5lbHM6ICgnaCc6ICcnLCAncyc6ICcnLCAnbCc6ICcnLCAnYSc6ICcnKTtcclxuICAkY2hhbm5lbC1rZXlzOiBtYXAta2V5cygkY2hhbm5lbHMpO1xyXG4gICRjdXJyZW50LWNoYW5uZWw6IG50aCgkY2hhbm5lbC1rZXlzLCAxKTtcclxuICAkZGlzY2FyZGVkLWNoYXJhY3RlcnM6IGpvaW4oJGNoYW5uZWwta2V5cywgKCcgJywgJygnLCAnKScpKTtcclxuXHJcbiAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCBzdHItbGVuZ3RoKCR2YWx1ZSkge1xyXG4gICAgJGNoYXJhY3Rlcjogc3RyLXNsaWNlKCR2YWx1ZSwgJGksICRpKTtcclxuICBcclxuICAgIC8vIElmIHRoZSBjaGFyYWN0ZXIgaXMgbmVpdGhlciB0aGUgcGFydCBvZiB0aGUgZnVuY3Rpb24gbmFtZSwgbm9yIGEgc3BhY2Ugb3JcclxuICAgIC8vIGEgcGFyZW50aGVzZSwgd2UgcHJvY2VlZCBmdXJ0aGVyLlxyXG4gICAgQGlmIG5vdCBpbmRleCgkZGlzY2FyZGVkLWNoYXJhY3RlcnMsICRjaGFyYWN0ZXIpIHtcclxuICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgY2hhcmFjdGVyIGlzIGEgY29tbWEsIGl0IG1lYW5zIHdlIGNoYW5nZSB0aGUgY3VycmVudFxyXG4gICAgICAvLyBjaGFubmVsIHRvIHRoZSBuZXh0IG9uZS5cclxuICAgICAgQGlmICgkY2hhcmFjdGVyID09ICcsJykge1xyXG4gICAgICAgICRjdXJyZW50LWNoYW5uZWwtaW5kZXg6IGluZGV4KCRjaGFubmVsLWtleXMsICRjdXJyZW50LWNoYW5uZWwpO1xyXG4gICAgICAgICRjdXJyZW50LWNoYW5uZWw6IG50aCgkY2hhbm5lbC1rZXlzLCAkY3VycmVudC1jaGFubmVsLWluZGV4ICsgMSk7XHJcbiAgICAgIH1cclxuICBcclxuICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgY2hhcmFjdGVyIGlzIG5vdCBhIGNvbW1hLCBpdCBtZWFucyBpdCBpcyBwYXJ0IG9mIHRoZVxyXG4gICAgICAvLyB2YWx1ZSBmb3IgdGhlIGN1cnJlbnQgY2hhbm5lbCBhbmQgdGhlcmVmb3JlIHNob3VsZCBiZSBzYXZlZC5cclxuICAgICAgQGVsc2Uge1xyXG4gICAgICAgICRjdXJyZW50LWNoYW5uZWwtdmFsdWU6IG1hcC1nZXQoJGNoYW5uZWxzLCAkY3VycmVudC1jaGFubmVsKTtcclxuICAgICAgICAkY2hhbm5lbHM6IG1hcC1tZXJnZSgkY2hhbm5lbHMsICgkY3VycmVudC1jaGFubmVsOiAkY3VycmVudC1jaGFubmVsLXZhbHVlICsgJGNoYXJhY3RlcikpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gICRodWU6IHRvLW51bWJlcihtYXAtZ2V0KCRjaGFubmVscywgJ2gnKSk7XHJcbiAgJHNhdHVyYXRpb246IHRvLW51bWJlcihtYXAtZ2V0KCRjaGFubmVscywgJ3MnKSk7XHJcbiAgJGxpZ2h0bmVzczogdG8tbnVtYmVyKG1hcC1nZXQoJGNoYW5uZWxzLCAnbCcpKTtcclxuICAkYWxwaGE6IG1hcC1nZXQoJGNoYW5uZWxzLCAnYScpO1xyXG5cclxuICAvLyBJZiB0aGVyZSBpcyBubyBhbHBoYSBjaGFubmVsIHJlZ2lzdGVyZWQsIHJldHVybiBhIGNsYXNzaWMgaHNsKC4uKSBjYWxsLiAgXHJcbiAgQGlmICgkYWxwaGEgPT0gJycpIHtcclxuICAgIEByZXR1cm4gaHNsKCRodWUsICRzYXR1cmF0aW9uLCAkbGlnaHRuZXNzKTtcclxuICB9XHJcbiAgXHJcbiAgLy8gSWYgdGhlcmUgaXMgYSByZWdpc3RlcmVkIGFscGhhIGNoYW5uZWwsIHJldHVybiBhIGhzbGEoLi4pIGNhbGwuICBcclxuICBAcmV0dXJuIGhzbGEoJGh1ZSwgJHNhdHVyYXRpb24sICRsaWdodG5lc3MsIHRvLW51bWJlcigkYWxwaGEpKTtcclxufVxyXG5cclxuLy8vIENhc3QgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSByZ2IoLi4pIGNhbGwgaW50byBhIGNvbG9yXHJcbi8vLyBAYWNjZXNzIHByaXZhdGVcclxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkc3RyaW5nIC0gc3RyaW5nXHJcbi8vLyBAcmV0dXJuIHtDb2xvcn0gLSBDb2xvclxyXG5AZnVuY3Rpb24gX3NjLWZyb20tcmdiKCR2YWx1ZSkge1xyXG4gICR2YWx1ZTogdG8tbG93ZXItY2FzZSgkdmFsdWUpO1xyXG4gICRjaGFubmVsczogKCdyJzogJycsICdnJzogJycsICdiJzogJycsICdhJzogJycpO1xyXG4gICRjaGFubmVsLWtleXM6IG1hcC1rZXlzKCRjaGFubmVscyk7XHJcbiAgJGN1cnJlbnQtY2hhbm5lbDogbnRoKCRjaGFubmVsLWtleXMsIDEpO1xyXG4gICRkaXNjYXJkZWQtY2hhcmFjdGVyczogam9pbigkY2hhbm5lbC1rZXlzLCAoJyAnLCAnKCcsICcpJykpO1xyXG5cclxuICBAZm9yICRpIGZyb20gMSB0aHJvdWdoIHN0ci1sZW5ndGgoJHZhbHVlKSB7XHJcbiAgICAkY2hhcmFjdGVyOiBzdHItc2xpY2UoJHZhbHVlLCAkaSwgJGkpO1xyXG5cclxuICAgIC8vIElmIHRoZSBjaGFyYWN0ZXIgaXMgbmVpdGhlciB0aGUgcGFydCBvZiB0aGUgZnVuY3Rpb24gbmFtZSwgbm9yIGEgc3BhY2Ugb3JcclxuICAgIC8vIGEgcGFyZW50aGVzZSwgd2UgcHJvY2VlZCBmdXJ0aGVyLlxyXG4gICAgQGlmIG5vdCBpbmRleCgkZGlzY2FyZGVkLWNoYXJhY3RlcnMsICRjaGFyYWN0ZXIpIHtcclxuICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgY2hhcmFjdGVyIGlzIGEgY29tbWEsIGl0IG1lYW5zIHdlIGNoYW5nZSB0aGUgY3VycmVudFxyXG4gICAgICAvLyBjaGFubmVsIHRvIHRoZSBuZXh0IG9uZS5cclxuICAgICAgQGlmICgkY2hhcmFjdGVyID09ICcsJykge1xyXG4gICAgICAgICRjdXJyZW50LWNoYW5uZWwtaW5kZXg6IGluZGV4KCRjaGFubmVsLWtleXMsICRjdXJyZW50LWNoYW5uZWwpO1xyXG4gICAgICAgICRjdXJyZW50LWNoYW5uZWw6IG50aCgkY2hhbm5lbC1rZXlzLCAkY3VycmVudC1jaGFubmVsLWluZGV4ICsgMSk7XHJcbiAgICAgIH1cclxuICBcclxuICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgY2hhcmFjdGVyIGlzIG5vdCBhIGNvbW1hLCBpdCBtZWFucyBpdCBpcyBwYXJ0IG9mIHRoZVxyXG4gICAgICAvLyB2YWx1ZSBmb3IgdGhlIGN1cnJlbnQgY2hhbm5lbCBhbmQgdGhlcmVmb3JlIHNob3VsZCBiZSBzYXZlZC5cclxuICAgICAgQGVsc2Uge1xyXG4gICAgICAgICRjdXJyZW50LWNoYW5uZWwtdmFsdWU6IG1hcC1nZXQoJGNoYW5uZWxzLCAkY3VycmVudC1jaGFubmVsKTtcclxuICAgICAgICAkY2hhbm5lbHM6IG1hcC1tZXJnZSgkY2hhbm5lbHMsICgkY3VycmVudC1jaGFubmVsOiAkY3VycmVudC1jaGFubmVsLXZhbHVlICsgJGNoYXJhY3RlcikpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gICRyZWQ6IHRvLW51bWJlcihtYXAtZ2V0KCRjaGFubmVscywgJ3InKSk7XHJcbiAgJGdyZWVuOiB0by1udW1iZXIobWFwLWdldCgkY2hhbm5lbHMsICdnJykpO1xyXG4gICRibHVlOiB0by1udW1iZXIobWFwLWdldCgkY2hhbm5lbHMsICdiJykpO1xyXG4gICRhbHBoYTogbWFwLWdldCgkY2hhbm5lbHMsICdhJyk7XHJcbiAgXHJcbiAgLy8gSWYgdGhlcmUgaXMgbm8gYWxwaGEgY2hhbm5lbCByZWdpc3RlcmVkLCByZXR1cm4gYSBjbGFzc2ljIGhzbCguLikgY2FsbC4gIFxyXG4gIEBpZiAoJGFscGhhID09ICcnKSB7XHJcbiAgICBAcmV0dXJuIHJnYigkcmVkLCAkZ3JlZW4sICRibHVlKTtcclxuICB9XHJcblxyXG4gIC8vIElmIHRoZXJlIGlzIGEgcmVnaXN0ZXJlZCBhbHBoYSBjaGFubmVsLCByZXR1cm4gYSByZ2JhKC4uKSBjYWxsLiAgICBcclxuICBAcmV0dXJuIHJnYmEoJHJlZCwgJGdyZWVuLCAkYmx1ZSwgdG8tbnVtYmVyKCRhbHBoYSkpO1xyXG59XHJcblxyXG4vLy8gQ29udmVydCBhbiBoZXhhZGVjaW1hbCBudW1iZXIgdG8gYSBkZWNpbWFsIG51bWJlclxyXG4vLy8gQGFjY2VzcyBwcml2YXRlXHJcbi8vLyBAcGFyYW0ge1N0cmluZ30gJHN0cmluZyAtIGhleGFkZWNpbWFsIHZhbHVlXHJcbi8vLyBAcmV0dXJuIHtOdW1iZXJ9IC0gZGVjaW1hbCBudW1iZXJcclxuQGZ1bmN0aW9uIF9zYy1oZXgtdG8tZGVjKCRzdHJpbmcpIHtcclxuICAkc3RyaW5nOiB0by1sb3dlci1jYXNlKCRzdHJpbmcpO1xyXG4gICRsZW5ndGg6IHN0ci1sZW5ndGgoJHN0cmluZyk7XHJcbiAgJGhleDogbWFwLWdldCgkc2MtY29uc3RhbnRzLCAnSEVYQURFQ0lNQUxfU1BBQ0UnKTtcclxuXHJcbiAgJGRlY2ltYWw6IDA7XHJcblxyXG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggJGxlbmd0aCB7XHJcbiAgICAkZmFjdG9yOiAxICsgKGxlbmd0aCgkaGV4KSAqICgkbGVuZ3RoIC0gJGkpKTtcclxuICAgICRpbmRleDogaW5kZXgoJGhleCwgc3RyLXNsaWNlKCRzdHJpbmcsICRpLCAkaSkpO1xyXG4gICAgJGRlY2ltYWw6ICRkZWNpbWFsICsgJGZhY3RvciAqICgkaW5kZXggLSAxKTtcclxuICB9XHJcblxyXG4gIEByZXR1cm4gJGRlY2ltYWw7XHJcbn1cclxuXHJcbi8vLyBGaW5kaW5nIHRoZSBkaWdpdHMgcGFydCBvZiBhIHN0cmluZ2lmaWVkIG51bWJlclxyXG4vLy8gQGFjY2VzcyBwcml2YXRlXHJcbi8vLyBAcGFyYW0ge3N0cmluZ30gJHNvdXJjZSAtIHN0cmluZyBzb3VyY2VcclxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkcG9pbnRlciAtIGN1cnJlbnQgcG9pbnRlclxyXG4vLy8gQHJldHVybiB7TGlzdH0gLSBuZXcgcG9pbnRlciwgcGFyc2VkIG51bWJlclxyXG5AZnVuY3Rpb24gX3NjLWZpbmQtZGlnaXRzKCRzb3VyY2UsICRwb2ludGVyKSB7XHJcbiAgJHNvdXJjZTogdG8tbG93ZXItY2FzZSgkc291cmNlKTtcclxuICAkbGVuZ3RoOiBzdHItbGVuZ3RoKCRzb3VyY2UpO1xyXG4gICRudW1iZXJzOiBtYXAtZ2V0KCRzYy1jb25zdGFudHMsICdERUNJTUFMX1NQQUNFJyk7XHJcbiAgJHJlc3VsdDogMDtcclxuICAkcnVuczogMTtcclxuXHJcbiAgQHdoaWxlICgkcG9pbnRlciA8PSAkbGVuZ3RoKSB7XHJcbiAgICAkdG9rZW46IHN0ci1zbGljZSgkc291cmNlLCAkcG9pbnRlciwgJHBvaW50ZXIpO1xyXG4gICAgJGluZGV4OiBpbmRleCgkbnVtYmVycywgJHRva2VuKTtcclxuXHJcbiAgICBAaWYgKCR0b2tlbiA9PSAnLicpIHtcclxuICAgICAgLy8gQGNvbnRpbnVlO1xyXG4gICAgfSBAZWxzZSBpZiAoJGluZGV4IGFuZCAkaW5kZXggPiAwKSB7XHJcbiAgICAgICRydW5zOiAoJHJ1bnMgKiAxMCk7XHJcbiAgICAgICRyZXN1bHQ6ICgkcmVzdWx0ICogMTApICsgKCRpbmRleCAtIDEpO1xyXG4gICAgfSBAZWxzZSB7XHJcbiAgICAgIEByZXR1cm4gJHBvaW50ZXIsICgkcmVzdWx0IC8gJHJ1bnMpO1xyXG4gICAgfVxyXG5cclxuICAgICRwb2ludGVyOiAoJHBvaW50ZXIgKyAxKTtcclxuICB9XHJcblxyXG4gIEByZXR1cm4gJHBvaW50ZXIsICgkcmVzdWx0IC8gJHJ1bnMpO1xyXG59XHJcblxyXG4vLy8gRmluZGluZyB0aGUgaW50ZWdlciBwYXJ0IG9mIGEgc3RyaW5naWZpZWQgbnVtYmVyXHJcbi8vLyBAYWNjZXNzIHByaXZhdGVcclxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkc291cmNlICAtIHN0cmluZyBzb3VyY2VcclxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkcG9pbnRlciAtIGN1cnJlbnQgcG9pbnRlclxyXG4vLy8gQHJldHVybiB7TGlzdH0gbmV3IHBvaW50ZXIsIHBhcnNlZCBudW1iZXJcclxuQGZ1bmN0aW9uIF9zYy1maW5kLWludGVnZXIoJHNvdXJjZSwgJHBvaW50ZXIpIHtcclxuICAkc291cmNlOiB0by1sb3dlci1jYXNlKCRzb3VyY2UpO1xyXG4gICRsZW5ndGg6IHN0ci1sZW5ndGgoJHNvdXJjZSk7XHJcbiAgJG51bWJlcnM6IG1hcC1nZXQoJHNjLWNvbnN0YW50cywgJ0RFQ0lNQUxfU1BBQ0UnKTtcclxuICAkcmVzdWx0OiAwO1xyXG5cclxuICBAd2hpbGUgKCRwb2ludGVyIDw9ICRsZW5ndGgpIHtcclxuICAgICR0b2tlbjogc3RyLXNsaWNlKCRzb3VyY2UsICRwb2ludGVyLCAkcG9pbnRlcik7XHJcbiAgICAkaW5kZXg6IGluZGV4KCRudW1iZXJzLCAkdG9rZW4pO1xyXG5cclxuICAgIEBpZiAoJHRva2VuID09ICctJykge1xyXG4gICAgICAvLyBAY29udGludWU7XHJcbiAgICB9IEBlbHNlIGlmICRpbmRleCB7XHJcbiAgICAgICRyZXN1bHQ6ICgkcmVzdWx0ICogMTApICsgKCRpbmRleCAtIDEpO1xyXG4gICAgfSBAZWxzZSB7XHJcbiAgICAgIEByZXR1cm4gJHBvaW50ZXIsICRyZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgJHBvaW50ZXI6ICgkcG9pbnRlciArIDEpO1xyXG4gIH1cclxuXHJcbiAgQHJldHVybiAkcG9pbnRlciwgJHJlc3VsdDtcclxufVxyXG5cclxuLy8vIFBvd2VyIGZ1bmN0aW9uXHJcbi8vLyBAYWNjZXNzIHByaXZhdGVcclxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkeCAtIG51bWJlclxyXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRuIC0gcG93ZXJcclxuLy8vIEByZXR1cm4ge051bWJlcn0gJHggXiAkblxyXG5AZnVuY3Rpb24gX3NjLXBvdygkeCwgJG4pIHtcclxuICAkcmV0OiAxO1xyXG5cclxuICBAaWYgJG4gPj0gMCB7XHJcbiAgICBAZm9yICRpIGZyb20gMSB0aHJvdWdoICRuIHtcclxuICAgICAgJHJldDogKCRyZXQgKiAkeCk7XHJcbiAgICB9XHJcbiAgfSBAZWxzZSB7XHJcbiAgICBAZm9yICRpIGZyb20gJG4gdG8gMCB7XHJcbiAgICAgICRyZXQ6ICgkcmV0IC8gJHgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQHJldHVybiAkcmV0O1xyXG59XHJcblxyXG4vLy8gVHJpZXMgdG8gZmluZCBhIHVuaXQgdGhhdCB3b3VsZCBtYXRjaCBhIENTUyBsZW5ndGhcclxuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxyXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRudW1iZXIgLSBudW1iZXJcclxuLy8vIEBwYXJhbSB7U3RyaW5nfSAgICR1bml0IC0gcG90ZW50aWFsIHVuaXRcclxuLy8vIEByZXR1cm4ge051bWJlcn0gbGVuZ3RoICgwIGlmIGNhc3QgZmFpbGVkKVxyXG5AZnVuY3Rpb24gX3NjLXVuaXQoJG51bWJlciwgJHVuaXQpIHtcclxuICAkdW5pdHM6IG1hcC1nZXQoJHNjLWNvbnN0YW50cywgJ1VOSVRfVkFMVUVTJyk7XHJcbiAgJGluZGV4OiBpbmRleChtYXAtZ2V0KCRzYy1jb25zdGFudHMsICdVTklUUycpLCAkdW5pdCk7XHJcblxyXG4gIEBpZiBub3QgJGluZGV4IHtcclxuICAgIEByZXR1cm4gX3NjLXRocm93KCRudW1iZXIsICdudW1iZXInKTtcclxuICB9XHJcblxyXG4gIEByZXR1cm4gKCRudW1iZXIgKiBudGgoJHVuaXRzLCAkaW5kZXgpKTtcclxufVxyXG4iLCIvLy8vXHJcbi8vLyBUYWJzXHJcbi8vLyBAZ3JvdXAgQ29tcG9uZW50IC0gVGFic1xyXG4vLy8gQGF1dGhvciBNU1xyXG4vLy8vXHJcblxyXG4vLy9cclxuJHRhYnMtY29sb3ItcHJpbWFyeTogIzAwMCAhZGVmYXVsdDtcclxuLy8vXHJcbiR0YWJzLWNvbG9yLXNlY29uZGFyeTogI0ExRDA0NSAhZGVmYXVsdDtcclxuLy8vXHJcbiR0YWJzLWNvbG9yLWJnOiAkbXN1aWYtYmFja2dyb3VuZCAhZGVmYXVsdDtcclxuLy8vXHJcbiR0YWJzLWJvcmRlcjogMXB4IHNvbGlkICR0YWJzLWNvbG9yLXByaW1hcnkgIWRlZmF1bHQ7XHJcbi8vL1xyXG4kdGFicy1iYXNlLXNwYWNpbmc6IDEwcHggIWRlZmF1bHQ7XHJcblxyXG5cclxuLy8vIFRhYnMgQ29tcG9uZW50IC0gXHJcbi8vLyBUaGlzIGlzIGFuIGFsbW9zdCBKUy1mcmVlIFRhYiBjb21wb25lbnQgdGhhdCB0YWtlc1xyXG4vLy8gYWR2YW50YWdlIG9mIGA6dGFyZ2V0YCBldmVudCB0byBkaXNwbGF5IHRhYnMgY29udGVudFxyXG4vLy8gQGV4YW1wbGVcclxuLy8vICAgPGRpdiBjbGFzcz1cImMtdGFic1wiPlxyXG4vLy8gICAgIDxhIGNsYXNzPVwiYy10YWJzX190YWIgYy10YWJzX190YWItLWlzLWFjdGl2ZVwiIGhyZWY9XCIjdGFiMVwiPlRhYiAxPC9hPlxyXG4vLy8gICAgIDxhIGNsYXNzPVwiYy10YWJzX190YWJcIiBocmVmPVwiI3RhYjJcIj5UYWIgMjwvYT5cclxuLy8vICAgICA8YSBjbGFzcz1cImMtdGFic19fdGFiXCIgaHJlZj1cIiN0YWIzXCI+VGFiIDM8L2E+XHJcbi8vLyAgICAgPGRpdiBjbGFzcz1cImMtdGFic19fdGFiX19jb250ZW50XCIgaWQ9XCJ0YWIxXCI+XHJcbi8vLyAgICAgICA8cD5UYWIgMSBjb250ZW50PC9wPlxyXG4vLy8gICAgIDwvZGl2PlxyXG4vLy8gICAgIDxkaXYgY2xhc3M9XCJjLXRhYnNfX3RhYl9fY29udGVudFwiIGlkPVwidGFiMlwiPlxyXG4vLy8gICAgICAgPHA+VGFiIDIgY29udGVudDwvcD5cclxuLy8vICAgICA8L2Rpdj5cclxuLy8vICAgICA8ZGl2IGNsYXNzPVwiYy10YWJzX190YWJfX2NvbnRlbnRcIiBpZD1cInRhYjNcIj5cclxuLy8vICAgICAgIDxwPjxhIGhyZWY9XCIjXCI+VGFiIDMgY29udGVudDwvYT48L3A+XHJcbi8vLyAgICAgPC9kaXY+XHJcbi8vLyAgIDwvZGl2PlxyXG4vLy8gICBcclxuLy8vICAgLy8gQWxzbyBhZGQgdGhpcyBpbiB0aGUgSlNcclxuLy8vICAgJCgnLmMtdGFic19fdGFiJykub24oJ2NsaWNrJyxmdW5jdGlvbigpeyQodGhpcykuYWRkQ2xhc3MoJ2MtdGFic19fdGFiLS1pcy1hY3RpdmUnKS5zaWJsaW5ncygnLmMtdGFic19fdGFiJykucmVtb3ZlQ2xhc3MoJ2MtdGFic19fdGFiLS1pcy1hY3RpdmUnKX0pO1xyXG5AbWl4aW4gYy10YWJze1xyXG4gIC5jLXRhYnMge1xyXG4gICAgbWFyZ2luOiAkdGFicy1iYXNlLXNwYWNpbmcgKiAyO1xyXG5cclxuICAgICZfX3RhYiB7XHJcbiAgICAgIHBhZGRpbmc6ICR0YWJzLWJhc2Utc3BhY2luZztcclxuICAgICAgY29sb3I6ICR0YWJzLWNvbG9yLXByaW1hcnk7XHJcbiAgICAgIGJvcmRlcjogJHRhYnMtYm9yZGVyO1xyXG5cclxuICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgY29sb3I6ICR0YWJzLWNvbG9yLXNlY29uZGFyeTtcclxuICAgICAgfVxyXG5cclxuICAgICAgJi0taXMtYWN0aXZlIHtcclxuICAgICAgICBjb2xvcjogJHRhYnMtY29sb3Itc2Vjb25kYXJ5O1xyXG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkdGFicy1jb2xvci1iZztcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgJl9fY29udGVudCB7XHJcbiAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgICAgICBtYXJnaW46ICgkdGFicy1iYXNlLXNwYWNpbmcgLSAxcHgpIDA7XHJcbiAgICAgICAgcGFkZGluZzogJHRhYnMtYmFzZS1zcGFjaW5nO1xyXG4gICAgICAgIGJvcmRlcjogJHRhYnMtYm9yZGVyO1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR0YWJzLWNvbG9yLWJnO1xyXG5cclxuICAgICAgICAmOnRhcmdldCB7XHJcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn0iLCIvLy8vXHJcbi8vL1x0VGFibGVzXHJcbi8vLyBAZ3JvdXAgVGFibGVzXHJcbi8vLyBAYXV0aG9yIE1TXHJcbi8vLy9cclxuIiwiLy8vL1xyXG4vLy8gVG9vbHRpcHNcclxuLy8vIEBncm91cCBDb21wb25lbnQgLSBUb29sdGlwc1xyXG4vLy8gQGF1dGhvciBNU1xyXG4vLy8vXHJcbiIsIi8vLy9cclxuLy8vIFNoYW1lIENTU1xyXG4vLy8gLT4gVGhpcyBmaWxlIGlzIGZ1bGwgb2YgcXVpY2sgYW5kIEFXRlVMIGZpeGVzIHRoYXQgc2hvdWxkIGJlIHJlZmFjdG9yZWQgQVNBUC5cclxuLy8vIEBncm91cCBTaGFtZVxyXG4vLy8gQGF1dGhvciBNU1xyXG4vLy8vXHJcblxyXG4vKiBIZWFkZXIgc3R5bGVzICovXHJcbi5sb2dvIGEgaW1nIHtcclxuICBoZWlnaHQ6IDgwcHg7XHJcbn1cclxuXHJcbi5wYWdlLWhlYWRpbmcuc3R5bGUtaW1hZ2Uge1xyXG4gIHBhZGRpbmctdG9wOiAyNjBweDtcclxuICBwYWRkaW5nLWJvdHRvbTogMTYwcHg7XHJcbn1cclxuXHJcbi5uYXZpZ2F0aW9uICNtYWluLW5hdi5jb2xvci13aGl0ZSArIC5idG4tY29udGFpbmVyIGEuYnV0dG9uOmJlZm9yZSB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VjMTg0NiAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4udGl0bGUgaDEge1xyXG4gIGZvbnQtc2l6ZTogMTAwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuXHJcbi50aXRsZSBwIHtcclxuICBmb250LXNpemU6IDI0cHg7XHJcbiAgbGluZS1oZWlnaHQ6IDEuMjU7XHJcbn1cclxuLyogRW5kIGhlYWRlciBzdHlsZXMgKi8iXSwibWFwcGluZ3MiOiJBT09BLFVBQVUsQ0FBVixPQUFVO0VBQ1IsQUFBQSxJQUFJO0lBQ0YsVUFBVSxFQUFFLE1BQU87SUFDbkIsT0FBTyxFQUFFLENBQUU7RUFHYixBQUFBLEVBQUU7SUFDQSxVQUFVLEVBQUUsT0FBUTtJQUNwQixPQUFPLEVBQUUsQ0FBRTs7QUFJZixVQUFVLENBQVYsUUFBVTtFQUNSLEFBQUEsSUFBSTtJQUNGLFVBQVUsRUFBRSxPQUFRO0lBQ3BCLE9BQU8sRUFBRSxDQUFFO0VBR2IsQUFBQSxFQUFFO0lBQ0EsVUFBVSxFQUFFLE1BQU87SUFDbkIsT0FBTyxFQUFFLENBQUU7O0FBSWYsVUFBVSxDQUFWLFVBQVU7RUFDUixBQUFBLElBQUk7SUFDRixTQUFTLEVBQUUsaUJBQVU7RUFHdkIsQUFBQSxFQUFFO0lBQ0EsU0FBUyxFQUFF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 */
